// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Protobuf messages for arolla serialization format.
//
// ContainerProto
//   -- Top-level message that can store multiple expressions and values.
//
// LiteralNodeProto, LeafNodeProto, PlaceholderNodeProto, and OperatorNodeProto
//   -- These are messages for different expression node types.
//
// ValueProto
//   -- A message for value storing.
//
//      The base format defines no representation for concrete value types, like
//      `int` and `float`.
//
//      Support for concrete value types can be enabled using codecs.
//
syntax = "proto2";

package arolla.serialization_base;

option cc_enable_arenas = true;

// Identifies a codec needed for de-serialisation.
message CodecProto {
  optional string name = 1;
}

// Represents a literal node.
message LiteralNodeProto {
  // Reference to a past decoding step with a value.
  optional int64 literal_value_index = 1;
}

// Represents a leaf node.
message LeafNodeProto {
  optional string leaf_key = 1;
}

// Represents a placeholder node.
message PlaceholderNodeProto {
  optional string placeholder_key = 1;
}

// Represents an operator node.
message OperatorNodeProto {
  // Reference to a past decoding step with EXPR_OPERATOR.
  optional int64 operator_value_index = 1;
  // References to past decoding steps with dependant expressions.
  repeated int64 input_expr_indices = 2;
}

// Represents a value.
message ValueProto {
  // References to past decoding steps with values.
  repeated int64 input_value_indices = 1;
  // References to past decoding steps with expressions.
  repeated int64 input_expr_indices = 2;

  // (optional) Index of a codec from `ContainerProto.codecs`.
  //
  // NOTE: Presence of `ValueProto.codec_index` can increase the decoding speed.
  // When the codec_index is not set, the decoder tries all codecs from
  // ContainerProto.codecs one by one.
  optional int64 codec_index = 3;

  // A range for the "unverified" allocation scheme.
  //
  // The recommended extension-id generator:
  //   echo $((EPOCHSECONDS / 10 * 3 - 181776905))
  extensions 326031909 to 524999999;
}

// Assembling instructions for one entity -- an expression-node or a value.
// A decoding step can depend on the results from the past decoding steps.
message DecodingStepProto {
  oneof type {
    LiteralNodeProto literal_node = 1;
    LeafNodeProto leaf_node = 2;
    PlaceholderNodeProto placeholder_node = 3;
    OperatorNodeProto operator_node = 4;
    ValueProto value = 5;
  }
}

// Represents a collection of expressions and values.
message ContainerProto {
  // Version of the container format.
  //
  // NOTE: Alterations in codecs do not change the container format.
  optional int64 version = 1;

  // List of codecs required for decoding.
  repeated CodecProto codecs = 2;

  // Sequence of decoding steps that assemble entities -- expressions and
  // values.
  repeated DecodingStepProto decoding_steps = 3;

  // References to the decoding steps corresponding to the expressions and
  // values stored in the container.
  //
  // If the container stores just one entity -- a value or an expression --
  // there will be an index of the last decoding step.
  repeated int64 output_value_indices = 4;
  repeated int64 output_expr_indices = 5;
}
