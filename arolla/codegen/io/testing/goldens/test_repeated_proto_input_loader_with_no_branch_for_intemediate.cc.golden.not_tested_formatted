// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target:
// //arolla/codegen/io/testing:test_repeated_proto_input_loader_with_no_branch_for_intemediate

#include <memory>

#include "arolla/codegen/io/multi_loader.h"
#include "arolla/codegen/qtype_utils.h"
#include "arolla/dense_array/dense_array.h"
#include "arolla/dense_array/qtype/types.h"
#include "arolla/io/accessors_input_loader.h"
#include "arolla/io/input_loader.h"
#include "arolla/io/wildcard_input_loader.h"
#include "arolla/proto/test.pb.h"
#include "arolla/proto/test_extension.pb.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/base_types.h"
#include "arolla/qtype/qtype.h"
#include "arolla/util/map.h"

namespace {
using ::absl::OkStatus;
using ::absl::Status;
using ::absl::StatusOr;
using ::arolla::BoundInputLoader;
using ::arolla::ChainInputLoader;
using ::arolla::FramePtr;
using ::arolla::GetQType;
using ::arolla::InputLoader;
using ::arolla::QTypePtr;
using ::arolla::RawBufferFactory;
using ::arolla::TypedSlot;
using ::arolla::WildcardInputLoader;
}  // namespace

namespace my_namespace_GetRepeatedProtoLoaderWithNoBranchesForIntermediateImplNamespace {

using Input = ::testing_namespace::Root;

namespace {
namespace {

namespace multi_value_protopath {

using ::arolla::codegen::io::kSkippedOffset;

// In this namespace protopath inputs with `DenseArray` are being loaded.

using HierarchicalMultiValueRequestedInputs =
    ::arolla::codegen::io::HierarchicalMultiValueRequestedInputsData<
        /*kLeafCount=*/4,
        /*kNodeCount=*/8>;

// Provides access to the output pointers for each leaf.
class OutputProvider {
 public:
  const HierarchicalMultiValueRequestedInputs* requested_inputs;
  FramePtr frame;

 public:
  // protopath=`inners[:]/a` name=`inners/a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable0(size_t offset) const {
    using value_type =
        std::decay_t<decltype(std::declval<const Input&>().inners(0).a())>;
    using result_type =
        HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[0], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference/x`
  // name=`inners/rr/sr/x`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable1(size_t offset) const {
    using value_type = std::decay_t<
        decltype(std::declval<const Input&>()
                     .inners(0)
                     .root_reference()
                     .GetExtension(
                         ::testing_extension_namespace::root_reference)
                     .x())>;
    using result_type =
        HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[1], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference/x_int64`
  // name=`inners/rr/sr/x64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable2(size_t offset) const {
    using value_type = std::decay_t<
        decltype(std::declval<const Input&>()
                     .inners(0)
                     .root_reference()
                     .GetExtension(
                         ::testing_extension_namespace::root_reference)
                     .x_int64())>;
    using result_type =
        HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[2], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`inners[:]/root_reference/x` name=`inners/rr/x`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable3(size_t offset) const {
    using value_type = std::decay_t<
        decltype(std::declval<const Input&>().inners(0).root_reference().x())>;
    using result_type =
        HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[3], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }
};

using ResultType_0 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable0(0))>>;
using ResultType_1 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable1(0))>>;
using ResultType_2 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable2(0))>>;
using ResultType_3 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable3(0))>>;

// Traverse the proto and put results for all DenaseArray values to the frame.
class SlotSetter {
 public:
  // Collects all intermediate results and sizes we need for further individual
  // DenseArray creation.
  // Fills `single_` and `intermediate*_`.
  void CollectIntermediateResults(
      const Input& input,
      const HierarchicalMultiValueRequestedInputs& requested_inputs) {
    const Input& tmp_3 = input;

    // protopath=`inners[:]`
    multi_.intermediate2.reserve(tmp_3.inners().size());
    if (requested_inputs.common.node_requested[0]) {
      multi_.intermediate0.reserve(tmp_3.inners().size());
    }

    for (const auto& tmp_2 : tmp_3.inners()) {
      multi_.intermediate2.push_back(nullptr);
      if (requested_inputs.common.node_requested[0]) {
        multi_.intermediate0.push_back(nullptr);
      }
      multi_.intermediate2.back() = &tmp_2;
      // protopath=`inners[:]/root_reference`
      [&]() {
        if (!requested_inputs.common.node_requested[1]) {
          return;
        }
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, root_reference))) {
          return;
        }
        const auto& tmp_1 = tmp_2.root_reference();
        // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference`
        [&]() {
          if (!requested_inputs.common.node_requested[0]) {
            return;
          }
          const auto& tmp_0 =
              tmp_1.GetExtension(::testing_extension_namespace::root_reference);
          multi_.intermediate0.back() = &tmp_0;
        }();
      }();
    }
  }
  // Returns total size of the array for
  // protopath=`inners[:]/a` name=`inners/a`
  size_t TotalSize0() const { return multi_.intermediate2.size(); }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/a` name=`inners/a`
  void CollectResultFromIntermediate0(ResultType_0* output,
                                      RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize0();
    using ValueT = ResultType_0::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate2) {
      const auto& tmp_6 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_6, a))) {
        bitmap_bldr.AddMissed(id++);
        inserter.SkipN(1);
        continue;
      }
      const auto& tmp_0 = tmp_6.a();
      id++;
      inserter.Add(tmp_0);
    }

    *output =
        ResultType_0{std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference/x`
  // name=`inners/rr/sr/x`
  size_t TotalSize1() const { return multi_.intermediate0.size(); }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference/x`
  // name=`inners/rr/sr/x`
  void CollectResultFromIntermediate1(ResultType_1* output,
                                      RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize1();
    using ValueT = ResultType_1::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference`
    for (const auto* intermediate_ptr : multi_.intermediate0) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++);
        inserter.SkipN(1);
        continue;
      }
      const auto& tmp_3 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_3, x))) {
        bitmap_bldr.AddMissed(id++);
        inserter.SkipN(1);
        continue;
      }
      const auto& tmp_1 = tmp_3.x();
      id++;
      inserter.Add(tmp_1);
    }

    *output =
        ResultType_1{std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference/x_int64`
  // name=`inners/rr/sr/x64`
  size_t TotalSize2() const { return multi_.intermediate0.size(); }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference/x_int64`
  // name=`inners/rr/sr/x64`
  void CollectResultFromIntermediate2(ResultType_2* output,
                                      RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize2();
    using ValueT = ResultType_2::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference`
    for (const auto* intermediate_ptr : multi_.intermediate0) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++);
        inserter.SkipN(1);
        continue;
      }
      const auto& tmp_3 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_3, x_int64))) {
        bitmap_bldr.AddMissed(id++);
        inserter.SkipN(1);
        continue;
      }
      const auto& tmp_2 = tmp_3.x_int64();
      id++;
      inserter.Add(tmp_2);
    }

    *output =
        ResultType_2{std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/root_reference/x` name=`inners/rr/x`
  size_t TotalSize3() const { return multi_.intermediate2.size(); }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/root_reference/x` name=`inners/rr/x`
  void CollectResultFromIntermediate3(ResultType_3* output,
                                      RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize3();
    using ValueT = ResultType_3::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate2) {
      const auto& tmp_6 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_6, root_reference))) {
        bitmap_bldr.AddMissed(id++);
        inserter.SkipN(1);
        continue;
      }
      const auto& tmp_5 = tmp_6.root_reference();

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_5, x))) {
        bitmap_bldr.AddMissed(id++);
        inserter.SkipN(1);
        continue;
      }
      const auto& tmp_4 = tmp_5.x();
      id++;
      inserter.Add(tmp_4);
    }

    *output =
        ResultType_3{std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  void CollectResults(const Input& input, const OutputProvider& outputs,
                      RawBufferFactory* buffer_factory) {
    single_.intermediate3 = &input;
    CollectIntermediateResults(input, *outputs.requested_inputs);

    // protopath=`inners[:]`
    // protopath=`inners[:]/a` name=`inners/a`
    if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[0];
        offset != kSkippedOffset) {
      CollectResultFromIntermediate0(outputs.GetMutable0(offset),
                                     buffer_factory);
    }
    // protopath=`inners[:]/root_reference`
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[1]) {
        return;
      }
      // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[0]) {
          return;
        }
        // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference/x`
        // name=`inners/rr/sr/x`
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[1];
            offset != kSkippedOffset) {
          CollectResultFromIntermediate1(outputs.GetMutable1(offset),
                                         buffer_factory);
        }
        // protopath=`inners[:]/root_reference/Ext::testing_extension_namespace.root_reference/x_int64`
        // name=`inners/rr/sr/x64`
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[2];
            offset != kSkippedOffset) {
          CollectResultFromIntermediate2(outputs.GetMutable2(offset),
                                         buffer_factory);
        }
      }();
      // protopath=`inners[:]/root_reference/x` name=`inners/rr/x`
      if (size_t offset =
              outputs.requested_inputs->common.leaf_frame_offsets[3];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate3(outputs.GetMutable3(offset),
                                       buffer_factory);
      }
    }();
  }

 private:
  // Intermediate non vector data: pointers to messages and sizes.
  struct SingleValueData {
    const Input* intermediate3 = nullptr;
  };

  // Intermediate vector data: collection of pointers to messages.
  struct MultiValueData {
    using MsgType0 = std::decay_t<
        decltype(std::declval<const Input&>()
                     .inners(0)
                     .root_reference()
                     .GetExtension(
                         ::testing_extension_namespace::root_reference))>;
    std::vector<const MsgType0*> intermediate0;
    using MsgType2 =
        std::decay_t<decltype(std::declval<const Input&>().inners(0))>;
    std::vector<const MsgType2*> intermediate2;
  };

  SingleValueData single_;
  MultiValueData multi_;
};

// InputLoader for all DenseArray value protopathes.
class Loader final : public ::arolla::StaticInputLoader<Input> {
 public:
  Loader()
      : StaticInputLoader<Input>(
            // Use special builder to reduce binary size and stack pressure.
            []() {
              ::arolla::codegen::NamedQTypeVectorBuilder builder;
              builder.AddFromCommonPrefixWithPrevious(
                  // inners/a
                  8, R"RL_CODEGEN_DELIM(inners/a)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_0>());
              builder.AddFromCommonPrefixWithPrevious(
                  // inners/rr/sr/x
                  14, R"RL_CODEGEN_DELIM(rr/sr/x)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_1>());
              builder.AddFromCommonPrefixWithPrevious(
                  // inners/rr/sr/x64
                  16, R"RL_CODEGEN_DELIM(64)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_2>());
              builder.AddFromCommonPrefixWithPrevious(
                  // inners/rr/x
                  11, R"RL_CODEGEN_DELIM(x)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_3>());
              return std::move(builder).Build();
            }()) {}

 private:
  auto CreateProtopathTree() const {
    return []() {
      std::vector<std::vector<size_t>> tree(8);
      tree[3] = {1, 2};
      tree[5] = {3, 4};
      tree[6] = {0, 5};
      tree[7] = {6};
      return tree;
    }();
  }

  StatusOr<BoundInputLoader<Input>> BindImpl(
      const absl::flat_hash_map<std::string, TypedSlot>& output_slots)
      const final {
    ASSIGN_OR_RETURN(
        auto optional_slots,
        ::arolla::MaybeFindSlotsAndVerifyTypes(types_in_order(), output_slots));
    // Allocate on heap to reduce stack pressure.
    auto inputs = std::make_unique<HierarchicalMultiValueRequestedInputs>();
    auto tree = CreateProtopathTree();
    CreateHierarchicalMultiValueRequestedInputs(optional_slots, tree,
                                                inputs.get());
    return BoundInputLoader<Input>(
        [inputs = std::move(inputs)](const Input& input, FramePtr frame,
                                     RawBufferFactory* buffer_factory) {
          OutputProvider output_getter{inputs.get(), frame};
          SlotSetter slot_setter;
          slot_setter.CollectResults(input, output_getter, buffer_factory);
          return OkStatus();
        });
  }
};

}  // namespace multi_value_protopath
}  // namespace

// Returns ChainInputLoader: Accessors, Single- and Multi-value proto.
const InputLoader<Input>* GetCollectionInputLoader() {
  static const InputLoader<Input>* impl =
      ChainInputLoader<Input>::Build(
          // Not using make_unique to avoid binary size blowup.
          ::arolla::InputLoaderPtr<Input>(static_cast<InputLoader<Input>*>(
              new multi_value_protopath::Loader())))
          ->release();
  return impl;
}
}  // namespace

namespace {

constexpr auto GetAllShardsInputLoader = ::
    my_namespace_GetRepeatedProtoLoaderWithNoBranchesForIntermediateImplNamespace::
        GetCollectionInputLoader;

}  // namespace
}  // namespace
   // my_namespace_GetRepeatedProtoLoaderWithNoBranchesForIntermediateImplNamespace

namespace my_namespace {

std::unique_ptr<InputLoader<::testing_namespace::Root>>
GetRepeatedProtoLoaderWithNoBranchesForIntermediate() {
  return MakeNotOwningInputLoader(
      ::my_namespace_GetRepeatedProtoLoaderWithNoBranchesForIntermediateImplNamespace::
          GetAllShardsInputLoader());
}

}  // namespace my_namespace
