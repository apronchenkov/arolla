// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target: //arolla/codegen/io/testing:test_proto_input_loader_with_duplicated_configuration

#include <memory>


#include "arolla/codegen/io/multi_loader.h"
#include "arolla/io/proto_types/types.h"
#include "arolla/proto/testing/test.pb.h"
#include "arolla/util/map.h"
#include "arolla/codegen/qtype_utils.h"
#include "arolla/io/accessors_input_loader.h"
#include "arolla/io/input_loader.h"
#include "arolla/io/wildcard_input_loader.h"
#include "arolla/io/proto_types/types.h"
#include "arolla/qtype/base_types.h"

namespace {
using ::absl::OkStatus;
using ::absl::Status;
using ::absl::StatusOr;
using ::arolla::BoundInputLoader;
using ::arolla::ChainInputLoader;
using ::arolla::FramePtr;
using ::arolla::GetQType;
using ::arolla::InputLoader;
using ::arolla::QTypePtr;
using ::arolla::RawBufferFactory;
using ::arolla::TypedSlot;
using ::arolla::WildcardInputLoader;
}  // namespace

namespace my_namespace_GetProtoLoaderWithDuplicatedConfigurationImplNamespace {

using Input = ::testing_namespace::Root;

namespace {
namespace {
namespace single_value_protopath {

using ::arolla::codegen::io::kSkippedOffset;

// In this namespace protopath inputs with `OptionalValue` and `DenseArrayShape`
// are being loaded.

using HierarchicalSingleValueRequestedInputs =
    ::arolla::codegen::io::HierarchicalSingleValueRequestedInputsData<
        /*kLeafCount=*/2,
        /*kNodeCount=*/3>;

// Provides access to the output pointers for each leaf.
class OutputProvider {
 public:
  const HierarchicalSingleValueRequestedInputs* requested_inputs;
  FramePtr frame;

 public:

  // protopath=`x` name=`/x`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable0(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[0],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x` name=`y`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable1(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[1],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

};


using ResultType_0 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable0(0))>>;
using ResultType_1 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable1(0))>>;

// Traverse the proto and put results for all single values to the frame.
class SlotSetter {
 public:

 void CollectResults(const Input& input, const OutputProvider& outputs) {
   const Input& tmp_0 = input;

    // protopath=`x` name=`/x`
    [&]() {
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[0];
          offset != kSkippedOffset) {
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_0, x))) {
          outputs.GetMutable0(offset)->present = false;
          return;
        }
        auto* output = outputs.GetMutable0(offset);
        output->present = true;
        output->value = ::arolla::proto::ToArollaCompatibleType(
            tmp_0.x());
      }
    }();
    // protopath=`x` name=`y`
    [&]() {
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[1];
          offset != kSkippedOffset) {
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_0, x))) {
          outputs.GetMutable1(offset)->present = false;
          return;
        }
        auto* output = outputs.GetMutable1(offset);
        output->present = true;
        output->value = ::arolla::proto::ToArollaCompatibleType(
            tmp_0.x());
      }
    }();
  }
};

// InputLoader for all single value protopathes.
class Loader final : public ::arolla::StaticInputLoader<Input> {
 public:
  Loader()
    : ::arolla::StaticInputLoader<Input>(
        // Use special builder to reduce binary size and stack pressure.
        []() {
          ::arolla::codegen::NamedQTypeVectorBuilder builder;
          builder.AddFromCommonPrefixWithPrevious(
              // /x
              2,
              R"RL_CODEGEN_DELIM(/x)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_0>());
          builder.AddFromCommonPrefixWithPrevious(
              // y
              1,
              R"RL_CODEGEN_DELIM(y)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_1>());
          return std::move(builder).Build();
        }()) {}

 private:
  auto CreateProtopathTree() const {
    return []() {
      std::vector<std::vector<size_t>> tree(3);
      tree[2] = {0,1};
      return tree;
    }();
  }

  StatusOr<BoundInputLoader<Input>> BindImpl(
      const absl::flat_hash_map<std::string, TypedSlot>& output_slots)
      const final {
    ASSIGN_OR_RETURN(auto optional_slots,
                     ::arolla::MaybeFindSlotsAndVerifyTypes(
                         types_in_order(), output_slots));
    // Allocate on heap to reduce stack pressure.
    auto inputs = std::make_unique<HierarchicalSingleValueRequestedInputs>();
    auto tree = CreateProtopathTree();
    CreateHierarchicalSingleValueRequestedInputs(
      optional_slots,
      /*size_leaves=*/{  },
      tree,
      inputs.get());
    return BoundInputLoader<Input>([inputs=std::move(inputs)](
        const Input& input, FramePtr frame, RawBufferFactory*) {
      OutputProvider output_getter{inputs.get(), frame};
      SlotSetter slot_setter;
      slot_setter.CollectResults(input, output_getter);
      return OkStatus();
    });
  }
};

}  // namespace single_value_protopath

}  // namespace

// Returns ChainInputLoader: Accessors, Single- and Multi-value proto.
const InputLoader<Input>*
GetCollectionInputLoader() {
  static const InputLoader<Input>* impl = ChainInputLoader<Input>::Build(
          // Not using make_unique to avoid binary size blowup.
          ::arolla::InputLoaderPtr<Input>(static_cast<InputLoader<Input>*>(
            new single_value_protopath::Loader()))
      )->release();
  return impl;
}
}  // namespace


namespace {

constexpr auto GetAllShardsInputLoader =
    ::my_namespace_GetProtoLoaderWithDuplicatedConfigurationImplNamespace::GetCollectionInputLoader;

}  // namespace
}  // namespace my_namespace_GetProtoLoaderWithDuplicatedConfigurationImplNamespace

namespace my_namespace {

std::unique_ptr<InputLoader<::testing_namespace::Root>>
GetProtoLoaderWithDuplicatedConfiguration() {
  return MakeNotOwningInputLoader(
      ::my_namespace_GetProtoLoaderWithDuplicatedConfigurationImplNamespace::GetAllShardsInputLoader());
}

}  // namespace my_namespace

