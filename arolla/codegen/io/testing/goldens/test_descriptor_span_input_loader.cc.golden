// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target: //arolla/codegen/io/testing:test_descriptor_span_input_loader


#include "arolla/codegen/io/multi_loader.h"
#include "arolla/dense_array/dense_array.h"
#include "arolla/dense_array/qtype/types.h"
#include "arolla/proto/test.pb.h"
#include "arolla/proto/test_proto3.pb.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/qtype.h"
#include "arolla/util/map.h"
#include "arolla/util/text.h"
#include "arolla/io/accessors_input_loader.h"
#include "arolla/io/input_loader.h"
#include "arolla/io/wildcard_input_loader.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/base_types.h"

namespace {
using ::absl::OkStatus;
using ::absl::Status;
using ::absl::StatusOr;
using ::arolla::BoundInputLoader;
using ::arolla::ChainInputLoader;
using ::arolla::FramePtr;
using ::arolla::GetQType;
using ::arolla::InputLoader;
using ::arolla::InputLoaderPtr;
using ::arolla::QTypePtr;
using ::arolla::RawBufferFactory;
using ::arolla::TypedSlot;
using ::arolla::WildcardInputLoader;
}  // namespace

namespace my_namespace_GetDescriptorBasedSpanLoaderImplNamespace {
namespace {

using Input = ::absl::Span<const ::testing_namespace::Root>;


namespace multi_value_protopath {

using ::arolla::codegen::io::kSkippedOffset;
using ::arolla::codegen::io::NamedTypesBuilder;

// In this namespace protopath inputs with `DenseArray` are being loaded.

using HierarchicalMultiValueRequestedInputs =
    ::arolla::codegen::io::HierarchicalMultiValueRequestedInputsData<
        /*kLeafCount=*/76,
        /*kNodeCount=*/96>;

// Provides access to the output pointers for each leaf.
class OutputProvider {
 public:
  const HierarchicalMultiValueRequestedInputs* requested_inputs;
  FramePtr frame;

 public:

  // protopath=`[:]/BrOkEn_CaSe` name=`/BrOkEn_CaSe`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable0(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].broken_case())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[0],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/a` name=`/inner/a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable1(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().a())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[1],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/as[:]` name=`/inner/as`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable2(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().as(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[2],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/count(as[:])` name=`/inner/as/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable3(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[3],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/bytes_string_view` name=`/inner/bytes_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable4(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().bytes_string_view())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[4],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/inner2/z` name=`/inner/inner2/z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable5(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().inner2().z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[5],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/inner2/zs[:]` name=`/inner/inner2/zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable6(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().inner2().zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[6],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/inner2/count(zs[:])` name=`/inner/inner2/zs/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable7(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[7],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/count(inners2[:])` name=`/inner/inners2/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable8(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[8],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/inners2[:]/z` name=`/inner/inners2/z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable9(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().inners2(0).z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[9],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable10(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().inners2(0).zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[10],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/inners2[:]/count(zs[:])` name=`/inner/inners2/zs/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable11(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[11],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/raw_bytes` name=`/inner/raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable12(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().raw_bytes())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[12],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/str` name=`/inner/str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable13(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[13],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inner/str_string_view` name=`/inner/str_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable14(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[14],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(inners[:])` name=`/inners/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable15(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[15],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/a` name=`/inners/a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable16(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).a())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[16],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/as[:]` name=`/inners/as`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable17(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).as(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[17],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/count(as[:])` name=`/inners/as/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable18(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[18],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/bytes_string_view` name=`/inners/bytes_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable19(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).bytes_string_view())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[19],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/inner2/z` name=`/inners/inner2/z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable20(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).inner2().z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[20],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable21(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).inner2().zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[21],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/inner2/count(zs[:])` name=`/inners/inner2/zs/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable22(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[22],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/count(inners2[:])` name=`/inners/inners2/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable23(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[23],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/inners2[:]/z` name=`/inners/inners2/z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable24(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).inners2(0).z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[24],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable25(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).inners2(0).zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[25],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/inners2[:]/count(zs[:])` name=`/inners/inners2/zs/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable26(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[26],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/raw_bytes` name=`/inners/raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable27(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).raw_bytes())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[27],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/str` name=`/inners/str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable28(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[28],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/inners[:]/str_string_view` name=`/inners/str_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable29(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[29],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/private` name=`/private`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable30(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].private_())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[30],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/proto3/non_optional_i32` name=`/proto3/non_optional_i32`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable31(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].proto3().non_optional_i32())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[31],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/raw_bytes` name=`/raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable32(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].raw_bytes())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[32],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_bools[:]` name=`/repeated_bools`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable33(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].repeated_bools(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[33],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_bools[:])` name=`/repeated_bools/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable34(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[34],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_doubles[:]` name=`/repeated_doubles`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable35(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].repeated_doubles(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[35],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_doubles[:])` name=`/repeated_doubles/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable36(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[36],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_enums[:]` name=`/repeated_enums`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable37(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].repeated_enums(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[37],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_enums[:])` name=`/repeated_enums/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable38(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[38],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_floats[:]` name=`/repeated_floats`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable39(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].repeated_floats(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[39],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_floats[:])` name=`/repeated_floats/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable40(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[40],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_int32s[:]` name=`/repeated_int32s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable41(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].repeated_int32s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[41],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_int32s[:])` name=`/repeated_int32s/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable42(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[42],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_int64s[:]` name=`/repeated_int64s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable43(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].repeated_int64s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[43],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_int64s[:])` name=`/repeated_int64s/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable44(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[44],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable45(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].repeated_raw_bytes(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[45],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_raw_bytes[:])` name=`/repeated_raw_bytes/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable46(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[46],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_str[:]` name=`/repeated_str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable47(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[47],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_str[:])` name=`/repeated_str/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable48(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[48],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_uint32s[:]` name=`/repeated_uint32s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable49(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].repeated_uint32s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[49],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_uint32s[:])` name=`/repeated_uint32s/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable50(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[50],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/repeated_uint64s[:]` name=`/repeated_uint64s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable51(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].repeated_uint64s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[51],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(repeated_uint64s[:])` name=`/repeated_uint64s/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable52(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[52],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/str` name=`/str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable53(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[53],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x` name=`/x`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable54(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[54],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x0` name=`/x0`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable55(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x0())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[55],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x1` name=`/x1`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable56(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x1())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[56],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x2` name=`/x2`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable57(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x2())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[57],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x3` name=`/x3`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable58(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x3())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[58],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x4` name=`/x4`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable59(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x4())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[59],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x5` name=`/x5`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable60(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x5())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[60],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x6` name=`/x6`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable61(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x6())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[61],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x7` name=`/x7`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable62(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x7())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[62],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x8` name=`/x8`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable63(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x8())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[63],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x9` name=`/x9`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable64(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x9())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[64],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x_bytes_string_view` name=`/x_bytes_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable65(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x_bytes_string_view())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[65],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x_double` name=`/x_double`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable66(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x_double())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[66],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x_enum` name=`/x_enum`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable67(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x_enum())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[67],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x_fixed64` name=`/x_fixed64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable68(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x_fixed64())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[68],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x_float` name=`/x_float`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable69(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x_float())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[69],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x_int64` name=`/x_int64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable70(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x_int64())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[70],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x_string_string_view` name=`/x_string_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable71(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[71],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x_uint32` name=`/x_uint32`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable72(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x_uint32())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[72],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/x_uint64` name=`/x_uint64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable73(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].x_uint64())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[73],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/ys[:]` name=`/ys`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable74(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>()[0].ys(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[74],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`[:]/count(ys[:])` name=`/ys/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable75(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[75],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

};


using ResultType_0 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable0(0))>>;
using ResultType_1 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable1(0))>>;
using ResultType_2 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable2(0))>>;
using ResultType_3 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable3(0))>>;
using ResultType_4 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable4(0))>>;
using ResultType_5 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable5(0))>>;
using ResultType_6 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable6(0))>>;
using ResultType_7 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable7(0))>>;
using ResultType_8 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable8(0))>>;
using ResultType_9 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable9(0))>>;
using ResultType_10 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable10(0))>>;
using ResultType_11 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable11(0))>>;
using ResultType_12 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable12(0))>>;
using ResultType_13 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable13(0))>>;
using ResultType_14 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable14(0))>>;
using ResultType_15 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable15(0))>>;
using ResultType_16 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable16(0))>>;
using ResultType_17 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable17(0))>>;
using ResultType_18 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable18(0))>>;
using ResultType_19 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable19(0))>>;
using ResultType_20 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable20(0))>>;
using ResultType_21 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable21(0))>>;
using ResultType_22 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable22(0))>>;
using ResultType_23 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable23(0))>>;
using ResultType_24 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable24(0))>>;
using ResultType_25 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable25(0))>>;
using ResultType_26 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable26(0))>>;
using ResultType_27 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable27(0))>>;
using ResultType_28 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable28(0))>>;
using ResultType_29 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable29(0))>>;
using ResultType_30 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable30(0))>>;
using ResultType_31 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable31(0))>>;
using ResultType_32 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable32(0))>>;
using ResultType_33 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable33(0))>>;
using ResultType_34 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable34(0))>>;
using ResultType_35 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable35(0))>>;
using ResultType_36 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable36(0))>>;
using ResultType_37 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable37(0))>>;
using ResultType_38 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable38(0))>>;
using ResultType_39 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable39(0))>>;
using ResultType_40 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable40(0))>>;
using ResultType_41 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable41(0))>>;
using ResultType_42 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable42(0))>>;
using ResultType_43 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable43(0))>>;
using ResultType_44 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable44(0))>>;
using ResultType_45 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable45(0))>>;
using ResultType_46 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable46(0))>>;
using ResultType_47 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable47(0))>>;
using ResultType_48 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable48(0))>>;
using ResultType_49 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable49(0))>>;
using ResultType_50 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable50(0))>>;
using ResultType_51 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable51(0))>>;
using ResultType_52 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable52(0))>>;
using ResultType_53 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable53(0))>>;
using ResultType_54 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable54(0))>>;
using ResultType_55 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable55(0))>>;
using ResultType_56 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable56(0))>>;
using ResultType_57 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable57(0))>>;
using ResultType_58 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable58(0))>>;
using ResultType_59 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable59(0))>>;
using ResultType_60 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable60(0))>>;
using ResultType_61 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable61(0))>>;
using ResultType_62 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable62(0))>>;
using ResultType_63 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable63(0))>>;
using ResultType_64 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable64(0))>>;
using ResultType_65 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable65(0))>>;
using ResultType_66 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable66(0))>>;
using ResultType_67 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable67(0))>>;
using ResultType_68 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable68(0))>>;
using ResultType_69 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable69(0))>>;
using ResultType_70 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable70(0))>>;
using ResultType_71 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable71(0))>>;
using ResultType_72 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable72(0))>>;
using ResultType_73 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable73(0))>>;
using ResultType_74 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable74(0))>>;
using ResultType_75 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable75(0))>>;

// Traverse the proto and put results for all DenaseArray values to the frame.
class SlotSetter {
 public:
  // Collects all intermediate results and sizes we need for further individual
  // DenseArray creation.
  // Fills `single_` and `intermediate*_`.
  void CollectIntermediateResults(
     const Input& input,
     const HierarchicalMultiValueRequestedInputs& requested_inputs) {
   const Input& tmp_19 = input;

    // protopath=`[:]`
    multi_.intermediate18.reserve(tmp_19.size());
    if (requested_inputs.common.node_requested[4]) {
      multi_.intermediate4.reserve(tmp_19.size());
      if (requested_inputs.common.node_requested[0]) {
        multi_.intermediate0.reserve(tmp_19.size());
      }
    }

    for (const auto& tmp_18 : tmp_19) {
      multi_.intermediate18.push_back(nullptr);
      if (requested_inputs.common.node_requested[4]) {
        multi_.intermediate4.push_back(nullptr);
        if (requested_inputs.common.node_requested[0]) {
          multi_.intermediate0.push_back(nullptr);
        }
      }
      multi_.intermediate18.back() = &tmp_18;
      // protopath=`[:]` fictive
      [&]() {
        if (!requested_inputs.common.node_requested[11]) {
          return;
        }
        const auto& tmp_11 = tmp_18;
        // protopath=`[:]/inner`
        [&]() {
          if (!requested_inputs.common.node_requested[4]) {
            return;
          }
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_11, inner))) {
            return;
          }
          const auto& tmp_4 = tmp_11.inner();
          multi_.intermediate4.back() = &tmp_4;
          // protopath=`[:]/inner` fictive
          [&]() {
            if (!requested_inputs.common.node_requested[2]) {
              return;
            }
            const auto& tmp_2 = tmp_4;
            // protopath=`[:]/inner/as[:]` name=`/inner/as`
            single_.total_size_2 +=
                tmp_2.as().size();
            // protopath=`[:]/inner/inner2`
            [&]() {
              if (!requested_inputs.common.node_requested[0]) {
                return;
              }
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, inner2))) {
                return;
              }
              const auto& tmp_0 = tmp_2.inner2();
              multi_.intermediate0.back() = &tmp_0;
              // protopath=`[:]/inner/inner2/zs[:]` name=`/inner/inner2/zs`
              single_.total_size_6 +=
                  tmp_0.zs().size();
            }();
            // protopath=`[:]/inner/inners2[:]`
            [&]() {
              if (!requested_inputs.common.node_requested[1]) {
                return;
              }

              for (const auto& tmp_1 : tmp_2.inners2()) {
                multi_.intermediate1.push_back(nullptr);
                multi_.intermediate1.back() = &tmp_1;
                // protopath=`[:]/inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
                single_.total_size_11 +=
                    tmp_1.zs().size();
              }
            }();
          }();
        }();
        // protopath=`[:]/inners[:]`
        [&]() {
          if (!requested_inputs.common.node_requested[9]) {
            return;
          }

          for (const auto& tmp_9 : tmp_11.inners()) {
            multi_.intermediate9.push_back(nullptr);
            if (requested_inputs.common.node_requested[5]) {
              multi_.intermediate5.push_back(nullptr);
            }
            multi_.intermediate9.back() = &tmp_9;
            // protopath=`[:]/inners[:]` fictive
            [&]() {
              if (!requested_inputs.common.node_requested[7]) {
                return;
              }
              const auto& tmp_7 = tmp_9;
              // protopath=`[:]/inners[:]/as[:]` name=`/inners/as`
              single_.total_size_22 +=
                  tmp_7.as().size();
              // protopath=`[:]/inners[:]/inner2`
              [&]() {
                if (!requested_inputs.common.node_requested[5]) {
                  return;
                }
                if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_7, inner2))) {
                  return;
                }
                const auto& tmp_5 = tmp_7.inner2();
                multi_.intermediate5.back() = &tmp_5;
                // protopath=`[:]/inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
                single_.total_size_26 +=
                    tmp_5.zs().size();
              }();
              // protopath=`[:]/inners[:]/inners2[:]`
              [&]() {
                if (!requested_inputs.common.node_requested[6]) {
                  return;
                }

                for (const auto& tmp_6 : tmp_7.inners2()) {
                  multi_.intermediate6.push_back(nullptr);
                  multi_.intermediate6.back() = &tmp_6;
                  // protopath=`[:]/inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
                  single_.total_size_31 +=
                      tmp_6.zs().size();
                }
              }();
            }();
          }
        }();
        // protopath=`[:]/repeated_bools[:]` name=`/repeated_bools`
        single_.total_size_44 +=
            tmp_11.repeated_bools().size();
      }();
      // protopath=`[:]` fictive
      [&]() {
        if (!requested_inputs.common.node_requested[12]) {
          return;
        }
        const auto& tmp_12 = tmp_18;
        // protopath=`[:]/repeated_doubles[:]` name=`/repeated_doubles`
        single_.total_size_47 +=
            tmp_12.repeated_doubles().size();
        // protopath=`[:]/repeated_enums[:]` name=`/repeated_enums`
        single_.total_size_49 +=
            tmp_12.repeated_enums().size();
        // protopath=`[:]/repeated_floats[:]` name=`/repeated_floats`
        single_.total_size_51 +=
            tmp_12.repeated_floats().size();
        // protopath=`[:]/repeated_int32s[:]` name=`/repeated_int32s`
        single_.total_size_53 +=
            tmp_12.repeated_int32s().size();
      }();
      // protopath=`[:]` fictive
      [&]() {
        if (!requested_inputs.common.node_requested[13]) {
          return;
        }
        const auto& tmp_13 = tmp_18;
        // protopath=`[:]/repeated_int64s[:]` name=`/repeated_int64s`
        single_.total_size_56 +=
            tmp_13.repeated_int64s().size();
        // protopath=`[:]/repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
        single_.total_size_58 +=
            tmp_13.repeated_raw_bytes().size();
        // protopath=`[:]/repeated_str[:]` name=`/repeated_str`
        single_.total_size_60 +=
            tmp_13.repeated_str().size();
        // protopath=`[:]/repeated_uint32s[:]` name=`/repeated_uint32s`
        single_.total_size_62 +=
            tmp_13.repeated_uint32s().size();
      }();
      // protopath=`[:]` fictive
      [&]() {
        if (!requested_inputs.common.node_requested[14]) {
          return;
        }
        const auto& tmp_14 = tmp_18;
        // protopath=`[:]/repeated_uint64s[:]` name=`/repeated_uint64s`
        single_.total_size_65 +=
            tmp_14.repeated_uint64s().size();
      }();
      // protopath=`[:]` fictive
      [&]() {
        if (!requested_inputs.common.node_requested[17]) {
          return;
        }
        const auto& tmp_17 = tmp_18;
        // protopath=`[:]/ys[:]` name=`/ys`
        single_.total_size_91 +=
            tmp_17.ys().size();
      }();
    }
  }
  // Returns total size of the array for
  // protopath=`[:]/BrOkEn_CaSe` name=`/BrOkEn_CaSe`
  size_t TotalSize0() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/BrOkEn_CaSe` name=`/BrOkEn_CaSe`
  void CollectResultFromIntermediate0(
      ResultType_0* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize0();
    using ValueT = ResultType_0::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_45 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_45, broken_case))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_0 = tmp_45.broken_case();
      id++;
      inserter.Add(tmp_0);
    }

    *output = ResultType_0{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/a` name=`/inner/a`
  size_t TotalSize1() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/a` name=`/inner/a`
  void CollectResultFromIntermediate1(
      ResultType_1* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize1();
    using ValueT = ResultType_1::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_15 = tmp_19;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, a))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_1 = tmp_15.a();
      id++;
      inserter.Add(tmp_1);
    }

    *output = ResultType_1{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/as[:]` name=`/inner/as`
  size_t TotalSize2() const {
    return single_.total_size_2;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/as[:]` name=`/inner/as`
  void CollectResultFromIntermediate2(
      ResultType_2* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize2();
    using ValueT = ResultType_2::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_15 = tmp_19;


      for (const auto& tmp_2 : tmp_15.as()) {
        id++;
        inserter.Add(tmp_2);
      }
    }

    *output = ResultType_2{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/count(as[:])` name=`/inner/as/@size`
  size_t TotalSize3() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/count(as[:])` name=`/inner/as/@size`
  void CollectResultFromIntermediate3(
      ResultType_3* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize3();
    using ValueT = ResultType_3::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        inserter.Add(0);
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_15 = tmp_19;

      const auto& tmp_3 = tmp_15.as().size();
      inserter.Add(tmp_3);
    }

    *output = ResultType_3{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/bytes_string_view` name=`/inner/bytes_string_view`
  size_t TotalSize4() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/bytes_string_view` name=`/inner/bytes_string_view`
  void CollectResultFromIntermediate4(
      ResultType_4* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize4();
    using ValueT = ResultType_4::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_15 = tmp_19;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, bytes_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_4 = tmp_15.bytes_string_view();
      id++;
      inserter.Add(tmp_4);
    }

    *output = ResultType_4{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/inner2/z` name=`/inner/inner2/z`
  size_t TotalSize5() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/inner2/z` name=`/inner/inner2/z`
  void CollectResultFromIntermediate5(
      ResultType_5* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize5();
    using ValueT = ResultType_5::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_15 = tmp_19;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, inner2))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_8 = tmp_15.inner2();

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_8, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_5 = tmp_8.z();
      id++;
      inserter.Add(tmp_5);
    }

    *output = ResultType_5{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/inner2/zs[:]` name=`/inner/inner2/zs`
  size_t TotalSize6() const {
    return single_.total_size_6;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/inner2/zs[:]` name=`/inner/inner2/zs`
  void CollectResultFromIntermediate6(
      ResultType_6* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize6();
    using ValueT = ResultType_6::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner/inner2`
    for (const auto* intermediate_ptr : multi_.intermediate0) {
      if (intermediate_ptr == nullptr) {
        continue;
      }
      const auto& tmp_8 = *intermediate_ptr;

      for (const auto& tmp_6 : tmp_8.zs()) {
        id++;
        inserter.Add(tmp_6);
      }
    }

    *output = ResultType_6{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/inner2/count(zs[:])` name=`/inner/inner2/zs/@size`
  size_t TotalSize7() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/inner2/count(zs[:])` name=`/inner/inner2/zs/@size`
  void CollectResultFromIntermediate7(
      ResultType_7* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize7();
    using ValueT = ResultType_7::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        inserter.Add(0);
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_15 = tmp_19;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, inner2))) {
        inserter.Add(0);
        continue;
      }
      const auto& tmp_8 = tmp_15.inner2();

      const auto& tmp_7 = tmp_8.zs().size();
      inserter.Add(tmp_7);
    }

    *output = ResultType_7{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/count(inners2[:])` name=`/inner/inners2/@size`
  size_t TotalSize8() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/count(inners2[:])` name=`/inner/inners2/@size`
  void CollectResultFromIntermediate8(
      ResultType_8* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize8();
    using ValueT = ResultType_8::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        inserter.Add(0);
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_15 = tmp_19;

      const auto& tmp_9 = tmp_15.inners2().size();
      inserter.Add(tmp_9);
    }

    *output = ResultType_8{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/inners2[:]/z` name=`/inner/inners2/z`
  size_t TotalSize9() const {
    return multi_.intermediate1.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/inners2[:]/z` name=`/inner/inners2/z`
  void CollectResultFromIntermediate9(
      ResultType_9* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize9();
    using ValueT = ResultType_9::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate1) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_13 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_13, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_10 = tmp_13.z();
      id++;
      inserter.Add(tmp_10);
    }

    *output = ResultType_9{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
  size_t TotalSize10() const {
    return single_.total_size_11;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
  void CollectResultFromIntermediate10(
      ResultType_10* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize10();
    using ValueT = ResultType_10::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate1) {
      if (intermediate_ptr == nullptr) {
        continue;
      }
      const auto& tmp_13 = *intermediate_ptr;

      for (const auto& tmp_11 : tmp_13.zs()) {
        id++;
        inserter.Add(tmp_11);
      }
    }

    *output = ResultType_10{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/inners2[:]/count(zs[:])` name=`/inner/inners2/zs/@size`
  size_t TotalSize11() const {
    return multi_.intermediate1.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/inners2[:]/count(zs[:])` name=`/inner/inners2/zs/@size`
  void CollectResultFromIntermediate11(
      ResultType_11* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize11();
    using ValueT = ResultType_11::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate1) {
      if (intermediate_ptr == nullptr) {
        inserter.Add(0);
        continue;
      }
      const auto& tmp_13 = *intermediate_ptr;
      const auto& tmp_12 = tmp_13.zs().size();
      inserter.Add(tmp_12);
    }

    *output = ResultType_11{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/raw_bytes` name=`/inner/raw_bytes`
  size_t TotalSize12() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/raw_bytes` name=`/inner/raw_bytes`
  void CollectResultFromIntermediate12(
      ResultType_12* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize12();
    using ValueT = ResultType_12::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_15 = tmp_19;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, raw_bytes))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_14 = tmp_15.raw_bytes();
      id++;
      inserter.Add(tmp_14);
    }

    *output = ResultType_12{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/str` name=`/inner/str`
  size_t TotalSize13() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/str` name=`/inner/str`
  void CollectResultFromIntermediate13(
      ResultType_13* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize13();
    using ValueT = ResultType_13::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_18 = tmp_19;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_18, str))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_16 = tmp_18.str();
      id++;
      inserter.Add(tmp_16);
    }

    *output = ResultType_13{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inner/str_string_view` name=`/inner/str_string_view`
  size_t TotalSize14() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inner/str_string_view` name=`/inner/str_string_view`
  void CollectResultFromIntermediate14(
      ResultType_14* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize14();
    using ValueT = ResultType_14::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inner`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_19 = *intermediate_ptr;
      const auto& tmp_18 = tmp_19;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_18, str_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_17 = tmp_18.str_string_view();
      id++;
      inserter.Add(tmp_17);
    }

    *output = ResultType_14{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(inners[:])` name=`/inners/@size`
  size_t TotalSize15() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(inners[:])` name=`/inners/@size`
  void CollectResultFromIntermediate15(
      ResultType_15* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize15();
    using ValueT = ResultType_15::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_45 = tmp_94;

      const auto& tmp_20 = tmp_45.inners().size();
      inserter.Add(tmp_20);
    }

    *output = ResultType_15{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/a` name=`/inners/a`
  size_t TotalSize16() const {
    return multi_.intermediate9.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/a` name=`/inners/a`
  void CollectResultFromIntermediate16(
      ResultType_16* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize16();
    using ValueT = ResultType_16::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_35 = tmp_39;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_35, a))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_21 = tmp_35.a();
      id++;
      inserter.Add(tmp_21);
    }

    *output = ResultType_16{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/as[:]` name=`/inners/as`
  size_t TotalSize17() const {
    return single_.total_size_22;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/as[:]` name=`/inners/as`
  void CollectResultFromIntermediate17(
      ResultType_17* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize17();
    using ValueT = ResultType_17::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_35 = tmp_39;


      for (const auto& tmp_22 : tmp_35.as()) {
        inserter.Add(tmp_22);
      }
    }

    *output = ResultType_17{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/count(as[:])` name=`/inners/as/@size`
  size_t TotalSize18() const {
    return multi_.intermediate9.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/count(as[:])` name=`/inners/as/@size`
  void CollectResultFromIntermediate18(
      ResultType_18* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize18();
    using ValueT = ResultType_18::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_35 = tmp_39;

      const auto& tmp_23 = tmp_35.as().size();
      inserter.Add(tmp_23);
    }

    *output = ResultType_18{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/bytes_string_view` name=`/inners/bytes_string_view`
  size_t TotalSize19() const {
    return multi_.intermediate9.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/bytes_string_view` name=`/inners/bytes_string_view`
  void CollectResultFromIntermediate19(
      ResultType_19* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize19();
    using ValueT = ResultType_19::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_35 = tmp_39;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_35, bytes_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_24 = tmp_35.bytes_string_view();
      id++;
      inserter.Add(tmp_24);
    }

    *output = ResultType_19{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/inner2/z` name=`/inners/inner2/z`
  size_t TotalSize20() const {
    return multi_.intermediate9.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/inner2/z` name=`/inners/inner2/z`
  void CollectResultFromIntermediate20(
      ResultType_20* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize20();
    using ValueT = ResultType_20::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_35 = tmp_39;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_35, inner2))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_28 = tmp_35.inner2();

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_28, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_25 = tmp_28.z();
      id++;
      inserter.Add(tmp_25);
    }

    *output = ResultType_20{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
  size_t TotalSize21() const {
    return single_.total_size_26;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
  void CollectResultFromIntermediate21(
      ResultType_21* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize21();
    using ValueT = ResultType_21::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]/inner2`
    for (const auto* intermediate_ptr : multi_.intermediate5) {
      if (intermediate_ptr == nullptr) {
        continue;
      }
      const auto& tmp_28 = *intermediate_ptr;

      for (const auto& tmp_26 : tmp_28.zs()) {
        id++;
        inserter.Add(tmp_26);
      }
    }

    *output = ResultType_21{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/inner2/count(zs[:])` name=`/inners/inner2/zs/@size`
  size_t TotalSize22() const {
    return multi_.intermediate9.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/inner2/count(zs[:])` name=`/inners/inner2/zs/@size`
  void CollectResultFromIntermediate22(
      ResultType_22* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize22();
    using ValueT = ResultType_22::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_35 = tmp_39;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_35, inner2))) {
        inserter.Add(0);
        continue;
      }
      const auto& tmp_28 = tmp_35.inner2();

      const auto& tmp_27 = tmp_28.zs().size();
      inserter.Add(tmp_27);
    }

    *output = ResultType_22{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/count(inners2[:])` name=`/inners/inners2/@size`
  size_t TotalSize23() const {
    return multi_.intermediate9.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/count(inners2[:])` name=`/inners/inners2/@size`
  void CollectResultFromIntermediate23(
      ResultType_23* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize23();
    using ValueT = ResultType_23::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_35 = tmp_39;

      const auto& tmp_29 = tmp_35.inners2().size();
      inserter.Add(tmp_29);
    }

    *output = ResultType_23{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/inners2[:]/z` name=`/inners/inners2/z`
  size_t TotalSize24() const {
    return multi_.intermediate6.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/inners2[:]/z` name=`/inners/inners2/z`
  void CollectResultFromIntermediate24(
      ResultType_24* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize24();
    using ValueT = ResultType_24::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate6) {
      const auto& tmp_33 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_33, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_30 = tmp_33.z();
      id++;
      inserter.Add(tmp_30);
    }

    *output = ResultType_24{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
  size_t TotalSize25() const {
    return single_.total_size_31;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
  void CollectResultFromIntermediate25(
      ResultType_25* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize25();
    using ValueT = ResultType_25::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate6) {
      const auto& tmp_33 = *intermediate_ptr;

      for (const auto& tmp_31 : tmp_33.zs()) {
        inserter.Add(tmp_31);
      }
    }

    *output = ResultType_25{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/inners2[:]/count(zs[:])` name=`/inners/inners2/zs/@size`
  size_t TotalSize26() const {
    return multi_.intermediate6.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/inners2[:]/count(zs[:])` name=`/inners/inners2/zs/@size`
  void CollectResultFromIntermediate26(
      ResultType_26* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize26();
    using ValueT = ResultType_26::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate6) {
      const auto& tmp_33 = *intermediate_ptr;
      const auto& tmp_32 = tmp_33.zs().size();
      inserter.Add(tmp_32);
    }

    *output = ResultType_26{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/raw_bytes` name=`/inners/raw_bytes`
  size_t TotalSize27() const {
    return multi_.intermediate9.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/raw_bytes` name=`/inners/raw_bytes`
  void CollectResultFromIntermediate27(
      ResultType_27* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize27();
    using ValueT = ResultType_27::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_35 = tmp_39;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_35, raw_bytes))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_34 = tmp_35.raw_bytes();
      id++;
      inserter.Add(tmp_34);
    }

    *output = ResultType_27{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/str` name=`/inners/str`
  size_t TotalSize28() const {
    return multi_.intermediate9.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/str` name=`/inners/str`
  void CollectResultFromIntermediate28(
      ResultType_28* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize28();
    using ValueT = ResultType_28::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_38 = tmp_39;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_38, str))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_36 = tmp_38.str();
      id++;
      inserter.Add(tmp_36);
    }

    *output = ResultType_28{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/inners[:]/str_string_view` name=`/inners/str_string_view`
  size_t TotalSize29() const {
    return multi_.intermediate9.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/inners[:]/str_string_view` name=`/inners/str_string_view`
  void CollectResultFromIntermediate29(
      ResultType_29* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize29();
    using ValueT = ResultType_29::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]/inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate9) {
      const auto& tmp_39 = *intermediate_ptr;
      const auto& tmp_38 = tmp_39;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_38, str_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_37 = tmp_38.str_string_view();
      id++;
      inserter.Add(tmp_37);
    }

    *output = ResultType_29{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/private` name=`/private`
  size_t TotalSize30() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/private` name=`/private`
  void CollectResultFromIntermediate30(
      ResultType_30* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize30();
    using ValueT = ResultType_30::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_45 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_45, private_))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_40 = tmp_45.private_();
      id++;
      inserter.Add(tmp_40);
    }

    *output = ResultType_30{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/proto3/non_optional_i32` name=`/proto3/non_optional_i32`
  size_t TotalSize31() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/proto3/non_optional_i32` name=`/proto3/non_optional_i32`
  void CollectResultFromIntermediate31(
      ResultType_31* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize31();
    using ValueT = ResultType_31::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_45 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_45, proto3))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_42 = tmp_45.proto3();

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_42, non_optional_i32))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_41 = tmp_42.non_optional_i32();
      id++;
      inserter.Add(tmp_41);
    }

    *output = ResultType_31{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/raw_bytes` name=`/raw_bytes`
  size_t TotalSize32() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/raw_bytes` name=`/raw_bytes`
  void CollectResultFromIntermediate32(
      ResultType_32* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize32();
    using ValueT = ResultType_32::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_45 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_45, raw_bytes))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_43 = tmp_45.raw_bytes();
      id++;
      inserter.Add(tmp_43);
    }

    *output = ResultType_32{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_bools[:]` name=`/repeated_bools`
  size_t TotalSize33() const {
    return single_.total_size_44;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_bools[:]` name=`/repeated_bools`
  void CollectResultFromIntermediate33(
      ResultType_33* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize33();
    using ValueT = ResultType_33::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_45 = tmp_94;


      for (const auto& tmp_44 : tmp_45.repeated_bools()) {
        inserter.Add(tmp_44);
      }
    }

    *output = ResultType_33{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_bools[:])` name=`/repeated_bools/@size`
  size_t TotalSize34() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_bools[:])` name=`/repeated_bools/@size`
  void CollectResultFromIntermediate34(
      ResultType_34* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize34();
    using ValueT = ResultType_34::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_54 = tmp_94;

      const auto& tmp_46 = tmp_54.repeated_bools().size();
      inserter.Add(tmp_46);
    }

    *output = ResultType_34{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_doubles[:]` name=`/repeated_doubles`
  size_t TotalSize35() const {
    return single_.total_size_47;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_doubles[:]` name=`/repeated_doubles`
  void CollectResultFromIntermediate35(
      ResultType_35* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize35();
    using ValueT = ResultType_35::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_54 = tmp_94;


      for (const auto& tmp_47 : tmp_54.repeated_doubles()) {
        inserter.Add(tmp_47);
      }
    }

    *output = ResultType_35{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_doubles[:])` name=`/repeated_doubles/@size`
  size_t TotalSize36() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_doubles[:])` name=`/repeated_doubles/@size`
  void CollectResultFromIntermediate36(
      ResultType_36* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize36();
    using ValueT = ResultType_36::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_54 = tmp_94;

      const auto& tmp_48 = tmp_54.repeated_doubles().size();
      inserter.Add(tmp_48);
    }

    *output = ResultType_36{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_enums[:]` name=`/repeated_enums`
  size_t TotalSize37() const {
    return single_.total_size_49;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_enums[:]` name=`/repeated_enums`
  void CollectResultFromIntermediate37(
      ResultType_37* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize37();
    using ValueT = ResultType_37::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_54 = tmp_94;


      for (const auto& tmp_49 : tmp_54.repeated_enums()) {
        inserter.Add(tmp_49);
      }
    }

    *output = ResultType_37{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_enums[:])` name=`/repeated_enums/@size`
  size_t TotalSize38() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_enums[:])` name=`/repeated_enums/@size`
  void CollectResultFromIntermediate38(
      ResultType_38* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize38();
    using ValueT = ResultType_38::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_54 = tmp_94;

      const auto& tmp_50 = tmp_54.repeated_enums().size();
      inserter.Add(tmp_50);
    }

    *output = ResultType_38{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_floats[:]` name=`/repeated_floats`
  size_t TotalSize39() const {
    return single_.total_size_51;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_floats[:]` name=`/repeated_floats`
  void CollectResultFromIntermediate39(
      ResultType_39* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize39();
    using ValueT = ResultType_39::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_54 = tmp_94;


      for (const auto& tmp_51 : tmp_54.repeated_floats()) {
        inserter.Add(tmp_51);
      }
    }

    *output = ResultType_39{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_floats[:])` name=`/repeated_floats/@size`
  size_t TotalSize40() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_floats[:])` name=`/repeated_floats/@size`
  void CollectResultFromIntermediate40(
      ResultType_40* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize40();
    using ValueT = ResultType_40::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_54 = tmp_94;

      const auto& tmp_52 = tmp_54.repeated_floats().size();
      inserter.Add(tmp_52);
    }

    *output = ResultType_40{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_int32s[:]` name=`/repeated_int32s`
  size_t TotalSize41() const {
    return single_.total_size_53;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_int32s[:]` name=`/repeated_int32s`
  void CollectResultFromIntermediate41(
      ResultType_41* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize41();
    using ValueT = ResultType_41::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_54 = tmp_94;


      for (const auto& tmp_53 : tmp_54.repeated_int32s()) {
        inserter.Add(tmp_53);
      }
    }

    *output = ResultType_41{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_int32s[:])` name=`/repeated_int32s/@size`
  size_t TotalSize42() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_int32s[:])` name=`/repeated_int32s/@size`
  void CollectResultFromIntermediate42(
      ResultType_42* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize42();
    using ValueT = ResultType_42::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_63 = tmp_94;

      const auto& tmp_55 = tmp_63.repeated_int32s().size();
      inserter.Add(tmp_55);
    }

    *output = ResultType_42{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_int64s[:]` name=`/repeated_int64s`
  size_t TotalSize43() const {
    return single_.total_size_56;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_int64s[:]` name=`/repeated_int64s`
  void CollectResultFromIntermediate43(
      ResultType_43* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize43();
    using ValueT = ResultType_43::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_63 = tmp_94;


      for (const auto& tmp_56 : tmp_63.repeated_int64s()) {
        inserter.Add(tmp_56);
      }
    }

    *output = ResultType_43{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_int64s[:])` name=`/repeated_int64s/@size`
  size_t TotalSize44() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_int64s[:])` name=`/repeated_int64s/@size`
  void CollectResultFromIntermediate44(
      ResultType_44* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize44();
    using ValueT = ResultType_44::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_63 = tmp_94;

      const auto& tmp_57 = tmp_63.repeated_int64s().size();
      inserter.Add(tmp_57);
    }

    *output = ResultType_44{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
  size_t TotalSize45() const {
    return single_.total_size_58;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
  void CollectResultFromIntermediate45(
      ResultType_45* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize45();
    using ValueT = ResultType_45::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_63 = tmp_94;


      for (const auto& tmp_58 : tmp_63.repeated_raw_bytes()) {
        inserter.Add(tmp_58);
      }
    }

    *output = ResultType_45{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_raw_bytes[:])` name=`/repeated_raw_bytes/@size`
  size_t TotalSize46() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_raw_bytes[:])` name=`/repeated_raw_bytes/@size`
  void CollectResultFromIntermediate46(
      ResultType_46* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize46();
    using ValueT = ResultType_46::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_63 = tmp_94;

      const auto& tmp_59 = tmp_63.repeated_raw_bytes().size();
      inserter.Add(tmp_59);
    }

    *output = ResultType_46{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_str[:]` name=`/repeated_str`
  size_t TotalSize47() const {
    return single_.total_size_60;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_str[:]` name=`/repeated_str`
  void CollectResultFromIntermediate47(
      ResultType_47* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize47();
    using ValueT = ResultType_47::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_63 = tmp_94;


      for (const auto& tmp_60 : tmp_63.repeated_str()) {
        inserter.Add(tmp_60);
      }
    }

    *output = ResultType_47{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_str[:])` name=`/repeated_str/@size`
  size_t TotalSize48() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_str[:])` name=`/repeated_str/@size`
  void CollectResultFromIntermediate48(
      ResultType_48* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize48();
    using ValueT = ResultType_48::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_63 = tmp_94;

      const auto& tmp_61 = tmp_63.repeated_str().size();
      inserter.Add(tmp_61);
    }

    *output = ResultType_48{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_uint32s[:]` name=`/repeated_uint32s`
  size_t TotalSize49() const {
    return single_.total_size_62;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_uint32s[:]` name=`/repeated_uint32s`
  void CollectResultFromIntermediate49(
      ResultType_49* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize49();
    using ValueT = ResultType_49::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_63 = tmp_94;


      for (const auto& tmp_62 : tmp_63.repeated_uint32s()) {
        inserter.Add(tmp_62);
      }
    }

    *output = ResultType_49{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_uint32s[:])` name=`/repeated_uint32s/@size`
  size_t TotalSize50() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_uint32s[:])` name=`/repeated_uint32s/@size`
  void CollectResultFromIntermediate50(
      ResultType_50* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize50();
    using ValueT = ResultType_50::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_72 = tmp_94;

      const auto& tmp_64 = tmp_72.repeated_uint32s().size();
      inserter.Add(tmp_64);
    }

    *output = ResultType_50{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/repeated_uint64s[:]` name=`/repeated_uint64s`
  size_t TotalSize51() const {
    return single_.total_size_65;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/repeated_uint64s[:]` name=`/repeated_uint64s`
  void CollectResultFromIntermediate51(
      ResultType_51* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize51();
    using ValueT = ResultType_51::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_72 = tmp_94;


      for (const auto& tmp_65 : tmp_72.repeated_uint64s()) {
        inserter.Add(tmp_65);
      }
    }

    *output = ResultType_51{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(repeated_uint64s[:])` name=`/repeated_uint64s/@size`
  size_t TotalSize52() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(repeated_uint64s[:])` name=`/repeated_uint64s/@size`
  void CollectResultFromIntermediate52(
      ResultType_52* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize52();
    using ValueT = ResultType_52::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_72 = tmp_94;

      const auto& tmp_66 = tmp_72.repeated_uint64s().size();
      inserter.Add(tmp_66);
    }

    *output = ResultType_52{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/str` name=`/str`
  size_t TotalSize53() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/str` name=`/str`
  void CollectResultFromIntermediate53(
      ResultType_53* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize53();
    using ValueT = ResultType_53::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_72 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_72, str))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_67 = tmp_72.str();
      id++;
      inserter.Add(tmp_67);
    }

    *output = ResultType_53{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x` name=`/x`
  size_t TotalSize54() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x` name=`/x`
  void CollectResultFromIntermediate54(
      ResultType_54* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize54();
    using ValueT = ResultType_54::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_72 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_72, x))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_68 = tmp_72.x();
      id++;
      inserter.Add(tmp_68);
    }

    *output = ResultType_54{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x0` name=`/x0`
  size_t TotalSize55() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x0` name=`/x0`
  void CollectResultFromIntermediate55(
      ResultType_55* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize55();
    using ValueT = ResultType_55::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_72 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_72, x0))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_69 = tmp_72.x0();
      id++;
      inserter.Add(tmp_69);
    }

    *output = ResultType_55{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x1` name=`/x1`
  size_t TotalSize56() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x1` name=`/x1`
  void CollectResultFromIntermediate56(
      ResultType_56* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize56();
    using ValueT = ResultType_56::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_72 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_72, x1))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_70 = tmp_72.x1();
      id++;
      inserter.Add(tmp_70);
    }

    *output = ResultType_56{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x2` name=`/x2`
  size_t TotalSize57() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x2` name=`/x2`
  void CollectResultFromIntermediate57(
      ResultType_57* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize57();
    using ValueT = ResultType_57::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_72 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_72, x2))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_71 = tmp_72.x2();
      id++;
      inserter.Add(tmp_71);
    }

    *output = ResultType_57{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x3` name=`/x3`
  size_t TotalSize58() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x3` name=`/x3`
  void CollectResultFromIntermediate58(
      ResultType_58* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize58();
    using ValueT = ResultType_58::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_81 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_81, x3))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_73 = tmp_81.x3();
      id++;
      inserter.Add(tmp_73);
    }

    *output = ResultType_58{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x4` name=`/x4`
  size_t TotalSize59() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x4` name=`/x4`
  void CollectResultFromIntermediate59(
      ResultType_59* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize59();
    using ValueT = ResultType_59::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_81 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_81, x4))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_74 = tmp_81.x4();
      id++;
      inserter.Add(tmp_74);
    }

    *output = ResultType_59{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x5` name=`/x5`
  size_t TotalSize60() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x5` name=`/x5`
  void CollectResultFromIntermediate60(
      ResultType_60* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize60();
    using ValueT = ResultType_60::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_81 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_81, x5))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_75 = tmp_81.x5();
      id++;
      inserter.Add(tmp_75);
    }

    *output = ResultType_60{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x6` name=`/x6`
  size_t TotalSize61() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x6` name=`/x6`
  void CollectResultFromIntermediate61(
      ResultType_61* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize61();
    using ValueT = ResultType_61::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_81 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_81, x6))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_76 = tmp_81.x6();
      id++;
      inserter.Add(tmp_76);
    }

    *output = ResultType_61{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x7` name=`/x7`
  size_t TotalSize62() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x7` name=`/x7`
  void CollectResultFromIntermediate62(
      ResultType_62* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize62();
    using ValueT = ResultType_62::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_81 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_81, x7))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_77 = tmp_81.x7();
      id++;
      inserter.Add(tmp_77);
    }

    *output = ResultType_62{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x8` name=`/x8`
  size_t TotalSize63() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x8` name=`/x8`
  void CollectResultFromIntermediate63(
      ResultType_63* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize63();
    using ValueT = ResultType_63::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_81 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_81, x8))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_78 = tmp_81.x8();
      id++;
      inserter.Add(tmp_78);
    }

    *output = ResultType_63{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x9` name=`/x9`
  size_t TotalSize64() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x9` name=`/x9`
  void CollectResultFromIntermediate64(
      ResultType_64* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize64();
    using ValueT = ResultType_64::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_81 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_81, x9))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_79 = tmp_81.x9();
      id++;
      inserter.Add(tmp_79);
    }

    *output = ResultType_64{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x_bytes_string_view` name=`/x_bytes_string_view`
  size_t TotalSize65() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x_bytes_string_view` name=`/x_bytes_string_view`
  void CollectResultFromIntermediate65(
      ResultType_65* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize65();
    using ValueT = ResultType_65::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_81 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_81, x_bytes_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_80 = tmp_81.x_bytes_string_view();
      id++;
      inserter.Add(tmp_80);
    }

    *output = ResultType_65{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x_double` name=`/x_double`
  size_t TotalSize66() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x_double` name=`/x_double`
  void CollectResultFromIntermediate66(
      ResultType_66* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize66();
    using ValueT = ResultType_66::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_90 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_90, x_double))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_82 = tmp_90.x_double();
      id++;
      inserter.Add(tmp_82);
    }

    *output = ResultType_66{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x_enum` name=`/x_enum`
  size_t TotalSize67() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x_enum` name=`/x_enum`
  void CollectResultFromIntermediate67(
      ResultType_67* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize67();
    using ValueT = ResultType_67::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_90 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_90, x_enum))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_83 = tmp_90.x_enum();
      id++;
      inserter.Add(tmp_83);
    }

    *output = ResultType_67{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x_fixed64` name=`/x_fixed64`
  size_t TotalSize68() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x_fixed64` name=`/x_fixed64`
  void CollectResultFromIntermediate68(
      ResultType_68* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize68();
    using ValueT = ResultType_68::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_90 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_90, x_fixed64))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_84 = tmp_90.x_fixed64();
      id++;
      inserter.Add(tmp_84);
    }

    *output = ResultType_68{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x_float` name=`/x_float`
  size_t TotalSize69() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x_float` name=`/x_float`
  void CollectResultFromIntermediate69(
      ResultType_69* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize69();
    using ValueT = ResultType_69::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_90 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_90, x_float))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_85 = tmp_90.x_float();
      id++;
      inserter.Add(tmp_85);
    }

    *output = ResultType_69{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x_int64` name=`/x_int64`
  size_t TotalSize70() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x_int64` name=`/x_int64`
  void CollectResultFromIntermediate70(
      ResultType_70* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize70();
    using ValueT = ResultType_70::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_90 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_90, x_int64))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_86 = tmp_90.x_int64();
      id++;
      inserter.Add(tmp_86);
    }

    *output = ResultType_70{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x_string_string_view` name=`/x_string_string_view`
  size_t TotalSize71() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x_string_string_view` name=`/x_string_string_view`
  void CollectResultFromIntermediate71(
      ResultType_71* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize71();
    using ValueT = ResultType_71::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_90 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_90, x_string_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_87 = tmp_90.x_string_string_view();
      id++;
      inserter.Add(tmp_87);
    }

    *output = ResultType_71{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x_uint32` name=`/x_uint32`
  size_t TotalSize72() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x_uint32` name=`/x_uint32`
  void CollectResultFromIntermediate72(
      ResultType_72* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize72();
    using ValueT = ResultType_72::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_90 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_90, x_uint32))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_88 = tmp_90.x_uint32();
      id++;
      inserter.Add(tmp_88);
    }

    *output = ResultType_72{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/x_uint64` name=`/x_uint64`
  size_t TotalSize73() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/x_uint64` name=`/x_uint64`
  void CollectResultFromIntermediate73(
      ResultType_73* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize73();
    using ValueT = ResultType_73::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_90 = tmp_94;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_90, x_uint64))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_89 = tmp_90.x_uint64();
      id++;
      inserter.Add(tmp_89);
    }

    *output = ResultType_73{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/ys[:]` name=`/ys`
  size_t TotalSize74() const {
    return single_.total_size_91;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/ys[:]` name=`/ys`
  void CollectResultFromIntermediate74(
      ResultType_74* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize74();
    using ValueT = ResultType_74::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_93 = tmp_94;


      for (const auto& tmp_91 : tmp_93.ys()) {
        inserter.Add(tmp_91);
      }
    }

    *output = ResultType_74{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`[:]/count(ys[:])` name=`/ys/@size`
  size_t TotalSize75() const {
    return multi_.intermediate18.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`[:]/count(ys[:])` name=`/ys/@size`
  void CollectResultFromIntermediate75(
      ResultType_75* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize75();
    using ValueT = ResultType_75::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`[:]`
    for (const auto* intermediate_ptr : multi_.intermediate18) {
      const auto& tmp_94 = *intermediate_ptr;
      const auto& tmp_93 = tmp_94;

      const auto& tmp_92 = tmp_93.ys().size();
      inserter.Add(tmp_92);
    }

    *output = ResultType_75{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }



 void CollectResults(
     const Input& input, const OutputProvider& outputs,
     RawBufferFactory* buffer_factory) {
   single_.intermediate19 = &input;
   CollectIntermediateResults(input, *outputs.requested_inputs);

    // protopath=`[:]`
    // protopath=`[:]` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[11]) {
        return;
      }
      // protopath=`[:]/BrOkEn_CaSe` name=`/BrOkEn_CaSe`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[0];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate0(
            outputs.GetMutable0(offset), buffer_factory);
      }
      // protopath=`[:]/inner`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[4]) {
          return;
        }
        // protopath=`[:]/inner` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[2]) {
            return;
          }
          // protopath=`[:]/inner/a` name=`/inner/a`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[1];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate1(
                outputs.GetMutable1(offset), buffer_factory);
          }
          // protopath=`[:]/inner/as[:]` name=`/inner/as`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[2];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate2(
                outputs.GetMutable2(offset), buffer_factory);
          }
          // protopath=`[:]/inner/count(as[:])` name=`/inner/as/@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[3];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate3(
                outputs.GetMutable3(offset), buffer_factory);
          }
          // protopath=`[:]/inner/bytes_string_view` name=`/inner/bytes_string_view`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[4];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate4(
                outputs.GetMutable4(offset), buffer_factory);
          }
          // protopath=`[:]/inner/inner2`
          [&]() {
            if (!outputs.requested_inputs->common.node_requested[0]) {
              return;
            }
            // protopath=`[:]/inner/inner2/z` name=`/inner/inner2/z`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[5];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate5(
                  outputs.GetMutable5(offset), buffer_factory);
            }
            // protopath=`[:]/inner/inner2/zs[:]` name=`/inner/inner2/zs`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[6];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate6(
                  outputs.GetMutable6(offset), buffer_factory);
            }
            // protopath=`[:]/inner/inner2/count(zs[:])` name=`/inner/inner2/zs/@size`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[7];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate7(
                  outputs.GetMutable7(offset), buffer_factory);
            }
          }();
          // protopath=`[:]/inner/count(inners2[:])` name=`/inner/inners2/@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[8];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate8(
                outputs.GetMutable8(offset), buffer_factory);
          }
          // protopath=`[:]/inner/inners2[:]`
          [&]() {
            if (!outputs.requested_inputs->common.node_requested[1]) {
              return;
            }
            // protopath=`[:]/inner/inners2[:]/z` name=`/inner/inners2/z`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[9];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate9(
                  outputs.GetMutable9(offset), buffer_factory);
            }
            // protopath=`[:]/inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[10];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate10(
                  outputs.GetMutable10(offset), buffer_factory);
            }
            // protopath=`[:]/inner/inners2[:]/count(zs[:])` name=`/inner/inners2/zs/@size`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[11];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate11(
                  outputs.GetMutable11(offset), buffer_factory);
            }
          }();
          // protopath=`[:]/inner/raw_bytes` name=`/inner/raw_bytes`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[12];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate12(
                outputs.GetMutable12(offset), buffer_factory);
          }
        }();
        // protopath=`[:]/inner` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[3]) {
            return;
          }
          // protopath=`[:]/inner/str` name=`/inner/str`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[13];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate13(
                outputs.GetMutable13(offset), buffer_factory);
          }
          // protopath=`[:]/inner/str_string_view` name=`/inner/str_string_view`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[14];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate14(
                outputs.GetMutable14(offset), buffer_factory);
          }
        }();
      }();
      // protopath=`[:]/count(inners[:])` name=`/inners/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[15];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate15(
            outputs.GetMutable15(offset), buffer_factory);
      }
      // protopath=`[:]/inners[:]`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[9]) {
          return;
        }
        // protopath=`[:]/inners[:]` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[7]) {
            return;
          }
          // protopath=`[:]/inners[:]/a` name=`/inners/a`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[16];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate16(
                outputs.GetMutable16(offset), buffer_factory);
          }
          // protopath=`[:]/inners[:]/as[:]` name=`/inners/as`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[17];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate17(
                outputs.GetMutable17(offset), buffer_factory);
          }
          // protopath=`[:]/inners[:]/count(as[:])` name=`/inners/as/@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[18];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate18(
                outputs.GetMutable18(offset), buffer_factory);
          }
          // protopath=`[:]/inners[:]/bytes_string_view` name=`/inners/bytes_string_view`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[19];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate19(
                outputs.GetMutable19(offset), buffer_factory);
          }
          // protopath=`[:]/inners[:]/inner2`
          [&]() {
            if (!outputs.requested_inputs->common.node_requested[5]) {
              return;
            }
            // protopath=`[:]/inners[:]/inner2/z` name=`/inners/inner2/z`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[20];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate20(
                  outputs.GetMutable20(offset), buffer_factory);
            }
            // protopath=`[:]/inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[21];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate21(
                  outputs.GetMutable21(offset), buffer_factory);
            }
            // protopath=`[:]/inners[:]/inner2/count(zs[:])` name=`/inners/inner2/zs/@size`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[22];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate22(
                  outputs.GetMutable22(offset), buffer_factory);
            }
          }();
          // protopath=`[:]/inners[:]/count(inners2[:])` name=`/inners/inners2/@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[23];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate23(
                outputs.GetMutable23(offset), buffer_factory);
          }
          // protopath=`[:]/inners[:]/inners2[:]`
          [&]() {
            if (!outputs.requested_inputs->common.node_requested[6]) {
              return;
            }
            // protopath=`[:]/inners[:]/inners2[:]/z` name=`/inners/inners2/z`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[24];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate24(
                  outputs.GetMutable24(offset), buffer_factory);
            }
            // protopath=`[:]/inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[25];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate25(
                  outputs.GetMutable25(offset), buffer_factory);
            }
            // protopath=`[:]/inners[:]/inners2[:]/count(zs[:])` name=`/inners/inners2/zs/@size`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[26];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate26(
                  outputs.GetMutable26(offset), buffer_factory);
            }
          }();
          // protopath=`[:]/inners[:]/raw_bytes` name=`/inners/raw_bytes`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[27];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate27(
                outputs.GetMutable27(offset), buffer_factory);
          }
        }();
        // protopath=`[:]/inners[:]` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[8]) {
            return;
          }
          // protopath=`[:]/inners[:]/str` name=`/inners/str`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[28];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate28(
                outputs.GetMutable28(offset), buffer_factory);
          }
          // protopath=`[:]/inners[:]/str_string_view` name=`/inners/str_string_view`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[29];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate29(
                outputs.GetMutable29(offset), buffer_factory);
          }
        }();
      }();
      // protopath=`[:]/private` name=`/private`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[30];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate30(
            outputs.GetMutable30(offset), buffer_factory);
      }
      // protopath=`[:]/proto3`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[10]) {
          return;
        }
        // protopath=`[:]/proto3/non_optional_i32` name=`/proto3/non_optional_i32`
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[31];
            offset != kSkippedOffset) {
          CollectResultFromIntermediate31(
              outputs.GetMutable31(offset), buffer_factory);
        }
      }();
      // protopath=`[:]/raw_bytes` name=`/raw_bytes`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[32];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate32(
            outputs.GetMutable32(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_bools[:]` name=`/repeated_bools`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[33];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate33(
            outputs.GetMutable33(offset), buffer_factory);
      }
    }();
    // protopath=`[:]` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[12]) {
        return;
      }
      // protopath=`[:]/count(repeated_bools[:])` name=`/repeated_bools/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[34];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate34(
            outputs.GetMutable34(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_doubles[:]` name=`/repeated_doubles`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[35];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate35(
            outputs.GetMutable35(offset), buffer_factory);
      }
      // protopath=`[:]/count(repeated_doubles[:])` name=`/repeated_doubles/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[36];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate36(
            outputs.GetMutable36(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_enums[:]` name=`/repeated_enums`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[37];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate37(
            outputs.GetMutable37(offset), buffer_factory);
      }
      // protopath=`[:]/count(repeated_enums[:])` name=`/repeated_enums/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[38];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate38(
            outputs.GetMutable38(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_floats[:]` name=`/repeated_floats`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[39];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate39(
            outputs.GetMutable39(offset), buffer_factory);
      }
      // protopath=`[:]/count(repeated_floats[:])` name=`/repeated_floats/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[40];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate40(
            outputs.GetMutable40(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_int32s[:]` name=`/repeated_int32s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[41];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate41(
            outputs.GetMutable41(offset), buffer_factory);
      }
    }();
    // protopath=`[:]` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[13]) {
        return;
      }
      // protopath=`[:]/count(repeated_int32s[:])` name=`/repeated_int32s/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[42];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate42(
            outputs.GetMutable42(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_int64s[:]` name=`/repeated_int64s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[43];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate43(
            outputs.GetMutable43(offset), buffer_factory);
      }
      // protopath=`[:]/count(repeated_int64s[:])` name=`/repeated_int64s/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[44];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate44(
            outputs.GetMutable44(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[45];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate45(
            outputs.GetMutable45(offset), buffer_factory);
      }
      // protopath=`[:]/count(repeated_raw_bytes[:])` name=`/repeated_raw_bytes/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[46];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate46(
            outputs.GetMutable46(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_str[:]` name=`/repeated_str`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[47];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate47(
            outputs.GetMutable47(offset), buffer_factory);
      }
      // protopath=`[:]/count(repeated_str[:])` name=`/repeated_str/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[48];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate48(
            outputs.GetMutable48(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_uint32s[:]` name=`/repeated_uint32s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[49];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate49(
            outputs.GetMutable49(offset), buffer_factory);
      }
    }();
    // protopath=`[:]` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[14]) {
        return;
      }
      // protopath=`[:]/count(repeated_uint32s[:])` name=`/repeated_uint32s/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[50];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate50(
            outputs.GetMutable50(offset), buffer_factory);
      }
      // protopath=`[:]/repeated_uint64s[:]` name=`/repeated_uint64s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[51];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate51(
            outputs.GetMutable51(offset), buffer_factory);
      }
      // protopath=`[:]/count(repeated_uint64s[:])` name=`/repeated_uint64s/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[52];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate52(
            outputs.GetMutable52(offset), buffer_factory);
      }
      // protopath=`[:]/str` name=`/str`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[53];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate53(
            outputs.GetMutable53(offset), buffer_factory);
      }
      // protopath=`[:]/x` name=`/x`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[54];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate54(
            outputs.GetMutable54(offset), buffer_factory);
      }
      // protopath=`[:]/x0` name=`/x0`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[55];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate55(
            outputs.GetMutable55(offset), buffer_factory);
      }
      // protopath=`[:]/x1` name=`/x1`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[56];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate56(
            outputs.GetMutable56(offset), buffer_factory);
      }
      // protopath=`[:]/x2` name=`/x2`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[57];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate57(
            outputs.GetMutable57(offset), buffer_factory);
      }
    }();
    // protopath=`[:]` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[15]) {
        return;
      }
      // protopath=`[:]/x3` name=`/x3`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[58];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate58(
            outputs.GetMutable58(offset), buffer_factory);
      }
      // protopath=`[:]/x4` name=`/x4`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[59];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate59(
            outputs.GetMutable59(offset), buffer_factory);
      }
      // protopath=`[:]/x5` name=`/x5`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[60];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate60(
            outputs.GetMutable60(offset), buffer_factory);
      }
      // protopath=`[:]/x6` name=`/x6`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[61];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate61(
            outputs.GetMutable61(offset), buffer_factory);
      }
      // protopath=`[:]/x7` name=`/x7`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[62];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate62(
            outputs.GetMutable62(offset), buffer_factory);
      }
      // protopath=`[:]/x8` name=`/x8`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[63];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate63(
            outputs.GetMutable63(offset), buffer_factory);
      }
      // protopath=`[:]/x9` name=`/x9`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[64];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate64(
            outputs.GetMutable64(offset), buffer_factory);
      }
      // protopath=`[:]/x_bytes_string_view` name=`/x_bytes_string_view`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[65];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate65(
            outputs.GetMutable65(offset), buffer_factory);
      }
    }();
    // protopath=`[:]` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[16]) {
        return;
      }
      // protopath=`[:]/x_double` name=`/x_double`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[66];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate66(
            outputs.GetMutable66(offset), buffer_factory);
      }
      // protopath=`[:]/x_enum` name=`/x_enum`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[67];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate67(
            outputs.GetMutable67(offset), buffer_factory);
      }
      // protopath=`[:]/x_fixed64` name=`/x_fixed64`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[68];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate68(
            outputs.GetMutable68(offset), buffer_factory);
      }
      // protopath=`[:]/x_float` name=`/x_float`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[69];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate69(
            outputs.GetMutable69(offset), buffer_factory);
      }
      // protopath=`[:]/x_int64` name=`/x_int64`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[70];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate70(
            outputs.GetMutable70(offset), buffer_factory);
      }
      // protopath=`[:]/x_string_string_view` name=`/x_string_string_view`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[71];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate71(
            outputs.GetMutable71(offset), buffer_factory);
      }
      // protopath=`[:]/x_uint32` name=`/x_uint32`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[72];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate72(
            outputs.GetMutable72(offset), buffer_factory);
      }
      // protopath=`[:]/x_uint64` name=`/x_uint64`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[73];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate73(
            outputs.GetMutable73(offset), buffer_factory);
      }
    }();
    // protopath=`[:]` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[17]) {
        return;
      }
      // protopath=`[:]/ys[:]` name=`/ys`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[74];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate74(
            outputs.GetMutable74(offset), buffer_factory);
      }
      // protopath=`[:]/count(ys[:])` name=`/ys/@size`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[75];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate75(
            outputs.GetMutable75(offset), buffer_factory);
      }
    }();
 }

 private:
  // Intermediate non vector data: pointers to messages and sizes.
  struct SingleValueData {
    const Input* intermediate19 = nullptr;
    // protopath=`[:]/inner/as[:]` name=`/inner/as`
    size_t total_size_2 = 0;
    // protopath=`[:]/inner/inner2/zs[:]` name=`/inner/inner2/zs`
    size_t total_size_6 = 0;
    // protopath=`[:]/inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
    size_t total_size_11 = 0;
    // protopath=`[:]/inners[:]/as[:]` name=`/inners/as`
    size_t total_size_22 = 0;
    // protopath=`[:]/inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
    size_t total_size_26 = 0;
    // protopath=`[:]/inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
    size_t total_size_31 = 0;
    // protopath=`[:]/repeated_bools[:]` name=`/repeated_bools`
    size_t total_size_44 = 0;
    // protopath=`[:]/repeated_doubles[:]` name=`/repeated_doubles`
    size_t total_size_47 = 0;
    // protopath=`[:]/repeated_enums[:]` name=`/repeated_enums`
    size_t total_size_49 = 0;
    // protopath=`[:]/repeated_floats[:]` name=`/repeated_floats`
    size_t total_size_51 = 0;
    // protopath=`[:]/repeated_int32s[:]` name=`/repeated_int32s`
    size_t total_size_53 = 0;
    // protopath=`[:]/repeated_int64s[:]` name=`/repeated_int64s`
    size_t total_size_56 = 0;
    // protopath=`[:]/repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
    size_t total_size_58 = 0;
    // protopath=`[:]/repeated_str[:]` name=`/repeated_str`
    size_t total_size_60 = 0;
    // protopath=`[:]/repeated_uint32s[:]` name=`/repeated_uint32s`
    size_t total_size_62 = 0;
    // protopath=`[:]/repeated_uint64s[:]` name=`/repeated_uint64s`
    size_t total_size_65 = 0;
    // protopath=`[:]/ys[:]` name=`/ys`
    size_t total_size_91 = 0;
  };

  // Intermediate vector data: collection of pointers to messages.
  struct MultiValueData {
    using MsgType0 = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().inner2())>;
    std::vector<const MsgType0*> intermediate0;
    using MsgType1 = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner().inners2(0))>;
    std::vector<const MsgType1*> intermediate1;
    using MsgType4 = std::decay_t<decltype(
        std::declval<const Input&>()[0].inner())>;
    std::vector<const MsgType4*> intermediate4;
    using MsgType5 = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).inner2())>;
    std::vector<const MsgType5*> intermediate5;
    using MsgType6 = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0).inners2(0))>;
    std::vector<const MsgType6*> intermediate6;
    using MsgType9 = std::decay_t<decltype(
        std::declval<const Input&>()[0].inners(0))>;
    std::vector<const MsgType9*> intermediate9;
    using MsgType18 = std::decay_t<decltype(
        std::declval<const Input&>()[0])>;
    std::vector<const MsgType18*> intermediate18;
  };

  SingleValueData single_;
  MultiValueData multi_;
};

// InputLoader for all DenseArray value protopathes.
class Loader final : public ::arolla::StaticInputLoader<Input> {
 public:
  Loader()
    : StaticInputLoader<Input>(
      // use special builder to reduce binary size and stack pressure
          []() {
            NamedTypesBuilder builder;
            builder.Add(
                R"RL_CODEGEN_DELIM(/BrOkEn_CaSe)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_0>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/a)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_1>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/as)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_2>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/as/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_3>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/bytes_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_4>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inner2/z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_5>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inner2/zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_6>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inner2/zs/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_7>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inners2/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_8>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inners2/z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_9>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inners2/zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_10>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inners2/zs/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_11>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/raw_bytes)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_12>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/str)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_13>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/str_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_14>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_15>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/a)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_16>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/as)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_17>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/as/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_18>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/bytes_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_19>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inner2/z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_20>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inner2/zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_21>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inner2/zs/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_22>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inners2/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_23>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inners2/z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_24>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inners2/zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_25>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inners2/zs/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_26>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/raw_bytes)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_27>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/str)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_28>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/str_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_29>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/private)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_30>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/proto3/non_optional_i32)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_31>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/raw_bytes)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_32>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_bools)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_33>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_bools/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_34>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_doubles)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_35>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_doubles/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_36>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_enums)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_37>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_enums/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_38>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_floats)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_39>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_floats/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_40>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_int32s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_41>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_int32s/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_42>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_int64s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_43>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_int64s/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_44>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_raw_bytes)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_45>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_raw_bytes/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_46>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_str)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_47>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_str/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_48>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_uint32s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_49>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_uint32s/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_50>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_uint64s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_51>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_uint64s/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_52>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/str)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_53>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_54>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x0)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_55>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x1)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_56>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x2)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_57>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x3)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_58>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x4)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_59>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x5)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_60>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x6)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_61>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x7)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_62>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x8)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_63>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x9)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_64>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x_bytes_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_65>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x_double)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_66>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x_enum)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_67>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x_fixed64)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_68>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x_float)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_69>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x_int64)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_70>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x_string_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_71>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x_uint32)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_72>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/x_uint64)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_73>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/ys)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_74>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/ys/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_75>());
            return std::move(builder).Build();
          }()) {}

 private:
  StatusOr<BoundInputLoader<Input>> BindImpl(
      const absl::flat_hash_map<std::string, TypedSlot>& output_slots)
      const final {
    ASSIGN_OR_RETURN(auto optional_slots,
                     ::arolla::MaybeFindSlotsAndVerifyTypes(
                         types_in_order(), output_slots));
    // Allocate on heap to reduce stack pressure.
    auto inputs = std::make_unique<HierarchicalMultiValueRequestedInputs>();
    auto tree = []() {
      std::vector<std::vector<size_t>> tree(96);
      tree[8] = {5,6,7};
      tree[13] = {10,11,12};
      tree[15] = {1,2,3,4,8,9,13,14};
      tree[18] = {16,17};
      tree[19] = {15,18};
      tree[28] = {25,26,27};
      tree[33] = {30,31,32};
      tree[35] = {21,22,23,24,28,29,33,34};
      tree[38] = {36,37};
      tree[39] = {35,38};
      tree[42] = {41};
      tree[45] = {0,19,20,39,40,42,43,44};
      tree[54] = {46,47,48,49,50,51,52,53};
      tree[63] = {55,56,57,58,59,60,61,62};
      tree[72] = {64,65,66,67,68,69,70,71};
      tree[81] = {73,74,75,76,77,78,79,80};
      tree[90] = {82,83,84,85,86,87,88,89};
      tree[93] = {91,92};
      tree[94] = {45,54,63,72,81,90,93};
      tree[95] = {94};
      return tree;
    }();
    CreateHierarchicalMultiValueRequestedInputs(
      optional_slots,
      tree,
      inputs.get());
    return BoundInputLoader<Input>([inputs=std::move(*inputs)](
        const Input& input, FramePtr frame, RawBufferFactory* buffer_factory) {
      OutputProvider output_getter{&inputs, frame};
      SlotSetter slot_setter;
      slot_setter.CollectResults(input, output_getter, buffer_factory);
      return OkStatus();
    });
  }
};

}  // namespace multi_value_protopath

// Returns ChainInputLoader: Accessors, Single- and Multi-value proto.
const InputLoader<Input>*
GetCollectionInputLoader() {
  static const InputLoader<Input>* impl = ChainInputLoader<Input>::Build(
          // Not using make_unique to avoid binary size blowup.
          ::arolla::InputLoaderPtr<Input>(static_cast<const InputLoader<Input>*>(
            new multi_value_protopath::Loader()))
      )->release();
  return impl;
}


}  // namespace
}  // namespace my_namespace_GetDescriptorBasedSpanLoaderImplNamespace

namespace my_namespace {

::arolla::InputLoaderPtr<::absl::Span<const ::testing_namespace::Root>>
GetDescriptorBasedSpanLoader() {
  return MakeNotOwningInputLoader(::my_namespace_GetDescriptorBasedSpanLoaderImplNamespace::GetCollectionInputLoader());
}

}  // namespace my_namespace

