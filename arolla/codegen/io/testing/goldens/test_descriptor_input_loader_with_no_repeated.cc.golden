// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target: //arolla/codegen/io/testing:test_descriptor_input_loader_with_no_repeated

#include <memory>


#include "arolla/codegen/io/multi_loader.h"
#include "arolla/proto/testing/test.pb.h"
#include "arolla/proto/testing/test_proto3.pb.h"
#include "arolla/proto/types.h"
#include "arolla/util/map.h"
#include "arolla/util/text.h"
#include "arolla/codegen/qtype_utils.h"
#include "arolla/io/accessors_input_loader.h"
#include "arolla/io/input_loader.h"
#include "arolla/io/wildcard_input_loader.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/base_types.h"

namespace {
using ::absl::OkStatus;
using ::absl::Status;
using ::absl::StatusOr;
using ::arolla::BoundInputLoader;
using ::arolla::ChainInputLoader;
using ::arolla::FramePtr;
using ::arolla::GetQType;
using ::arolla::InputLoader;
using ::arolla::QTypePtr;
using ::arolla::RawBufferFactory;
using ::arolla::TypedSlot;
using ::arolla::WildcardInputLoader;
}  // namespace

namespace my_namespace_GetDescriptorBasedLoaderWithoutRepeatedImplNamespace {

using Input = ::testing_namespace::Root;

// Declare other shards defined in the separate cc files.
namespace shard1 {
const InputLoader<Input>* GetCollectionInputLoader();
}  // namespace shard1
namespace shard2 {
const InputLoader<Input>* GetCollectionInputLoader();
}  // namespace shard2
namespace shard3 {
const InputLoader<Input>* GetCollectionInputLoader();
}  // namespace shard3

namespace {
namespace {
namespace single_value_protopath {

using ::arolla::codegen::io::kSkippedOffset;

// In this namespace protopath inputs with `OptionalValue` and `DenseArrayShape`
// are being loaded.

using HierarchicalSingleValueRequestedInputs =
    ::arolla::codegen::io::HierarchicalSingleValueRequestedInputsData<
        /*kLeafCount=*/8,
        /*kNodeCount=*/11>;

// Provides access to the output pointers for each leaf.
class OutputProvider {
 public:
  const HierarchicalSingleValueRequestedInputs* requested_inputs;
  FramePtr frame;

 public:

  // protopath=`BrOkEn_CaSe` name=`/BrOkEn_CaSe`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable0(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().broken_case())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[0],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/a` name=`/inner/a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable1(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().a())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[1],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/bytes_cord` name=`/inner/bytes_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable2(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().bytes_cord())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[2],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inner2/z` name=`/inner/inner2/z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable3(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().inner2().z())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[3],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/raw_bytes` name=`/inner/raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable4(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().raw_bytes())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[4],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/str` name=`/inner/str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable5(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[5],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/str_cord` name=`/inner/str_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable6(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[6],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`private` name=`/private`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable7(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().private_())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[7],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

};


using ResultType_0 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable0(0))>>;
using ResultType_1 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable1(0))>>;
using ResultType_2 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable2(0))>>;
using ResultType_3 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable3(0))>>;
using ResultType_4 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable4(0))>>;
using ResultType_5 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable5(0))>>;
using ResultType_6 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable6(0))>>;
using ResultType_7 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable7(0))>>;

// Set all optional values under the node as missed.
void SetAllOptionalMissed(
    const HierarchicalSingleValueRequestedInputs& requested_inputs,
    FramePtr frame,
    size_t node_intermediate_id) {
  const auto& clear_info =
      requested_inputs.node_optional_clear_infos[node_intermediate_id];
  for (size_t i = clear_info.range_begin; i != clear_info.range_end; ++i) {
     *frame.GetMutable(
         ::arolla::FrameLayout::Slot<bool>::UnsafeSlotFromOffset(
             requested_inputs.requested_offsets[i])) = false;
  }
}

// Traverse the proto and put results for all single values to the frame.
class SlotSetter {
 public:

 void CollectResults(const Input& input, const OutputProvider& outputs) {
   const Input& tmp_2 = input;

    // protopath=`BrOkEn_CaSe` name=`/BrOkEn_CaSe`
    [&]() {
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[0];
          offset != kSkippedOffset) {
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, broken_case))) {
          outputs.GetMutable0(offset)->present = false;
          return;
        }
        auto* output = outputs.GetMutable0(offset);
        output->present = true;
        output->value = ::arolla::proto::ToArollaCompatibleType(
            tmp_2.broken_case());
      }
    }();
    // protopath=`inner`
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[1]) {
        return;
      }
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, inner))) {
        SetAllOptionalMissed(
            *outputs.requested_inputs,
            outputs.frame,
            1);
        return;
      }
      const auto& tmp_1 = tmp_2.inner();
      // protopath=`inner/a` name=`/inner/a`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[1];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, a))) {
            outputs.GetMutable1(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable1(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(
              tmp_1.a());
        }
      }();
      // protopath=`inner/bytes_cord` name=`/inner/bytes_cord`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[2];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, bytes_cord))) {
            outputs.GetMutable2(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable2(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(
              tmp_1.bytes_cord());
        }
      }();
      // protopath=`inner/inner2`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[0]) {
          return;
        }
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, inner2))) {
          SetAllOptionalMissed(
              *outputs.requested_inputs,
              outputs.frame,
              0);
          return;
        }
        const auto& tmp_0 = tmp_1.inner2();
        // protopath=`inner/inner2/z` name=`/inner/inner2/z`
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[3];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_0, z))) {
            outputs.GetMutable3(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable3(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(
              tmp_0.z());
        }
      }();
      // protopath=`inner/raw_bytes` name=`/inner/raw_bytes`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[4];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, raw_bytes))) {
            outputs.GetMutable4(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable4(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(
              tmp_1.raw_bytes());
        }
      }();
      // protopath=`inner/str` name=`/inner/str`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[5];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, str))) {
            outputs.GetMutable5(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable5(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(
              tmp_1.str());
        }
      }();
      // protopath=`inner/str_cord` name=`/inner/str_cord`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[6];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, str_cord))) {
            outputs.GetMutable6(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable6(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(
              tmp_1.str_cord());
        }
      }();
    }();
    // protopath=`private` name=`/private`
    [&]() {
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[7];
          offset != kSkippedOffset) {
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, private_))) {
          outputs.GetMutable7(offset)->present = false;
          return;
        }
        auto* output = outputs.GetMutable7(offset);
        output->present = true;
        output->value = ::arolla::proto::ToArollaCompatibleType(
            tmp_2.private_());
      }
    }();
  }
};

// InputLoader for all single value protopathes.
class Loader final : public ::arolla::StaticInputLoader<Input> {
 public:
  Loader()
    : ::arolla::StaticInputLoader<Input>(
        // Use special builder to reduce binary size and stack pressure.
        []() {
          ::arolla::codegen::NamedQTypeVectorBuilder builder;
          builder.AddFromCommonPrefixWithPrevious(
              // /BrOkEn_CaSe
              12,
              R"RL_CODEGEN_DELIM(/BrOkEn_CaSe)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_0>());
          builder.AddFromCommonPrefixWithPrevious(
              // /inner/a
              8,
              R"RL_CODEGEN_DELIM(inner/a)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_1>());
          builder.AddFromCommonPrefixWithPrevious(
              // /inner/bytes_cord
              17,
              R"RL_CODEGEN_DELIM(bytes_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_2>());
          builder.AddFromCommonPrefixWithPrevious(
              // /inner/inner2/z
              15,
              R"RL_CODEGEN_DELIM(inner2/z)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_3>());
          builder.AddFromCommonPrefixWithPrevious(
              // /inner/raw_bytes
              16,
              R"RL_CODEGEN_DELIM(raw_bytes)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_4>());
          builder.AddFromCommonPrefixWithPrevious(
              // /inner/str
              10,
              R"RL_CODEGEN_DELIM(str)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_5>());
          builder.AddFromCommonPrefixWithPrevious(
              // /inner/str_cord
              15,
              R"RL_CODEGEN_DELIM(_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_6>());
          builder.AddFromCommonPrefixWithPrevious(
              // /private
              8,
              R"RL_CODEGEN_DELIM(private)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_7>());
          return std::move(builder).Build();
        }()) {}

 private:
  auto CreateProtopathTree() const {
    return []() {
      std::vector<std::vector<size_t>> tree(11);
      tree[4] = {3};
      tree[8] = {1,2,4,5,6,7};
      tree[10] = {0,8,9};
      return tree;
    }();
  }

  StatusOr<BoundInputLoader<Input>> BindImpl(
      const absl::flat_hash_map<std::string, TypedSlot>& output_slots)
      const final {
    ASSIGN_OR_RETURN(auto optional_slots,
                     ::arolla::MaybeFindSlotsAndVerifyTypes(
                         types_in_order(), output_slots));
    // Allocate on heap to reduce stack pressure.
    auto inputs = std::make_unique<HierarchicalSingleValueRequestedInputs>();
    auto tree = CreateProtopathTree();
    CreateHierarchicalSingleValueRequestedInputs(
      optional_slots,
      /*size_leaves=*/{  },
      tree,
      inputs.get());
    return BoundInputLoader<Input>([inputs=std::move(inputs)](
        const Input& input, FramePtr frame, RawBufferFactory*) {
      OutputProvider output_getter{inputs.get(), frame};
      SlotSetter slot_setter;
      slot_setter.CollectResults(input, output_getter);
      return OkStatus();
    });
  }
};

}  // namespace single_value_protopath

}  // namespace

// Returns ChainInputLoader: Accessors, Single- and Multi-value proto.
const InputLoader<Input>*
GetCollectionInputLoader() {
  static const InputLoader<Input>* impl = ChainInputLoader<Input>::Build(
          // Not using make_unique to avoid binary size blowup.
          ::arolla::InputLoaderPtr<Input>(static_cast<InputLoader<Input>*>(
            new single_value_protopath::Loader()))
      )->release();
  return impl;
}
}  // namespace


namespace {

// Returns InputLoaders for each shard.
std::vector<std::unique_ptr<InputLoader<Input>>>
GetShardInputLoaders() {
  std::vector<std::unique_ptr<InputLoader<Input>>> res;
  res.emplace_back() = MakeNotOwningInputLoader(GetCollectionInputLoader());
res.emplace_back() = MakeNotOwningInputLoader(
      shard1::GetCollectionInputLoader());res.emplace_back() = MakeNotOwningInputLoader(
      shard2::GetCollectionInputLoader());res.emplace_back() = MakeNotOwningInputLoader(
      shard3::GetCollectionInputLoader());
  return res;
}

// Returns ChainInputLoader with all shards.
const InputLoader<Input>*
GetAllShardsInputLoader() {
  static const InputLoader<Input>* impl =
        ChainInputLoader<Input>::Build(GetShardInputLoaders()).value().release();
  return impl;
}

}  // namespace
}  // namespace my_namespace_GetDescriptorBasedLoaderWithoutRepeatedImplNamespace

namespace my_namespace {

std::unique_ptr<InputLoader<::testing_namespace::Root>>
GetDescriptorBasedLoaderWithoutRepeated() {
  return MakeNotOwningInputLoader(
      ::my_namespace_GetDescriptorBasedLoaderWithoutRepeatedImplNamespace::GetAllShardsInputLoader());
}
std::vector<std::unique_ptr<InputLoader<::testing_namespace::Root>>>
GetDescriptorBasedLoaderWithoutRepeated_Shards() {
  return ::my_namespace_GetDescriptorBasedLoaderWithoutRepeatedImplNamespace::GetShardInputLoaders();
}


}  // namespace my_namespace

