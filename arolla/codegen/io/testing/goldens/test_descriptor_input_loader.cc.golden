// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target: //arolla/codegen/io/testing:test_descriptor_input_loader


#include "arolla/codegen/io/multi_loader.h"
#include "arolla/dense_array/dense_array.h"
#include "arolla/dense_array/qtype/types.h"
#include "arolla/proto/test.pb.h"
#include "arolla/proto/test_proto3.pb.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/qtype.h"
#include "arolla/util/bytes.h"
#include "arolla/util/map.h"
#include "arolla/util/text.h"
#include "arolla/io/accessors_input_loader.h"
#include "arolla/io/input_loader.h"
#include "arolla/io/wildcard_input_loader.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/base_types.h"

namespace {
using ::absl::OkStatus;
using ::absl::Status;
using ::absl::StatusOr;
using ::arolla::BoundInputLoader;
using ::arolla::ChainInputLoader;
using ::arolla::FramePtr;
using ::arolla::GetQType;
using ::arolla::InputLoader;
using ::arolla::InputLoaderPtr;
using ::arolla::QTypePtr;
using ::arolla::RawBufferFactory;
using ::arolla::TypedSlot;
using ::arolla::WildcardInputLoader;
}  // namespace

namespace my_namespace_GetDescriptorBasedLoaderImplNamespace {
namespace {

using Input = ::testing_namespace::Root;

namespace single_value_protopath {

using ::arolla::codegen::io::kSkippedOffset;
using ::arolla::codegen::io::NamedTypesBuilder;

// In this namespace protopath inputs with `OptionalValue` and `DenseArrayShape`
// are being loaded.

using HierarchicalSingleValueRequestedInputs =
    ::arolla::codegen::io::HierarchicalSingleValueRequestedInputsData<
        /*kLeafCount=*/100,
        /*kNodeCount=*/117>;

// Provides access to the output pointers for each leaf.
class OutputProvider {
 public:
  const HierarchicalSingleValueRequestedInputs* requested_inputs;
  FramePtr frame;

 public:

  // protopath=`BrOkEn_CaSe` name=`/BrOkEn_CaSe`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable0(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().broken_case())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[0],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/a` name=`/inner/a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable1(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().a())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[1],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/count(as[:])` name=`/inner/as/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable2(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[2],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/bytes_cord` name=`/inner/bytes_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable3(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().bytes_cord())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[3],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/bytes_string_view` name=`/inner/bytes_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable4(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().bytes_string_view())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[4],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inner2/z` name=`/inner/inner2/z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable5(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().inner2().z())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[5],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inner2/count(zs[:])` name=`/inner/inner2/zs/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable6(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[6],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inner2/z` name=`inner__inner2__z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable7(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().inner2().z())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[7],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inner2/count(zs[:])` name=`inner__inner2__zs__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable8(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[8],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/count(inners2[:])` name=`/inner/inners2/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable9(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[9],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/raw_bytes` name=`/inner/raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable10(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().raw_bytes())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[10],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/str` name=`/inner/str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable11(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[11],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/str_cord` name=`/inner/str_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable12(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[12],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/str_string_view` name=`/inner/str_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable13(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[13],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/a` name=`inner__a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable14(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().a())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[14],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/count(as[:])` name=`inner__as__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable15(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[15],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/bytes_cord` name=`inner__bytes_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable16(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().bytes_cord())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[16],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/bytes_string_view` name=`inner__bytes_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable17(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().bytes_string_view())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[17],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/count(inners2[:])` name=`inner__inners2__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable18(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[18],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/raw_bytes` name=`inner__raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable19(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().raw_bytes())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[19],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/str` name=`inner__str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable20(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[20],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/str_cord` name=`inner__str_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable21(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[21],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/str_string_view` name=`inner__str_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable22(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[22],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(inners[:])` name=`/inners/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable23(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[23],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`private` name=`/private`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable24(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().private_())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[24],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`proto3/non_optional_i32` name=`/proto3/non_optional_i32`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable25(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().proto3().non_optional_i32())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[25],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`proto3/non_optional_i32` name=`proto3__non_optional_i32`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable26(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().proto3().non_optional_i32())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[26],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`raw_bytes` name=`/raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable27(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().raw_bytes())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[27],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_bools[:])` name=`/repeated_bools/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable28(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[28],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_doubles[:])` name=`/repeated_doubles/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable29(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[29],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_enums[:])` name=`/repeated_enums/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable30(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[30],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_floats[:])` name=`/repeated_floats/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable31(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[31],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_int32s[:])` name=`/repeated_int32s/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable32(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[32],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_int64s[:])` name=`/repeated_int64s/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable33(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[33],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_raw_bytes[:])` name=`/repeated_raw_bytes/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable34(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[34],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_str[:])` name=`/repeated_str/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable35(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[35],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_uint32s[:])` name=`/repeated_uint32s/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable36(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[36],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_uint64s[:])` name=`/repeated_uint64s/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable37(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[37],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`str` name=`/str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable38(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[38],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x` name=`/x`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable39(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[39],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x0` name=`/x0`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable40(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x0())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[40],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x1` name=`/x1`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable41(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x1())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[41],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x2` name=`/x2`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable42(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x2())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[42],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x3` name=`/x3`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable43(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x3())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[43],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x4` name=`/x4`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable44(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x4())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[44],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x5` name=`/x5`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable45(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x5())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[45],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x6` name=`/x6`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable46(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x6())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[46],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x7` name=`/x7`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable47(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x7())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[47],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x8` name=`/x8`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable48(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x8())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[48],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x9` name=`/x9`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable49(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x9())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[49],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_bytes_cord` name=`/x_bytes_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable50(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_bytes_cord())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[50],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_bytes_string_view` name=`/x_bytes_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable51(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_bytes_string_view())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[51],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_double` name=`/x_double`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable52(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_double())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[52],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_enum` name=`/x_enum`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable53(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_enum())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[53],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_fixed64` name=`/x_fixed64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable54(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_fixed64())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[54],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_float` name=`/x_float`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable55(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_float())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[55],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_int64` name=`/x_int64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable56(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_int64())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[56],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_string_cord` name=`/x_string_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable57(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[57],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_string_string_view` name=`/x_string_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable58(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[58],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_uint32` name=`/x_uint32`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable59(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_uint32())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[59],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_uint64` name=`/x_uint64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable60(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_uint64())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[60],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(ys[:])` name=`/ys/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable61(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[61],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`BrOkEn_CaSe` name=`BrOkEn_CaSe`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable62(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().broken_case())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[62],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(inners[:])` name=`inners__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable63(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[63],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`private` name=`private`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable64(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().private_())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[64],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`raw_bytes` name=`raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable65(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().raw_bytes())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[65],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_bools[:])` name=`repeated_bools__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable66(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[66],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_doubles[:])` name=`repeated_doubles__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable67(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[67],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_enums[:])` name=`repeated_enums__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable68(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[68],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_floats[:])` name=`repeated_floats__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable69(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[69],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_int32s[:])` name=`repeated_int32s__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable70(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[70],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_int64s[:])` name=`repeated_int64s__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable71(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[71],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_raw_bytes[:])` name=`repeated_raw_bytes__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable72(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[72],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_str[:])` name=`repeated_str__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable73(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[73],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_uint32s[:])` name=`repeated_uint32s__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable74(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[74],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(repeated_uint64s[:])` name=`repeated_uint64s__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable75(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[75],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`str` name=`str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable76(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[76],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x` name=`x`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable77(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[77],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x0` name=`x0`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable78(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x0())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[78],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x1` name=`x1`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable79(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x1())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[79],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x2` name=`x2`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable80(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x2())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[80],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x3` name=`x3`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable81(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x3())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[81],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x4` name=`x4`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable82(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x4())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[82],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x5` name=`x5`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable83(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x5())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[83],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x6` name=`x6`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable84(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x6())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[84],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x7` name=`x7`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable85(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x7())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[85],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x8` name=`x8`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable86(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x8())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[86],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x9` name=`x9`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable87(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x9())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[87],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_bytes_cord` name=`x_bytes_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable88(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_bytes_cord())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[88],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_bytes_string_view` name=`x_bytes_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable89(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_bytes_string_view())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[89],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_double` name=`x_double`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable90(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_double())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[90],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_enum` name=`x_enum`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable91(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_enum())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[91],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_fixed64` name=`x_fixed64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable92(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_fixed64())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[92],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_float` name=`x_float`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable93(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_float())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[93],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_int64` name=`x_int64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable94(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_int64())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[94],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_string_cord` name=`x_string_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable95(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[95],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_string_string_view` name=`x_string_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable96(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[96],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_uint32` name=`x_uint32`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable97(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_uint32())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[97],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`x_uint64` name=`x_uint64`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable98(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().x_uint64())>;
    using result_type = HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[98],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`count(ys[:])` name=`ys__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable99(size_t offset) const {
    using result_type = HierarchicalSingleValueRequestedInputs::size_type;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[99],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

};


using ResultType_0 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable0(0))>>;
using ResultType_1 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable1(0))>>;
using ResultType_2 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable2(0))>>;
using ResultType_3 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable3(0))>>;
using ResultType_4 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable4(0))>>;
using ResultType_5 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable5(0))>>;
using ResultType_6 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable6(0))>>;
using ResultType_7 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable7(0))>>;
using ResultType_8 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable8(0))>>;
using ResultType_9 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable9(0))>>;
using ResultType_10 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable10(0))>>;
using ResultType_11 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable11(0))>>;
using ResultType_12 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable12(0))>>;
using ResultType_13 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable13(0))>>;
using ResultType_14 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable14(0))>>;
using ResultType_15 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable15(0))>>;
using ResultType_16 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable16(0))>>;
using ResultType_17 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable17(0))>>;
using ResultType_18 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable18(0))>>;
using ResultType_19 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable19(0))>>;
using ResultType_20 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable20(0))>>;
using ResultType_21 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable21(0))>>;
using ResultType_22 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable22(0))>>;
using ResultType_23 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable23(0))>>;
using ResultType_24 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable24(0))>>;
using ResultType_25 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable25(0))>>;
using ResultType_26 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable26(0))>>;
using ResultType_27 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable27(0))>>;
using ResultType_28 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable28(0))>>;
using ResultType_29 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable29(0))>>;
using ResultType_30 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable30(0))>>;
using ResultType_31 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable31(0))>>;
using ResultType_32 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable32(0))>>;
using ResultType_33 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable33(0))>>;
using ResultType_34 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable34(0))>>;
using ResultType_35 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable35(0))>>;
using ResultType_36 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable36(0))>>;
using ResultType_37 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable37(0))>>;
using ResultType_38 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable38(0))>>;
using ResultType_39 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable39(0))>>;
using ResultType_40 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable40(0))>>;
using ResultType_41 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable41(0))>>;
using ResultType_42 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable42(0))>>;
using ResultType_43 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable43(0))>>;
using ResultType_44 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable44(0))>>;
using ResultType_45 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable45(0))>>;
using ResultType_46 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable46(0))>>;
using ResultType_47 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable47(0))>>;
using ResultType_48 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable48(0))>>;
using ResultType_49 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable49(0))>>;
using ResultType_50 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable50(0))>>;
using ResultType_51 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable51(0))>>;
using ResultType_52 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable52(0))>>;
using ResultType_53 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable53(0))>>;
using ResultType_54 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable54(0))>>;
using ResultType_55 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable55(0))>>;
using ResultType_56 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable56(0))>>;
using ResultType_57 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable57(0))>>;
using ResultType_58 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable58(0))>>;
using ResultType_59 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable59(0))>>;
using ResultType_60 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable60(0))>>;
using ResultType_61 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable61(0))>>;
using ResultType_62 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable62(0))>>;
using ResultType_63 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable63(0))>>;
using ResultType_64 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable64(0))>>;
using ResultType_65 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable65(0))>>;
using ResultType_66 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable66(0))>>;
using ResultType_67 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable67(0))>>;
using ResultType_68 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable68(0))>>;
using ResultType_69 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable69(0))>>;
using ResultType_70 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable70(0))>>;
using ResultType_71 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable71(0))>>;
using ResultType_72 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable72(0))>>;
using ResultType_73 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable73(0))>>;
using ResultType_74 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable74(0))>>;
using ResultType_75 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable75(0))>>;
using ResultType_76 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable76(0))>>;
using ResultType_77 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable77(0))>>;
using ResultType_78 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable78(0))>>;
using ResultType_79 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable79(0))>>;
using ResultType_80 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable80(0))>>;
using ResultType_81 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable81(0))>>;
using ResultType_82 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable82(0))>>;
using ResultType_83 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable83(0))>>;
using ResultType_84 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable84(0))>>;
using ResultType_85 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable85(0))>>;
using ResultType_86 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable86(0))>>;
using ResultType_87 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable87(0))>>;
using ResultType_88 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable88(0))>>;
using ResultType_89 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable89(0))>>;
using ResultType_90 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable90(0))>>;
using ResultType_91 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable91(0))>>;
using ResultType_92 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable92(0))>>;
using ResultType_93 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable93(0))>>;
using ResultType_94 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable94(0))>>;
using ResultType_95 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable95(0))>>;
using ResultType_96 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable96(0))>>;
using ResultType_97 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable97(0))>>;
using ResultType_98 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable98(0))>>;
using ResultType_99 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable99(0))>>;

// Set all optional values under the node as missed.
void SetAllOptionalMissed(
    const HierarchicalSingleValueRequestedInputs& requested_inputs,
    FramePtr frame,
    size_t node_intermediate_id) {
  const auto& clear_info =
      requested_inputs.node_optional_clear_infos[node_intermediate_id];
  for (size_t i = clear_info.range_begin; i != clear_info.range_end; ++i) {
     *frame.GetMutable(
         ::arolla::FrameLayout::Slot<bool>::UnsafeSlotFromOffset(
             requested_inputs.requested_offsets[i])) = false;
  }
}

// Set all DenseArrayShape values under the node as 0.
void SetAllSizeZero(
    const HierarchicalSingleValueRequestedInputs& requested_inputs,
    FramePtr frame,
    size_t node_intermediate_id) {
  const auto& clear_info =
      requested_inputs.node_size_clear_infos[node_intermediate_id];
  for (size_t i = clear_info.range_begin; i != clear_info.range_end; ++i) {
     *frame.GetMutable(
         ::arolla::FrameLayout::Slot<::arolla::DenseArrayShape>::UnsafeSlotFromOffset(
             requested_inputs.requested_offsets[i])) = {0};
  }
}

// Traverse the proto and put results for all single values to the frame.
class SlotSetter {
 public:

 void CollectResults(const Input& input, const OutputProvider& outputs) {
   const Input& tmp_16 = input;

    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[6]) {
        return;
      }
      const auto& tmp_6 = tmp_16;
      // protopath=`BrOkEn_CaSe` name=`/BrOkEn_CaSe`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[0];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_6, broken_case))) {
            outputs.GetMutable0(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable0(offset);
          output->present = true;
          output->value = tmp_6.broken_case();
        }
      }();
      // protopath=`inner`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[4]) {
          return;
        }
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_6, inner))) {
          SetAllOptionalMissed(
              *outputs.requested_inputs,
              outputs.frame,
              4);
          SetAllSizeZero(
              *outputs.requested_inputs,
              outputs.frame,
              4);
          return;
        }
        const auto& tmp_4 = tmp_6.inner();
        // protopath=`inner` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[1]) {
            return;
          }
          const auto& tmp_1 = tmp_4;
          // protopath=`inner/a` name=`/inner/a`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[1];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, a))) {
                outputs.GetMutable1(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable1(offset);
              output->present = true;
              output->value = tmp_1.a();
            }
          }();
          // protopath=`inner/count(as[:])` name=`/inner/as/@size`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[2];
                offset != kSkippedOffset) {
              *outputs.GetMutable2(offset) = ::arolla::DenseArrayShape{
                  static_cast<int64_t>(tmp_1.as().size())};
            }
          }();
          // protopath=`inner/bytes_cord` name=`/inner/bytes_cord`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[3];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, bytes_cord))) {
                outputs.GetMutable3(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable3(offset);
              output->present = true;
              output->value = tmp_1.bytes_cord();
            }
          }();
          // protopath=`inner/bytes_string_view` name=`/inner/bytes_string_view`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[4];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, bytes_string_view))) {
                outputs.GetMutable4(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable4(offset);
              output->present = true;
              output->value = tmp_1.bytes_string_view();
            }
          }();
          // protopath=`inner/inner2`
          [&]() {
            if (!outputs.requested_inputs->common.node_requested[0]) {
              return;
            }
            if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, inner2))) {
              SetAllOptionalMissed(
                  *outputs.requested_inputs,
                  outputs.frame,
                  0);
              SetAllSizeZero(
                  *outputs.requested_inputs,
                  outputs.frame,
                  0);
              return;
            }
            const auto& tmp_0 = tmp_1.inner2();
            // protopath=`inner/inner2/z` name=`/inner/inner2/z`
            [&]() {
              if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[5];
                  offset != kSkippedOffset) {
                if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_0, z))) {
                  outputs.GetMutable5(offset)->present = false;
                  return;
                }
                auto* output = outputs.GetMutable5(offset);
                output->present = true;
                output->value = tmp_0.z();
              }
            }();
            // protopath=`inner/inner2/count(zs[:])` name=`/inner/inner2/zs/@size`
            [&]() {
              if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[6];
                  offset != kSkippedOffset) {
                *outputs.GetMutable6(offset) = ::arolla::DenseArrayShape{
                    static_cast<int64_t>(tmp_0.zs().size())};
              }
            }();
            // protopath=`inner/inner2/z` name=`inner__inner2__z`
            [&]() {
              if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[7];
                  offset != kSkippedOffset) {
                if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_0, z))) {
                  outputs.GetMutable7(offset)->present = false;
                  return;
                }
                auto* output = outputs.GetMutable7(offset);
                output->present = true;
                output->value = tmp_0.z();
              }
            }();
            // protopath=`inner/inner2/count(zs[:])` name=`inner__inner2__zs__@size`
            [&]() {
              if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[8];
                  offset != kSkippedOffset) {
                *outputs.GetMutable8(offset) = ::arolla::DenseArrayShape{
                    static_cast<int64_t>(tmp_0.zs().size())};
              }
            }();
          }();
          // protopath=`inner/count(inners2[:])` name=`/inner/inners2/@size`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[9];
                offset != kSkippedOffset) {
              *outputs.GetMutable9(offset) = ::arolla::DenseArrayShape{
                  static_cast<int64_t>(tmp_1.inners2().size())};
            }
          }();
          // protopath=`inner/raw_bytes` name=`/inner/raw_bytes`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[10];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, raw_bytes))) {
                outputs.GetMutable10(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable10(offset);
              output->present = true;
              output->value = tmp_1.raw_bytes();
            }
          }();
          // protopath=`inner/str` name=`/inner/str`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[11];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, str))) {
                outputs.GetMutable11(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable11(offset);
              output->present = true;
              output->value = tmp_1.str();
            }
          }();
        }();
        // protopath=`inner` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[2]) {
            return;
          }
          const auto& tmp_2 = tmp_4;
          // protopath=`inner/str_cord` name=`/inner/str_cord`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[12];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, str_cord))) {
                outputs.GetMutable12(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable12(offset);
              output->present = true;
              output->value = tmp_2.str_cord();
            }
          }();
          // protopath=`inner/str_string_view` name=`/inner/str_string_view`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[13];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, str_string_view))) {
                outputs.GetMutable13(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable13(offset);
              output->present = true;
              output->value = tmp_2.str_string_view();
            }
          }();
          // protopath=`inner/a` name=`inner__a`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[14];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, a))) {
                outputs.GetMutable14(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable14(offset);
              output->present = true;
              output->value = tmp_2.a();
            }
          }();
          // protopath=`inner/count(as[:])` name=`inner__as__@size`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[15];
                offset != kSkippedOffset) {
              *outputs.GetMutable15(offset) = ::arolla::DenseArrayShape{
                  static_cast<int64_t>(tmp_2.as().size())};
            }
          }();
          // protopath=`inner/bytes_cord` name=`inner__bytes_cord`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[16];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, bytes_cord))) {
                outputs.GetMutable16(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable16(offset);
              output->present = true;
              output->value = tmp_2.bytes_cord();
            }
          }();
          // protopath=`inner/bytes_string_view` name=`inner__bytes_string_view`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[17];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, bytes_string_view))) {
                outputs.GetMutable17(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable17(offset);
              output->present = true;
              output->value = tmp_2.bytes_string_view();
            }
          }();
          // protopath=`inner/count(inners2[:])` name=`inner__inners2__@size`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[18];
                offset != kSkippedOffset) {
              *outputs.GetMutable18(offset) = ::arolla::DenseArrayShape{
                  static_cast<int64_t>(tmp_2.inners2().size())};
            }
          }();
          // protopath=`inner/raw_bytes` name=`inner__raw_bytes`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[19];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, raw_bytes))) {
                outputs.GetMutable19(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable19(offset);
              output->present = true;
              output->value = tmp_2.raw_bytes();
            }
          }();
        }();
        // protopath=`inner` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[3]) {
            return;
          }
          const auto& tmp_3 = tmp_4;
          // protopath=`inner/str` name=`inner__str`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[20];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_3, str))) {
                outputs.GetMutable20(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable20(offset);
              output->present = true;
              output->value = tmp_3.str();
            }
          }();
          // protopath=`inner/str_cord` name=`inner__str_cord`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[21];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_3, str_cord))) {
                outputs.GetMutable21(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable21(offset);
              output->present = true;
              output->value = tmp_3.str_cord();
            }
          }();
          // protopath=`inner/str_string_view` name=`inner__str_string_view`
          [&]() {
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[22];
                offset != kSkippedOffset) {
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_3, str_string_view))) {
                outputs.GetMutable22(offset)->present = false;
                return;
              }
              auto* output = outputs.GetMutable22(offset);
              output->present = true;
              output->value = tmp_3.str_string_view();
            }
          }();
        }();
      }();
      // protopath=`count(inners[:])` name=`/inners/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[23];
            offset != kSkippedOffset) {
          *outputs.GetMutable23(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_6.inners().size())};
        }
      }();
      // protopath=`private` name=`/private`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[24];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_6, private_))) {
            outputs.GetMutable24(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable24(offset);
          output->present = true;
          output->value = tmp_6.private_();
        }
      }();
      // protopath=`proto3`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[5]) {
          return;
        }
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_6, proto3))) {
          SetAllOptionalMissed(
              *outputs.requested_inputs,
              outputs.frame,
              5);
          return;
        }
        const auto& tmp_5 = tmp_6.proto3();
        // protopath=`proto3/non_optional_i32` name=`/proto3/non_optional_i32`
        [&]() {
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[25];
              offset != kSkippedOffset) {
            if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_5, non_optional_i32))) {
              outputs.GetMutable25(offset)->present = false;
              return;
            }
            auto* output = outputs.GetMutable25(offset);
            output->present = true;
            output->value = tmp_5.non_optional_i32();
          }
        }();
        // protopath=`proto3/non_optional_i32` name=`proto3__non_optional_i32`
        [&]() {
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[26];
              offset != kSkippedOffset) {
            if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_5, non_optional_i32))) {
              outputs.GetMutable26(offset)->present = false;
              return;
            }
            auto* output = outputs.GetMutable26(offset);
            output->present = true;
            output->value = tmp_5.non_optional_i32();
          }
        }();
      }();
      // protopath=`raw_bytes` name=`/raw_bytes`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[27];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_6, raw_bytes))) {
            outputs.GetMutable27(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable27(offset);
          output->present = true;
          output->value = tmp_6.raw_bytes();
        }
      }();
      // protopath=`count(repeated_bools[:])` name=`/repeated_bools/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[28];
            offset != kSkippedOffset) {
          *outputs.GetMutable28(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_6.repeated_bools().size())};
        }
      }();
      // protopath=`count(repeated_doubles[:])` name=`/repeated_doubles/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[29];
            offset != kSkippedOffset) {
          *outputs.GetMutable29(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_6.repeated_doubles().size())};
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[7]) {
        return;
      }
      const auto& tmp_7 = tmp_16;
      // protopath=`count(repeated_enums[:])` name=`/repeated_enums/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[30];
            offset != kSkippedOffset) {
          *outputs.GetMutable30(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_7.repeated_enums().size())};
        }
      }();
      // protopath=`count(repeated_floats[:])` name=`/repeated_floats/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[31];
            offset != kSkippedOffset) {
          *outputs.GetMutable31(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_7.repeated_floats().size())};
        }
      }();
      // protopath=`count(repeated_int32s[:])` name=`/repeated_int32s/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[32];
            offset != kSkippedOffset) {
          *outputs.GetMutable32(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_7.repeated_int32s().size())};
        }
      }();
      // protopath=`count(repeated_int64s[:])` name=`/repeated_int64s/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[33];
            offset != kSkippedOffset) {
          *outputs.GetMutable33(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_7.repeated_int64s().size())};
        }
      }();
      // protopath=`count(repeated_raw_bytes[:])` name=`/repeated_raw_bytes/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[34];
            offset != kSkippedOffset) {
          *outputs.GetMutable34(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_7.repeated_raw_bytes().size())};
        }
      }();
      // protopath=`count(repeated_str[:])` name=`/repeated_str/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[35];
            offset != kSkippedOffset) {
          *outputs.GetMutable35(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_7.repeated_str().size())};
        }
      }();
      // protopath=`count(repeated_uint32s[:])` name=`/repeated_uint32s/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[36];
            offset != kSkippedOffset) {
          *outputs.GetMutable36(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_7.repeated_uint32s().size())};
        }
      }();
      // protopath=`count(repeated_uint64s[:])` name=`/repeated_uint64s/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[37];
            offset != kSkippedOffset) {
          *outputs.GetMutable37(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_7.repeated_uint64s().size())};
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[8]) {
        return;
      }
      const auto& tmp_8 = tmp_16;
      // protopath=`str` name=`/str`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[38];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_8, str))) {
            outputs.GetMutable38(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable38(offset);
          output->present = true;
          output->value = tmp_8.str();
        }
      }();
      // protopath=`x` name=`/x`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[39];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_8, x))) {
            outputs.GetMutable39(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable39(offset);
          output->present = true;
          output->value = tmp_8.x();
        }
      }();
      // protopath=`x0` name=`/x0`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[40];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_8, x0))) {
            outputs.GetMutable40(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable40(offset);
          output->present = true;
          output->value = tmp_8.x0();
        }
      }();
      // protopath=`x1` name=`/x1`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[41];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_8, x1))) {
            outputs.GetMutable41(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable41(offset);
          output->present = true;
          output->value = tmp_8.x1();
        }
      }();
      // protopath=`x2` name=`/x2`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[42];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_8, x2))) {
            outputs.GetMutable42(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable42(offset);
          output->present = true;
          output->value = tmp_8.x2();
        }
      }();
      // protopath=`x3` name=`/x3`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[43];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_8, x3))) {
            outputs.GetMutable43(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable43(offset);
          output->present = true;
          output->value = tmp_8.x3();
        }
      }();
      // protopath=`x4` name=`/x4`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[44];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_8, x4))) {
            outputs.GetMutable44(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable44(offset);
          output->present = true;
          output->value = tmp_8.x4();
        }
      }();
      // protopath=`x5` name=`/x5`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[45];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_8, x5))) {
            outputs.GetMutable45(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable45(offset);
          output->present = true;
          output->value = tmp_8.x5();
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[9]) {
        return;
      }
      const auto& tmp_9 = tmp_16;
      // protopath=`x6` name=`/x6`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[46];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_9, x6))) {
            outputs.GetMutable46(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable46(offset);
          output->present = true;
          output->value = tmp_9.x6();
        }
      }();
      // protopath=`x7` name=`/x7`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[47];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_9, x7))) {
            outputs.GetMutable47(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable47(offset);
          output->present = true;
          output->value = tmp_9.x7();
        }
      }();
      // protopath=`x8` name=`/x8`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[48];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_9, x8))) {
            outputs.GetMutable48(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable48(offset);
          output->present = true;
          output->value = tmp_9.x8();
        }
      }();
      // protopath=`x9` name=`/x9`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[49];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_9, x9))) {
            outputs.GetMutable49(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable49(offset);
          output->present = true;
          output->value = tmp_9.x9();
        }
      }();
      // protopath=`x_bytes_cord` name=`/x_bytes_cord`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[50];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_9, x_bytes_cord))) {
            outputs.GetMutable50(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable50(offset);
          output->present = true;
          output->value = tmp_9.x_bytes_cord();
        }
      }();
      // protopath=`x_bytes_string_view` name=`/x_bytes_string_view`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[51];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_9, x_bytes_string_view))) {
            outputs.GetMutable51(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable51(offset);
          output->present = true;
          output->value = tmp_9.x_bytes_string_view();
        }
      }();
      // protopath=`x_double` name=`/x_double`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[52];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_9, x_double))) {
            outputs.GetMutable52(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable52(offset);
          output->present = true;
          output->value = tmp_9.x_double();
        }
      }();
      // protopath=`x_enum` name=`/x_enum`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[53];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_9, x_enum))) {
            outputs.GetMutable53(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable53(offset);
          output->present = true;
          output->value = tmp_9.x_enum();
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[10]) {
        return;
      }
      const auto& tmp_10 = tmp_16;
      // protopath=`x_fixed64` name=`/x_fixed64`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[54];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_10, x_fixed64))) {
            outputs.GetMutable54(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable54(offset);
          output->present = true;
          output->value = tmp_10.x_fixed64();
        }
      }();
      // protopath=`x_float` name=`/x_float`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[55];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_10, x_float))) {
            outputs.GetMutable55(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable55(offset);
          output->present = true;
          output->value = tmp_10.x_float();
        }
      }();
      // protopath=`x_int64` name=`/x_int64`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[56];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_10, x_int64))) {
            outputs.GetMutable56(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable56(offset);
          output->present = true;
          output->value = tmp_10.x_int64();
        }
      }();
      // protopath=`x_string_cord` name=`/x_string_cord`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[57];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_10, x_string_cord))) {
            outputs.GetMutable57(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable57(offset);
          output->present = true;
          output->value = tmp_10.x_string_cord();
        }
      }();
      // protopath=`x_string_string_view` name=`/x_string_string_view`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[58];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_10, x_string_string_view))) {
            outputs.GetMutable58(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable58(offset);
          output->present = true;
          output->value = tmp_10.x_string_string_view();
        }
      }();
      // protopath=`x_uint32` name=`/x_uint32`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[59];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_10, x_uint32))) {
            outputs.GetMutable59(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable59(offset);
          output->present = true;
          output->value = tmp_10.x_uint32();
        }
      }();
      // protopath=`x_uint64` name=`/x_uint64`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[60];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_10, x_uint64))) {
            outputs.GetMutable60(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable60(offset);
          output->present = true;
          output->value = tmp_10.x_uint64();
        }
      }();
      // protopath=`count(ys[:])` name=`/ys/@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[61];
            offset != kSkippedOffset) {
          *outputs.GetMutable61(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_10.ys().size())};
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[11]) {
        return;
      }
      const auto& tmp_11 = tmp_16;
      // protopath=`BrOkEn_CaSe` name=`BrOkEn_CaSe`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[62];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_11, broken_case))) {
            outputs.GetMutable62(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable62(offset);
          output->present = true;
          output->value = tmp_11.broken_case();
        }
      }();
      // protopath=`count(inners[:])` name=`inners__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[63];
            offset != kSkippedOffset) {
          *outputs.GetMutable63(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_11.inners().size())};
        }
      }();
      // protopath=`private` name=`private`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[64];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_11, private_))) {
            outputs.GetMutable64(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable64(offset);
          output->present = true;
          output->value = tmp_11.private_();
        }
      }();
      // protopath=`raw_bytes` name=`raw_bytes`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[65];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_11, raw_bytes))) {
            outputs.GetMutable65(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable65(offset);
          output->present = true;
          output->value = tmp_11.raw_bytes();
        }
      }();
      // protopath=`count(repeated_bools[:])` name=`repeated_bools__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[66];
            offset != kSkippedOffset) {
          *outputs.GetMutable66(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_11.repeated_bools().size())};
        }
      }();
      // protopath=`count(repeated_doubles[:])` name=`repeated_doubles__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[67];
            offset != kSkippedOffset) {
          *outputs.GetMutable67(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_11.repeated_doubles().size())};
        }
      }();
      // protopath=`count(repeated_enums[:])` name=`repeated_enums__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[68];
            offset != kSkippedOffset) {
          *outputs.GetMutable68(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_11.repeated_enums().size())};
        }
      }();
      // protopath=`count(repeated_floats[:])` name=`repeated_floats__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[69];
            offset != kSkippedOffset) {
          *outputs.GetMutable69(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_11.repeated_floats().size())};
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[12]) {
        return;
      }
      const auto& tmp_12 = tmp_16;
      // protopath=`count(repeated_int32s[:])` name=`repeated_int32s__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[70];
            offset != kSkippedOffset) {
          *outputs.GetMutable70(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_12.repeated_int32s().size())};
        }
      }();
      // protopath=`count(repeated_int64s[:])` name=`repeated_int64s__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[71];
            offset != kSkippedOffset) {
          *outputs.GetMutable71(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_12.repeated_int64s().size())};
        }
      }();
      // protopath=`count(repeated_raw_bytes[:])` name=`repeated_raw_bytes__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[72];
            offset != kSkippedOffset) {
          *outputs.GetMutable72(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_12.repeated_raw_bytes().size())};
        }
      }();
      // protopath=`count(repeated_str[:])` name=`repeated_str__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[73];
            offset != kSkippedOffset) {
          *outputs.GetMutable73(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_12.repeated_str().size())};
        }
      }();
      // protopath=`count(repeated_uint32s[:])` name=`repeated_uint32s__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[74];
            offset != kSkippedOffset) {
          *outputs.GetMutable74(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_12.repeated_uint32s().size())};
        }
      }();
      // protopath=`count(repeated_uint64s[:])` name=`repeated_uint64s__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[75];
            offset != kSkippedOffset) {
          *outputs.GetMutable75(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_12.repeated_uint64s().size())};
        }
      }();
      // protopath=`str` name=`str`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[76];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_12, str))) {
            outputs.GetMutable76(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable76(offset);
          output->present = true;
          output->value = tmp_12.str();
        }
      }();
      // protopath=`x` name=`x`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[77];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_12, x))) {
            outputs.GetMutable77(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable77(offset);
          output->present = true;
          output->value = tmp_12.x();
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[13]) {
        return;
      }
      const auto& tmp_13 = tmp_16;
      // protopath=`x0` name=`x0`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[78];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_13, x0))) {
            outputs.GetMutable78(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable78(offset);
          output->present = true;
          output->value = tmp_13.x0();
        }
      }();
      // protopath=`x1` name=`x1`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[79];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_13, x1))) {
            outputs.GetMutable79(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable79(offset);
          output->present = true;
          output->value = tmp_13.x1();
        }
      }();
      // protopath=`x2` name=`x2`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[80];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_13, x2))) {
            outputs.GetMutable80(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable80(offset);
          output->present = true;
          output->value = tmp_13.x2();
        }
      }();
      // protopath=`x3` name=`x3`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[81];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_13, x3))) {
            outputs.GetMutable81(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable81(offset);
          output->present = true;
          output->value = tmp_13.x3();
        }
      }();
      // protopath=`x4` name=`x4`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[82];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_13, x4))) {
            outputs.GetMutable82(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable82(offset);
          output->present = true;
          output->value = tmp_13.x4();
        }
      }();
      // protopath=`x5` name=`x5`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[83];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_13, x5))) {
            outputs.GetMutable83(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable83(offset);
          output->present = true;
          output->value = tmp_13.x5();
        }
      }();
      // protopath=`x6` name=`x6`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[84];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_13, x6))) {
            outputs.GetMutable84(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable84(offset);
          output->present = true;
          output->value = tmp_13.x6();
        }
      }();
      // protopath=`x7` name=`x7`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[85];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_13, x7))) {
            outputs.GetMutable85(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable85(offset);
          output->present = true;
          output->value = tmp_13.x7();
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[14]) {
        return;
      }
      const auto& tmp_14 = tmp_16;
      // protopath=`x8` name=`x8`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[86];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_14, x8))) {
            outputs.GetMutable86(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable86(offset);
          output->present = true;
          output->value = tmp_14.x8();
        }
      }();
      // protopath=`x9` name=`x9`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[87];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_14, x9))) {
            outputs.GetMutable87(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable87(offset);
          output->present = true;
          output->value = tmp_14.x9();
        }
      }();
      // protopath=`x_bytes_cord` name=`x_bytes_cord`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[88];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_14, x_bytes_cord))) {
            outputs.GetMutable88(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable88(offset);
          output->present = true;
          output->value = tmp_14.x_bytes_cord();
        }
      }();
      // protopath=`x_bytes_string_view` name=`x_bytes_string_view`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[89];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_14, x_bytes_string_view))) {
            outputs.GetMutable89(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable89(offset);
          output->present = true;
          output->value = tmp_14.x_bytes_string_view();
        }
      }();
      // protopath=`x_double` name=`x_double`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[90];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_14, x_double))) {
            outputs.GetMutable90(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable90(offset);
          output->present = true;
          output->value = tmp_14.x_double();
        }
      }();
      // protopath=`x_enum` name=`x_enum`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[91];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_14, x_enum))) {
            outputs.GetMutable91(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable91(offset);
          output->present = true;
          output->value = tmp_14.x_enum();
        }
      }();
      // protopath=`x_fixed64` name=`x_fixed64`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[92];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_14, x_fixed64))) {
            outputs.GetMutable92(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable92(offset);
          output->present = true;
          output->value = tmp_14.x_fixed64();
        }
      }();
      // protopath=`x_float` name=`x_float`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[93];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_14, x_float))) {
            outputs.GetMutable93(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable93(offset);
          output->present = true;
          output->value = tmp_14.x_float();
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[15]) {
        return;
      }
      const auto& tmp_15 = tmp_16;
      // protopath=`x_int64` name=`x_int64`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[94];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, x_int64))) {
            outputs.GetMutable94(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable94(offset);
          output->present = true;
          output->value = tmp_15.x_int64();
        }
      }();
      // protopath=`x_string_cord` name=`x_string_cord`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[95];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, x_string_cord))) {
            outputs.GetMutable95(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable95(offset);
          output->present = true;
          output->value = tmp_15.x_string_cord();
        }
      }();
      // protopath=`x_string_string_view` name=`x_string_string_view`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[96];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, x_string_string_view))) {
            outputs.GetMutable96(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable96(offset);
          output->present = true;
          output->value = tmp_15.x_string_string_view();
        }
      }();
      // protopath=`x_uint32` name=`x_uint32`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[97];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, x_uint32))) {
            outputs.GetMutable97(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable97(offset);
          output->present = true;
          output->value = tmp_15.x_uint32();
        }
      }();
      // protopath=`x_uint64` name=`x_uint64`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[98];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_15, x_uint64))) {
            outputs.GetMutable98(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable98(offset);
          output->present = true;
          output->value = tmp_15.x_uint64();
        }
      }();
      // protopath=`count(ys[:])` name=`ys__@size`
      [&]() {
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[99];
            offset != kSkippedOffset) {
          *outputs.GetMutable99(offset) = ::arolla::DenseArrayShape{
              static_cast<int64_t>(tmp_15.ys().size())};
        }
      }();
    }();
  }
};

// InputLoader for all single value protopathes.
class Loader final : public ::arolla::StaticInputLoader<Input> {
 public:
  Loader()
    : ::arolla::StaticInputLoader<Input>(
        // use special builder to reduce binary size and stack pressure
        []() {
          NamedTypesBuilder builder;
          builder.Add(
              R"RL_CODEGEN_DELIM(/BrOkEn_CaSe)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_0>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/a)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_1>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/as/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_2>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/bytes_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_3>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/bytes_string_view)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_4>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/inner2/z)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_5>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/inner2/zs/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_6>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__inner2__z)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_7>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__inner2__zs__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_8>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/inners2/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_9>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/raw_bytes)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_10>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/str)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_11>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/str_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_12>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inner/str_string_view)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_13>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__a)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_14>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__as__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_15>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__bytes_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_16>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__bytes_string_view)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_17>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__inners2__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_18>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__raw_bytes)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_19>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__str)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_20>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__str_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_21>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inner__str_string_view)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_22>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/inners/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_23>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/private)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_24>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/proto3/non_optional_i32)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_25>());
          builder.Add(
              R"RL_CODEGEN_DELIM(proto3__non_optional_i32)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_26>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/raw_bytes)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_27>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_bools/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_28>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_doubles/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_29>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_enums/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_30>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_floats/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_31>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_int32s/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_32>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_int64s/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_33>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_raw_bytes/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_34>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_str/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_35>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_uint32s/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_36>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/repeated_uint64s/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_37>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/str)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_38>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_39>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x0)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_40>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x1)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_41>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x2)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_42>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x3)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_43>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x4)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_44>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x5)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_45>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x6)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_46>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x7)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_47>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x8)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_48>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x9)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_49>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_bytes_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_50>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_bytes_string_view)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_51>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_double)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_52>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_enum)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_53>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_fixed64)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_54>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_float)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_55>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_int64)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_56>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_string_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_57>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_string_string_view)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_58>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_uint32)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_59>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/x_uint64)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_60>());
          builder.Add(
              R"RL_CODEGEN_DELIM(/ys/@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_61>());
          builder.Add(
              R"RL_CODEGEN_DELIM(BrOkEn_CaSe)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_62>());
          builder.Add(
              R"RL_CODEGEN_DELIM(inners__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_63>());
          builder.Add(
              R"RL_CODEGEN_DELIM(private)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_64>());
          builder.Add(
              R"RL_CODEGEN_DELIM(raw_bytes)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_65>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_bools__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_66>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_doubles__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_67>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_enums__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_68>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_floats__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_69>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_int32s__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_70>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_int64s__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_71>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_raw_bytes__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_72>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_str__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_73>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_uint32s__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_74>());
          builder.Add(
              R"RL_CODEGEN_DELIM(repeated_uint64s__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_75>());
          builder.Add(
              R"RL_CODEGEN_DELIM(str)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_76>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_77>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x0)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_78>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x1)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_79>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x2)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_80>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x3)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_81>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x4)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_82>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x5)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_83>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x6)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_84>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x7)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_85>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x8)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_86>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x9)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_87>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_bytes_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_88>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_bytes_string_view)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_89>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_double)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_90>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_enum)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_91>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_fixed64)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_92>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_float)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_93>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_int64)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_94>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_string_cord)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_95>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_string_string_view)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_96>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_uint32)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_97>());
          builder.Add(
              R"RL_CODEGEN_DELIM(x_uint64)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_98>());
          builder.Add(
              R"RL_CODEGEN_DELIM(ys__@size)RL_CODEGEN_DELIM",
              ::arolla::GetQType<ResultType_99>());
          return std::move(builder).Build();
        }()) {}

 private:
  StatusOr<BoundInputLoader<Input>> BindImpl(
      const absl::flat_hash_map<std::string, TypedSlot>& output_slots)
      const final {
    ASSIGN_OR_RETURN(auto optional_slots,
                     ::arolla::MaybeFindSlotsAndVerifyTypes(
                         types_in_order(), output_slots));
    // Allocate on heap to reduce stack pressure.
    auto inputs = std::make_unique<HierarchicalSingleValueRequestedInputs>();
    auto tree = []() {
      std::vector<std::vector<size_t>> tree(117);
      tree[9] = {5,6,7,8};
      tree[13] = {1,2,3,4,9,10,11,12};
      tree[22] = {14,15,16,17,18,19,20,21};
      tree[26] = {23,24,25};
      tree[27] = {13,22,26};
      tree[32] = {30,31};
      tree[36] = {0,27,28,29,32,33,34,35};
      tree[45] = {37,38,39,40,41,42,43,44};
      tree[54] = {46,47,48,49,50,51,52,53};
      tree[63] = {55,56,57,58,59,60,61,62};
      tree[72] = {64,65,66,67,68,69,70,71};
      tree[81] = {73,74,75,76,77,78,79,80};
      tree[90] = {82,83,84,85,86,87,88,89};
      tree[99] = {91,92,93,94,95,96,97,98};
      tree[108] = {100,101,102,103,104,105,106,107};
      tree[115] = {109,110,111,112,113,114};
      tree[116] = {36,45,54,63,72,81,90,99,108,115};
      return tree;
    }();
    CreateHierarchicalSingleValueRequestedInputs(
      optional_slots,
      /*size_leaves=*/{ 2, 6, 8, 9, 15, 18, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 99 },
      tree,
      inputs.get());
    return BoundInputLoader<Input>([inputs=std::move(*inputs)](
        const Input& input, FramePtr frame, RawBufferFactory*) {
      OutputProvider output_getter{&inputs, frame};
      SlotSetter slot_setter;
      slot_setter.CollectResults(input, output_getter);
      return OkStatus();
    });
  }
};

}  // namespace single_value_protopath

namespace multi_value_protopath {

using ::arolla::codegen::io::kSkippedOffset;
using ::arolla::codegen::io::NamedTypesBuilder;

// In this namespace protopath inputs with `DenseArray` are being loaded.

using HierarchicalMultiValueRequestedInputs =
    ::arolla::codegen::io::HierarchicalMultiValueRequestedInputsData<
        /*kLeafCount=*/64,
        /*kNodeCount=*/77>;

// Provides access to the output pointers for each leaf.
class OutputProvider {
 public:
  const HierarchicalMultiValueRequestedInputs* requested_inputs;
  FramePtr frame;

 public:

  // protopath=`inner/as[:]` name=`/inner/as`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable0(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().as(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[0],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inner2/zs[:]` name=`/inner/inner2/zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable1(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().inner2().zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[1],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inner2/zs[:]` name=`inner__inner2__zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable2(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().inner2().zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[2],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inners2[:]/z` name=`/inner/inners2/z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable3(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().inners2(0).z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[3],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable4(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().inners2(0).zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[4],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inners2[:]/count(zs[:])` name=`/inner/inners2/zs/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable5(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[5],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inners2[:]/z` name=`inner__inners2__z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable6(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().inners2(0).z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[6],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inners2[:]/zs[:]` name=`inner__inners2__zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable7(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().inners2(0).zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[7],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/inners2[:]/count(zs[:])` name=`inner__inners2__zs__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable8(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[8],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inner/as[:]` name=`inner__as`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable9(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inner().as(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[9],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/a` name=`/inners/a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable10(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).a())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[10],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/as[:]` name=`/inners/as`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable11(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).as(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[11],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/count(as[:])` name=`/inners/as/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable12(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[12],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/bytes_cord` name=`/inners/bytes_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable13(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).bytes_cord())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[13],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/bytes_string_view` name=`/inners/bytes_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable14(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).bytes_string_view())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[14],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inner2/z` name=`/inners/inner2/z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable15(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inner2().z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[15],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable16(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inner2().zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[16],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inner2/count(zs[:])` name=`/inners/inner2/zs/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable17(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[17],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inner2/z` name=`inners__inner2__z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable18(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inner2().z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[18],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inner2/zs[:]` name=`inners__inner2__zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable19(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inner2().zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[19],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inner2/count(zs[:])` name=`inners__inner2__zs__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable20(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[20],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/count(inners2[:])` name=`/inners/inners2/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable21(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[21],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inners2[:]/z` name=`/inners/inners2/z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable22(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inners2(0).z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[22],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable23(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inners2(0).zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[23],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inners2[:]/count(zs[:])` name=`/inners/inners2/zs/@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable24(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[24],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inners2[:]/z` name=`inners__inners2__z`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable25(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inners2(0).z())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[25],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inners2[:]/zs[:]` name=`inners__inners2__zs`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable26(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inners2(0).zs(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[26],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/inners2[:]/count(zs[:])` name=`inners__inners2__zs__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable27(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[27],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/raw_bytes` name=`/inners/raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable28(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).raw_bytes())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[28],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/str` name=`/inners/str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable29(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[29],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/str_cord` name=`/inners/str_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable30(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[30],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/str_string_view` name=`/inners/str_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable31(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[31],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/a` name=`inners__a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable32(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).a())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[32],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/as[:]` name=`inners__as`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable33(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).as(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[33],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/count(as[:])` name=`inners__as__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable34(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[34],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/bytes_cord` name=`inners__bytes_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable35(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).bytes_cord())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[35],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/bytes_string_view` name=`inners__bytes_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable36(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).bytes_string_view())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[36],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/count(inners2[:])` name=`inners__inners2__@size`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable37(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::proto::arolla_size_t>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[37],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/raw_bytes` name=`inners__raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable38(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).raw_bytes())>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[38],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/str` name=`inners__str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable39(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[39],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/str_cord` name=`inners__str_cord`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable40(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[40],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`inners[:]/str_string_view` name=`inners__str_string_view`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable41(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[41],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_bools[:]` name=`/repeated_bools`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable42(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_bools(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[42],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_doubles[:]` name=`/repeated_doubles`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable43(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_doubles(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[43],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_enums[:]` name=`/repeated_enums`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable44(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_enums(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[44],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_floats[:]` name=`/repeated_floats`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable45(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_floats(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[45],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_int32s[:]` name=`/repeated_int32s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable46(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_int32s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[46],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_int64s[:]` name=`/repeated_int64s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable47(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_int64s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[47],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable48(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_raw_bytes(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[48],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_str[:]` name=`/repeated_str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable49(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Text>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[49],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_uint32s[:]` name=`/repeated_uint32s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable50(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_uint32s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[50],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_uint64s[:]` name=`/repeated_uint64s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable51(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_uint64s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[51],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`ys[:]` name=`/ys`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable52(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().ys(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[52],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_bools[:]` name=`repeated_bools`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable53(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_bools(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[53],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_doubles[:]` name=`repeated_doubles`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable54(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_doubles(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[54],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_enums[:]` name=`repeated_enums`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable55(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_enums(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[55],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_floats[:]` name=`repeated_floats`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable56(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_floats(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[56],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_int32s[:]` name=`repeated_int32s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable57(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_int32s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[57],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_int64s[:]` name=`repeated_int64s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable58(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_int64s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[58],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_raw_bytes[:]` name=`repeated_raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable59(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_raw_bytes(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[59],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_str[:]` name=`repeated_str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable60(size_t offset) const {
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<
        ::arolla::Bytes>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[60],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_uint32s[:]` name=`repeated_uint32s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable61(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_uint32s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[61],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`repeated_uint64s[:]` name=`repeated_uint64s`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable62(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().repeated_uint64s(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[62],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

  // protopath=`ys[:]` name=`ys`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable63(size_t offset) const {
    using value_type = std::decay_t<decltype(
        std::declval<const Input&>().ys(0))>;
    using result_type = HierarchicalMultiValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(
        requested_inputs->common.leaf_frame_offsets[63],
        kSkippedOffset);
    return frame.GetMutable(
      ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(
          offset));
  }

};


using ResultType_0 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable0(0))>>;
using ResultType_1 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable1(0))>>;
using ResultType_2 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable2(0))>>;
using ResultType_3 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable3(0))>>;
using ResultType_4 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable4(0))>>;
using ResultType_5 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable5(0))>>;
using ResultType_6 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable6(0))>>;
using ResultType_7 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable7(0))>>;
using ResultType_8 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable8(0))>>;
using ResultType_9 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable9(0))>>;
using ResultType_10 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable10(0))>>;
using ResultType_11 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable11(0))>>;
using ResultType_12 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable12(0))>>;
using ResultType_13 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable13(0))>>;
using ResultType_14 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable14(0))>>;
using ResultType_15 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable15(0))>>;
using ResultType_16 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable16(0))>>;
using ResultType_17 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable17(0))>>;
using ResultType_18 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable18(0))>>;
using ResultType_19 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable19(0))>>;
using ResultType_20 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable20(0))>>;
using ResultType_21 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable21(0))>>;
using ResultType_22 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable22(0))>>;
using ResultType_23 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable23(0))>>;
using ResultType_24 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable24(0))>>;
using ResultType_25 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable25(0))>>;
using ResultType_26 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable26(0))>>;
using ResultType_27 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable27(0))>>;
using ResultType_28 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable28(0))>>;
using ResultType_29 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable29(0))>>;
using ResultType_30 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable30(0))>>;
using ResultType_31 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable31(0))>>;
using ResultType_32 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable32(0))>>;
using ResultType_33 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable33(0))>>;
using ResultType_34 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable34(0))>>;
using ResultType_35 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable35(0))>>;
using ResultType_36 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable36(0))>>;
using ResultType_37 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable37(0))>>;
using ResultType_38 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable38(0))>>;
using ResultType_39 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable39(0))>>;
using ResultType_40 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable40(0))>>;
using ResultType_41 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable41(0))>>;
using ResultType_42 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable42(0))>>;
using ResultType_43 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable43(0))>>;
using ResultType_44 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable44(0))>>;
using ResultType_45 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable45(0))>>;
using ResultType_46 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable46(0))>>;
using ResultType_47 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable47(0))>>;
using ResultType_48 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable48(0))>>;
using ResultType_49 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable49(0))>>;
using ResultType_50 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable50(0))>>;
using ResultType_51 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable51(0))>>;
using ResultType_52 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable52(0))>>;
using ResultType_53 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable53(0))>>;
using ResultType_54 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable54(0))>>;
using ResultType_55 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable55(0))>>;
using ResultType_56 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable56(0))>>;
using ResultType_57 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable57(0))>>;
using ResultType_58 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable58(0))>>;
using ResultType_59 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable59(0))>>;
using ResultType_60 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable60(0))>>;
using ResultType_61 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable61(0))>>;
using ResultType_62 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable62(0))>>;
using ResultType_63 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable63(0))>>;

// Traverse the proto and put results for all DenaseArray values to the frame.
class SlotSetter {
 public:
  // Collects all intermediate results and sizes we need for further individual
  // DenseArray creation.
  // Fills `single_` and `intermediate*_`.
  void CollectIntermediateResults(
     const Input& input,
     const HierarchicalMultiValueRequestedInputs& requested_inputs) {
   const Input& tmp_12 = input;

    // protopath=`ROOT` fictive
    [&]() {
      if (!requested_inputs.common.node_requested[9]) {
        return;
      }
      const auto& tmp_9 = tmp_12;
      // protopath=`inner`
      [&]() {
        if (!requested_inputs.common.node_requested[2]) {
          return;
        }
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_9, inner))) {
          return;
        }
        const auto& tmp_2 = tmp_9.inner();
        single_.intermediate2 = &tmp_2;
        // protopath=`inner/inner2`
        [&]() {
          if (!requested_inputs.common.node_requested[0]) {
            return;
          }
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, inner2))) {
            return;
          }
          const auto& tmp_0 = tmp_2.inner2();
          single_.intermediate0 = &tmp_0;
        }();
        // protopath=`inner/inners2[:]`
        [&]() {
          if (!requested_inputs.common.node_requested[1]) {
            return;
          }
          multi_.intermediate1.reserve(tmp_2.inners2().size());

          for (const auto& tmp_1 : tmp_2.inners2()) {
            multi_.intermediate1.push_back(nullptr);
            multi_.intermediate1.back() = &tmp_1;
            // protopath=`inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
            single_.total_size_5 +=
                tmp_1.zs().size();
            // protopath=`inner/inners2[:]/zs[:]` name=`inner__inners2__zs`
            single_.total_size_8 +=
                tmp_1.zs().size();
          }
        }();
      }();
      // protopath=`inners[:]`
      [&]() {
        if (!requested_inputs.common.node_requested[8]) {
          return;
        }
        multi_.intermediate8.reserve(tmp_9.inners().size());
        if (requested_inputs.common.node_requested[3]) {
          multi_.intermediate3.reserve(tmp_9.inners().size());
        }

        for (const auto& tmp_8 : tmp_9.inners()) {
          multi_.intermediate8.push_back(nullptr);
          if (requested_inputs.common.node_requested[3]) {
            multi_.intermediate3.push_back(nullptr);
          }
          multi_.intermediate8.back() = &tmp_8;
          // protopath=`inners[:]` fictive
          [&]() {
            if (!requested_inputs.common.node_requested[5]) {
              return;
            }
            const auto& tmp_5 = tmp_8;
            // protopath=`inners[:]/as[:]` name=`/inners/as`
            single_.total_size_14 +=
                tmp_5.as().size();
            // protopath=`inners[:]/inner2`
            [&]() {
              if (!requested_inputs.common.node_requested[3]) {
                return;
              }
              if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_5, inner2))) {
                return;
              }
              const auto& tmp_3 = tmp_5.inner2();
              multi_.intermediate3.back() = &tmp_3;
              // protopath=`inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
              single_.total_size_19 +=
                  tmp_3.zs().size();
              // protopath=`inners[:]/inner2/zs[:]` name=`inners__inner2__zs`
              single_.total_size_22 +=
                  tmp_3.zs().size();
            }();
            // protopath=`inners[:]/inners2[:]`
            [&]() {
              if (!requested_inputs.common.node_requested[4]) {
                return;
              }

              for (const auto& tmp_4 : tmp_5.inners2()) {
                multi_.intermediate4.push_back(nullptr);
                multi_.intermediate4.back() = &tmp_4;
                // protopath=`inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
                single_.total_size_27 +=
                    tmp_4.zs().size();
                // protopath=`inners[:]/inners2[:]/zs[:]` name=`inners__inners2__zs`
                single_.total_size_30 +=
                    tmp_4.zs().size();
              }
            }();
          }();
          // protopath=`inners[:]` fictive
          [&]() {
            if (!requested_inputs.common.node_requested[6]) {
              return;
            }
            const auto& tmp_6 = tmp_8;
            // protopath=`inners[:]/as[:]` name=`inners__as`
            single_.total_size_39 +=
                tmp_6.as().size();
          }();
        }
      }();
    }();


  }
  // Returns total size of the array for
  // protopath=`inner/as[:]` name=`/inner/as`
  size_t TotalSize0() const {
    const auto* start_ptr = single_.intermediate2;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).as().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/as[:]` name=`/inner/as`
  void CollectResultFromIntermediate0(
      ResultType_0* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize0();
    using ValueT = ResultType_0::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate2;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_12 = *intermediate_ptr;

      for (const auto& tmp_0 : tmp_12.as()) {
        inserter.Add(tmp_0);
      }
    }

    *output = ResultType_0{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inner/inner2/zs[:]` name=`/inner/inner2/zs`
  size_t TotalSize1() const {
    const auto* start_ptr = single_.intermediate0;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).zs().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/inner2/zs[:]` name=`/inner/inner2/zs`
  void CollectResultFromIntermediate1(
      ResultType_1* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize1();
    using ValueT = ResultType_1::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner/inner2`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate0;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_3 = *intermediate_ptr;

      for (const auto& tmp_1 : tmp_3.zs()) {
        inserter.Add(tmp_1);
      }
    }

    *output = ResultType_1{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inner/inner2/zs[:]` name=`inner__inner2__zs`
  size_t TotalSize2() const {
    const auto* start_ptr = single_.intermediate0;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).zs().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/inner2/zs[:]` name=`inner__inner2__zs`
  void CollectResultFromIntermediate2(
      ResultType_2* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize2();
    using ValueT = ResultType_2::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner/inner2`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate0;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_3 = *intermediate_ptr;

      for (const auto& tmp_2 : tmp_3.zs()) {
        inserter.Add(tmp_2);
      }
    }

    *output = ResultType_2{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inner/inners2[:]/z` name=`/inner/inners2/z`
  size_t TotalSize3() const {
    return multi_.intermediate1.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/inners2[:]/z` name=`/inner/inners2/z`
  void CollectResultFromIntermediate3(
      ResultType_3* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize3();
    using ValueT = ResultType_3::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate1) {
      const auto& tmp_10 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_10, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_4 = tmp_10.z();
      id++;
      inserter.Add(tmp_4);
    }

    *output = ResultType_3{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
  size_t TotalSize4() const {
    return single_.total_size_5;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
  void CollectResultFromIntermediate4(
      ResultType_4* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize4();
    using ValueT = ResultType_4::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate1) {
      const auto& tmp_10 = *intermediate_ptr;

      for (const auto& tmp_5 : tmp_10.zs()) {
        inserter.Add(tmp_5);
      }
    }

    *output = ResultType_4{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inner/inners2[:]/count(zs[:])` name=`/inner/inners2/zs/@size`
  size_t TotalSize5() const {
    return multi_.intermediate1.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/inners2[:]/count(zs[:])` name=`/inner/inners2/zs/@size`
  void CollectResultFromIntermediate5(
      ResultType_5* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize5();
    using ValueT = ResultType_5::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate1) {
      const auto& tmp_10 = *intermediate_ptr;
      const auto& tmp_6 = tmp_10.zs().size();
      inserter.Add(tmp_6);
    }

    *output = ResultType_5{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inner/inners2[:]/z` name=`inner__inners2__z`
  size_t TotalSize6() const {
    return multi_.intermediate1.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/inners2[:]/z` name=`inner__inners2__z`
  void CollectResultFromIntermediate6(
      ResultType_6* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize6();
    using ValueT = ResultType_6::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate1) {
      const auto& tmp_10 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_10, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_7 = tmp_10.z();
      id++;
      inserter.Add(tmp_7);
    }

    *output = ResultType_6{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inner/inners2[:]/zs[:]` name=`inner__inners2__zs`
  size_t TotalSize7() const {
    return single_.total_size_8;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/inners2[:]/zs[:]` name=`inner__inners2__zs`
  void CollectResultFromIntermediate7(
      ResultType_7* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize7();
    using ValueT = ResultType_7::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate1) {
      const auto& tmp_10 = *intermediate_ptr;

      for (const auto& tmp_8 : tmp_10.zs()) {
        inserter.Add(tmp_8);
      }
    }

    *output = ResultType_7{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inner/inners2[:]/count(zs[:])` name=`inner__inners2__zs__@size`
  size_t TotalSize8() const {
    return multi_.intermediate1.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/inners2[:]/count(zs[:])` name=`inner__inners2__zs__@size`
  void CollectResultFromIntermediate8(
      ResultType_8* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize8();
    using ValueT = ResultType_8::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate1) {
      const auto& tmp_10 = *intermediate_ptr;
      const auto& tmp_9 = tmp_10.zs().size();
      inserter.Add(tmp_9);
    }

    *output = ResultType_8{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inner/as[:]` name=`inner__as`
  size_t TotalSize9() const {
    const auto* start_ptr = single_.intermediate2;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).as().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inner/as[:]` name=`inner__as`
  void CollectResultFromIntermediate9(
      ResultType_9* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize9();
    using ValueT = ResultType_9::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inner`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate2;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_12 = *intermediate_ptr;

      for (const auto& tmp_11 : tmp_12.as()) {
        inserter.Add(tmp_11);
      }
    }

    *output = ResultType_9{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/a` name=`/inners/a`
  size_t TotalSize10() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/a` name=`/inners/a`
  void CollectResultFromIntermediate10(
      ResultType_10* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize10();
    using ValueT = ResultType_10::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_33 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_33, a))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_13 = tmp_33.a();
      id++;
      inserter.Add(tmp_13);
    }

    *output = ResultType_10{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/as[:]` name=`/inners/as`
  size_t TotalSize11() const {
    return single_.total_size_14;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/as[:]` name=`/inners/as`
  void CollectResultFromIntermediate11(
      ResultType_11* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize11();
    using ValueT = ResultType_11::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_33 = tmp_50;


      for (const auto& tmp_14 : tmp_33.as()) {
        inserter.Add(tmp_14);
      }
    }

    *output = ResultType_11{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/count(as[:])` name=`/inners/as/@size`
  size_t TotalSize12() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/count(as[:])` name=`/inners/as/@size`
  void CollectResultFromIntermediate12(
      ResultType_12* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize12();
    using ValueT = ResultType_12::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_33 = tmp_50;

      const auto& tmp_15 = tmp_33.as().size();
      inserter.Add(tmp_15);
    }

    *output = ResultType_12{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/bytes_cord` name=`/inners/bytes_cord`
  size_t TotalSize13() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/bytes_cord` name=`/inners/bytes_cord`
  void CollectResultFromIntermediate13(
      ResultType_13* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize13();
    using ValueT = ResultType_13::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_33 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_33, bytes_cord))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_16 = tmp_33.bytes_cord();
      id++;
      inserter.Add(tmp_16);
    }

    *output = ResultType_13{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/bytes_string_view` name=`/inners/bytes_string_view`
  size_t TotalSize14() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/bytes_string_view` name=`/inners/bytes_string_view`
  void CollectResultFromIntermediate14(
      ResultType_14* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize14();
    using ValueT = ResultType_14::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_33 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_33, bytes_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_17 = tmp_33.bytes_string_view();
      id++;
      inserter.Add(tmp_17);
    }

    *output = ResultType_14{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inner2/z` name=`/inners/inner2/z`
  size_t TotalSize15() const {
    return multi_.intermediate3.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inner2/z` name=`/inners/inner2/z`
  void CollectResultFromIntermediate15(
      ResultType_15* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize15();
    using ValueT = ResultType_15::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inner2`
    for (const auto* intermediate_ptr : multi_.intermediate3) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_24 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_24, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_18 = tmp_24.z();
      id++;
      inserter.Add(tmp_18);
    }

    *output = ResultType_15{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
  size_t TotalSize16() const {
    return single_.total_size_19;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
  void CollectResultFromIntermediate16(
      ResultType_16* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize16();
    using ValueT = ResultType_16::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inner2`
    for (const auto* intermediate_ptr : multi_.intermediate3) {
      if (intermediate_ptr == nullptr) {
        continue;
      }
      const auto& tmp_24 = *intermediate_ptr;

      for (const auto& tmp_19 : tmp_24.zs()) {
        id++;
        inserter.Add(tmp_19);
      }
    }

    *output = ResultType_16{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inner2/count(zs[:])` name=`/inners/inner2/zs/@size`
  size_t TotalSize17() const {
    return multi_.intermediate3.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inner2/count(zs[:])` name=`/inners/inner2/zs/@size`
  void CollectResultFromIntermediate17(
      ResultType_17* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize17();
    using ValueT = ResultType_17::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inner2`
    for (const auto* intermediate_ptr : multi_.intermediate3) {
      if (intermediate_ptr == nullptr) {
        inserter.Add(0);
        continue;
      }
      const auto& tmp_24 = *intermediate_ptr;
      const auto& tmp_20 = tmp_24.zs().size();
      inserter.Add(tmp_20);
    }

    *output = ResultType_17{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inner2/z` name=`inners__inner2__z`
  size_t TotalSize18() const {
    return multi_.intermediate3.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inner2/z` name=`inners__inner2__z`
  void CollectResultFromIntermediate18(
      ResultType_18* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize18();
    using ValueT = ResultType_18::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inner2`
    for (const auto* intermediate_ptr : multi_.intermediate3) {
      if (intermediate_ptr == nullptr) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_24 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_24, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_21 = tmp_24.z();
      id++;
      inserter.Add(tmp_21);
    }

    *output = ResultType_18{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inner2/zs[:]` name=`inners__inner2__zs`
  size_t TotalSize19() const {
    return single_.total_size_22;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inner2/zs[:]` name=`inners__inner2__zs`
  void CollectResultFromIntermediate19(
      ResultType_19* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize19();
    using ValueT = ResultType_19::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inner2`
    for (const auto* intermediate_ptr : multi_.intermediate3) {
      if (intermediate_ptr == nullptr) {
        continue;
      }
      const auto& tmp_24 = *intermediate_ptr;

      for (const auto& tmp_22 : tmp_24.zs()) {
        id++;
        inserter.Add(tmp_22);
      }
    }

    *output = ResultType_19{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inner2/count(zs[:])` name=`inners__inner2__zs__@size`
  size_t TotalSize20() const {
    return multi_.intermediate3.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inner2/count(zs[:])` name=`inners__inner2__zs__@size`
  void CollectResultFromIntermediate20(
      ResultType_20* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize20();
    using ValueT = ResultType_20::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inner2`
    for (const auto* intermediate_ptr : multi_.intermediate3) {
      if (intermediate_ptr == nullptr) {
        inserter.Add(0);
        continue;
      }
      const auto& tmp_24 = *intermediate_ptr;
      const auto& tmp_23 = tmp_24.zs().size();
      inserter.Add(tmp_23);
    }

    *output = ResultType_20{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/count(inners2[:])` name=`/inners/inners2/@size`
  size_t TotalSize21() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/count(inners2[:])` name=`/inners/inners2/@size`
  void CollectResultFromIntermediate21(
      ResultType_21* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize21();
    using ValueT = ResultType_21::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_33 = tmp_50;

      const auto& tmp_25 = tmp_33.inners2().size();
      inserter.Add(tmp_25);
    }

    *output = ResultType_21{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inners2[:]/z` name=`/inners/inners2/z`
  size_t TotalSize22() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inners2[:]/z` name=`/inners/inners2/z`
  void CollectResultFromIntermediate22(
      ResultType_22* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize22();
    using ValueT = ResultType_22::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      const auto& tmp_32 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_32, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_26 = tmp_32.z();
      id++;
      inserter.Add(tmp_26);
    }

    *output = ResultType_22{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
  size_t TotalSize23() const {
    return single_.total_size_27;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
  void CollectResultFromIntermediate23(
      ResultType_23* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize23();
    using ValueT = ResultType_23::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      const auto& tmp_32 = *intermediate_ptr;

      for (const auto& tmp_27 : tmp_32.zs()) {
        inserter.Add(tmp_27);
      }
    }

    *output = ResultType_23{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inners2[:]/count(zs[:])` name=`/inners/inners2/zs/@size`
  size_t TotalSize24() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inners2[:]/count(zs[:])` name=`/inners/inners2/zs/@size`
  void CollectResultFromIntermediate24(
      ResultType_24* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize24();
    using ValueT = ResultType_24::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      const auto& tmp_32 = *intermediate_ptr;
      const auto& tmp_28 = tmp_32.zs().size();
      inserter.Add(tmp_28);
    }

    *output = ResultType_24{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inners2[:]/z` name=`inners__inners2__z`
  size_t TotalSize25() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inners2[:]/z` name=`inners__inners2__z`
  void CollectResultFromIntermediate25(
      ResultType_25* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize25();
    using ValueT = ResultType_25::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      const auto& tmp_32 = *intermediate_ptr;
      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_32, z))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_29 = tmp_32.z();
      id++;
      inserter.Add(tmp_29);
    }

    *output = ResultType_25{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inners2[:]/zs[:]` name=`inners__inners2__zs`
  size_t TotalSize26() const {
    return single_.total_size_30;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inners2[:]/zs[:]` name=`inners__inners2__zs`
  void CollectResultFromIntermediate26(
      ResultType_26* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize26();
    using ValueT = ResultType_26::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      const auto& tmp_32 = *intermediate_ptr;

      for (const auto& tmp_30 : tmp_32.zs()) {
        inserter.Add(tmp_30);
      }
    }

    *output = ResultType_26{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/inners2[:]/count(zs[:])` name=`inners__inners2__zs__@size`
  size_t TotalSize27() const {
    return multi_.intermediate4.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/inners2[:]/count(zs[:])` name=`inners__inners2__zs__@size`
  void CollectResultFromIntermediate27(
      ResultType_27* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize27();
    using ValueT = ResultType_27::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]/inners2[:]`
    for (const auto* intermediate_ptr : multi_.intermediate4) {
      const auto& tmp_32 = *intermediate_ptr;
      const auto& tmp_31 = tmp_32.zs().size();
      inserter.Add(tmp_31);
    }

    *output = ResultType_27{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/raw_bytes` name=`/inners/raw_bytes`
  size_t TotalSize28() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/raw_bytes` name=`/inners/raw_bytes`
  void CollectResultFromIntermediate28(
      ResultType_28* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize28();
    using ValueT = ResultType_28::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_42 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_42, raw_bytes))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_34 = tmp_42.raw_bytes();
      id++;
      inserter.Add(tmp_34);
    }

    *output = ResultType_28{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/str` name=`/inners/str`
  size_t TotalSize29() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/str` name=`/inners/str`
  void CollectResultFromIntermediate29(
      ResultType_29* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize29();
    using ValueT = ResultType_29::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_42 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_42, str))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_35 = tmp_42.str();
      id++;
      inserter.Add(tmp_35);
    }

    *output = ResultType_29{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/str_cord` name=`/inners/str_cord`
  size_t TotalSize30() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/str_cord` name=`/inners/str_cord`
  void CollectResultFromIntermediate30(
      ResultType_30* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize30();
    using ValueT = ResultType_30::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_42 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_42, str_cord))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_36 = tmp_42.str_cord();
      id++;
      inserter.Add(tmp_36);
    }

    *output = ResultType_30{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/str_string_view` name=`/inners/str_string_view`
  size_t TotalSize31() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/str_string_view` name=`/inners/str_string_view`
  void CollectResultFromIntermediate31(
      ResultType_31* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize31();
    using ValueT = ResultType_31::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_42 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_42, str_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_37 = tmp_42.str_string_view();
      id++;
      inserter.Add(tmp_37);
    }

    *output = ResultType_31{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/a` name=`inners__a`
  size_t TotalSize32() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/a` name=`inners__a`
  void CollectResultFromIntermediate32(
      ResultType_32* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize32();
    using ValueT = ResultType_32::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_42 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_42, a))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_38 = tmp_42.a();
      id++;
      inserter.Add(tmp_38);
    }

    *output = ResultType_32{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/as[:]` name=`inners__as`
  size_t TotalSize33() const {
    return single_.total_size_39;
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/as[:]` name=`inners__as`
  void CollectResultFromIntermediate33(
      ResultType_33* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize33();
    using ValueT = ResultType_33::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_42 = tmp_50;


      for (const auto& tmp_39 : tmp_42.as()) {
        inserter.Add(tmp_39);
      }
    }

    *output = ResultType_33{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/count(as[:])` name=`inners__as__@size`
  size_t TotalSize34() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/count(as[:])` name=`inners__as__@size`
  void CollectResultFromIntermediate34(
      ResultType_34* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize34();
    using ValueT = ResultType_34::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_42 = tmp_50;

      const auto& tmp_40 = tmp_42.as().size();
      inserter.Add(tmp_40);
    }

    *output = ResultType_34{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/bytes_cord` name=`inners__bytes_cord`
  size_t TotalSize35() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/bytes_cord` name=`inners__bytes_cord`
  void CollectResultFromIntermediate35(
      ResultType_35* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize35();
    using ValueT = ResultType_35::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_42 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_42, bytes_cord))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_41 = tmp_42.bytes_cord();
      id++;
      inserter.Add(tmp_41);
    }

    *output = ResultType_35{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/bytes_string_view` name=`inners__bytes_string_view`
  size_t TotalSize36() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/bytes_string_view` name=`inners__bytes_string_view`
  void CollectResultFromIntermediate36(
      ResultType_36* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize36();
    using ValueT = ResultType_36::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_49 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_49, bytes_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_43 = tmp_49.bytes_string_view();
      id++;
      inserter.Add(tmp_43);
    }

    *output = ResultType_36{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/count(inners2[:])` name=`inners__inners2__@size`
  size_t TotalSize37() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/count(inners2[:])` name=`inners__inners2__@size`
  void CollectResultFromIntermediate37(
      ResultType_37* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize37();
    using ValueT = ResultType_37::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_49 = tmp_50;

      const auto& tmp_44 = tmp_49.inners2().size();
      inserter.Add(tmp_44);
    }

    *output = ResultType_37{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/raw_bytes` name=`inners__raw_bytes`
  size_t TotalSize38() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/raw_bytes` name=`inners__raw_bytes`
  void CollectResultFromIntermediate38(
      ResultType_38* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize38();
    using ValueT = ResultType_38::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_49 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_49, raw_bytes))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_45 = tmp_49.raw_bytes();
      id++;
      inserter.Add(tmp_45);
    }

    *output = ResultType_38{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/str` name=`inners__str`
  size_t TotalSize39() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/str` name=`inners__str`
  void CollectResultFromIntermediate39(
      ResultType_39* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize39();
    using ValueT = ResultType_39::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_49 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_49, str))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_46 = tmp_49.str();
      id++;
      inserter.Add(tmp_46);
    }

    *output = ResultType_39{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/str_cord` name=`inners__str_cord`
  size_t TotalSize40() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/str_cord` name=`inners__str_cord`
  void CollectResultFromIntermediate40(
      ResultType_40* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize40();
    using ValueT = ResultType_40::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_49 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_49, str_cord))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_47 = tmp_49.str_cord();
      id++;
      inserter.Add(tmp_47);
    }

    *output = ResultType_40{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`inners[:]/str_string_view` name=`inners__str_string_view`
  size_t TotalSize41() const {
    return multi_.intermediate8.size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`inners[:]/str_string_view` name=`inners__str_string_view`
  void CollectResultFromIntermediate41(
      ResultType_41* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize41();
    using ValueT = ResultType_41::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    int64_t id = 0;
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`inners[:]`
    for (const auto* intermediate_ptr : multi_.intermediate8) {
      const auto& tmp_50 = *intermediate_ptr;
      const auto& tmp_49 = tmp_50;

      if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_49, str_string_view))) {
        bitmap_bldr.AddMissed(id++); inserter.SkipN(1);
        continue;
      }
      const auto& tmp_48 = tmp_49.str_string_view();
      id++;
      inserter.Add(tmp_48);
    }

    *output = ResultType_41{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_bools[:]` name=`/repeated_bools`
  size_t TotalSize42() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_bools().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_bools[:]` name=`/repeated_bools`
  void CollectResultFromIntermediate42(
      ResultType_42* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize42();
    using ValueT = ResultType_42::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_57 = tmp_76;


      for (const auto& tmp_51 : tmp_57.repeated_bools()) {
        inserter.Add(tmp_51);
      }
    }

    *output = ResultType_42{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_doubles[:]` name=`/repeated_doubles`
  size_t TotalSize43() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_doubles().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_doubles[:]` name=`/repeated_doubles`
  void CollectResultFromIntermediate43(
      ResultType_43* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize43();
    using ValueT = ResultType_43::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_57 = tmp_76;


      for (const auto& tmp_52 : tmp_57.repeated_doubles()) {
        inserter.Add(tmp_52);
      }
    }

    *output = ResultType_43{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_enums[:]` name=`/repeated_enums`
  size_t TotalSize44() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_enums().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_enums[:]` name=`/repeated_enums`
  void CollectResultFromIntermediate44(
      ResultType_44* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize44();
    using ValueT = ResultType_44::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_57 = tmp_76;


      for (const auto& tmp_53 : tmp_57.repeated_enums()) {
        inserter.Add(tmp_53);
      }
    }

    *output = ResultType_44{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_floats[:]` name=`/repeated_floats`
  size_t TotalSize45() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_floats().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_floats[:]` name=`/repeated_floats`
  void CollectResultFromIntermediate45(
      ResultType_45* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize45();
    using ValueT = ResultType_45::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_57 = tmp_76;


      for (const auto& tmp_54 : tmp_57.repeated_floats()) {
        inserter.Add(tmp_54);
      }
    }

    *output = ResultType_45{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_int32s[:]` name=`/repeated_int32s`
  size_t TotalSize46() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_int32s().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_int32s[:]` name=`/repeated_int32s`
  void CollectResultFromIntermediate46(
      ResultType_46* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize46();
    using ValueT = ResultType_46::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_57 = tmp_76;


      for (const auto& tmp_55 : tmp_57.repeated_int32s()) {
        inserter.Add(tmp_55);
      }
    }

    *output = ResultType_46{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_int64s[:]` name=`/repeated_int64s`
  size_t TotalSize47() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_int64s().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_int64s[:]` name=`/repeated_int64s`
  void CollectResultFromIntermediate47(
      ResultType_47* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize47();
    using ValueT = ResultType_47::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_57 = tmp_76;


      for (const auto& tmp_56 : tmp_57.repeated_int64s()) {
        inserter.Add(tmp_56);
      }
    }

    *output = ResultType_47{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
  size_t TotalSize48() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_raw_bytes().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
  void CollectResultFromIntermediate48(
      ResultType_48* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize48();
    using ValueT = ResultType_48::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_66 = tmp_76;


      for (const auto& tmp_58 : tmp_66.repeated_raw_bytes()) {
        inserter.Add(tmp_58);
      }
    }

    *output = ResultType_48{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_str[:]` name=`/repeated_str`
  size_t TotalSize49() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_str().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_str[:]` name=`/repeated_str`
  void CollectResultFromIntermediate49(
      ResultType_49* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize49();
    using ValueT = ResultType_49::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_66 = tmp_76;


      for (const auto& tmp_59 : tmp_66.repeated_str()) {
        inserter.Add(tmp_59);
      }
    }

    *output = ResultType_49{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_uint32s[:]` name=`/repeated_uint32s`
  size_t TotalSize50() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_uint32s().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_uint32s[:]` name=`/repeated_uint32s`
  void CollectResultFromIntermediate50(
      ResultType_50* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize50();
    using ValueT = ResultType_50::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_66 = tmp_76;


      for (const auto& tmp_60 : tmp_66.repeated_uint32s()) {
        inserter.Add(tmp_60);
      }
    }

    *output = ResultType_50{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_uint64s[:]` name=`/repeated_uint64s`
  size_t TotalSize51() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_uint64s().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_uint64s[:]` name=`/repeated_uint64s`
  void CollectResultFromIntermediate51(
      ResultType_51* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize51();
    using ValueT = ResultType_51::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_66 = tmp_76;


      for (const auto& tmp_61 : tmp_66.repeated_uint64s()) {
        inserter.Add(tmp_61);
      }
    }

    *output = ResultType_51{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`ys[:]` name=`/ys`
  size_t TotalSize52() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).ys().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`ys[:]` name=`/ys`
  void CollectResultFromIntermediate52(
      ResultType_52* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize52();
    using ValueT = ResultType_52::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_66 = tmp_76;


      for (const auto& tmp_62 : tmp_66.ys()) {
        inserter.Add(tmp_62);
      }
    }

    *output = ResultType_52{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_bools[:]` name=`repeated_bools`
  size_t TotalSize53() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_bools().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_bools[:]` name=`repeated_bools`
  void CollectResultFromIntermediate53(
      ResultType_53* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize53();
    using ValueT = ResultType_53::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_66 = tmp_76;


      for (const auto& tmp_63 : tmp_66.repeated_bools()) {
        inserter.Add(tmp_63);
      }
    }

    *output = ResultType_53{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_doubles[:]` name=`repeated_doubles`
  size_t TotalSize54() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_doubles().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_doubles[:]` name=`repeated_doubles`
  void CollectResultFromIntermediate54(
      ResultType_54* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize54();
    using ValueT = ResultType_54::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_66 = tmp_76;


      for (const auto& tmp_64 : tmp_66.repeated_doubles()) {
        inserter.Add(tmp_64);
      }
    }

    *output = ResultType_54{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_enums[:]` name=`repeated_enums`
  size_t TotalSize55() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_enums().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_enums[:]` name=`repeated_enums`
  void CollectResultFromIntermediate55(
      ResultType_55* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize55();
    using ValueT = ResultType_55::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_66 = tmp_76;


      for (const auto& tmp_65 : tmp_66.repeated_enums()) {
        inserter.Add(tmp_65);
      }
    }

    *output = ResultType_55{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_floats[:]` name=`repeated_floats`
  size_t TotalSize56() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_floats().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_floats[:]` name=`repeated_floats`
  void CollectResultFromIntermediate56(
      ResultType_56* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize56();
    using ValueT = ResultType_56::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_75 = tmp_76;


      for (const auto& tmp_67 : tmp_75.repeated_floats()) {
        inserter.Add(tmp_67);
      }
    }

    *output = ResultType_56{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_int32s[:]` name=`repeated_int32s`
  size_t TotalSize57() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_int32s().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_int32s[:]` name=`repeated_int32s`
  void CollectResultFromIntermediate57(
      ResultType_57* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize57();
    using ValueT = ResultType_57::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_75 = tmp_76;


      for (const auto& tmp_68 : tmp_75.repeated_int32s()) {
        inserter.Add(tmp_68);
      }
    }

    *output = ResultType_57{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_int64s[:]` name=`repeated_int64s`
  size_t TotalSize58() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_int64s().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_int64s[:]` name=`repeated_int64s`
  void CollectResultFromIntermediate58(
      ResultType_58* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize58();
    using ValueT = ResultType_58::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_75 = tmp_76;


      for (const auto& tmp_69 : tmp_75.repeated_int64s()) {
        inserter.Add(tmp_69);
      }
    }

    *output = ResultType_58{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_raw_bytes[:]` name=`repeated_raw_bytes`
  size_t TotalSize59() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_raw_bytes().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_raw_bytes[:]` name=`repeated_raw_bytes`
  void CollectResultFromIntermediate59(
      ResultType_59* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize59();
    using ValueT = ResultType_59::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_75 = tmp_76;


      for (const auto& tmp_70 : tmp_75.repeated_raw_bytes()) {
        inserter.Add(tmp_70);
      }
    }

    *output = ResultType_59{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_str[:]` name=`repeated_str`
  size_t TotalSize60() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_str().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_str[:]` name=`repeated_str`
  void CollectResultFromIntermediate60(
      ResultType_60* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize60();
    using ValueT = ResultType_60::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_75 = tmp_76;


      for (const auto& tmp_71 : tmp_75.repeated_str()) {
        inserter.Add(tmp_71);
      }
    }

    *output = ResultType_60{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_uint32s[:]` name=`repeated_uint32s`
  size_t TotalSize61() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_uint32s().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_uint32s[:]` name=`repeated_uint32s`
  void CollectResultFromIntermediate61(
      ResultType_61* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize61();
    using ValueT = ResultType_61::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_75 = tmp_76;


      for (const auto& tmp_72 : tmp_75.repeated_uint32s()) {
        inserter.Add(tmp_72);
      }
    }

    *output = ResultType_61{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`repeated_uint64s[:]` name=`repeated_uint64s`
  size_t TotalSize62() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).repeated_uint64s().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`repeated_uint64s[:]` name=`repeated_uint64s`
  void CollectResultFromIntermediate62(
      ResultType_62* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize62();
    using ValueT = ResultType_62::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_75 = tmp_76;


      for (const auto& tmp_73 : tmp_75.repeated_uint64s()) {
        inserter.Add(tmp_73);
      }
    }

    *output = ResultType_62{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }

  // Returns total size of the array for
  // protopath=`ys[:]` name=`ys`
  size_t TotalSize63() const {
    const auto* start_ptr = single_.intermediate12;
    return start_ptr == nullptr ? 0 :
           (*start_ptr).ys().size();
  }

  // Start from one of the collected intermediate nodes and create DenseArray
  // in the slot for
  // protopath=`ys[:]` name=`ys`
  void CollectResultFromIntermediate63(
      ResultType_63* output, RawBufferFactory* buffer_factory) const {
    size_t total_size = TotalSize63();
    using ValueT = ResultType_63::base_type;
    typename ::arolla::Buffer<ValueT>::Builder bldr(total_size, buffer_factory);
    auto inserter = bldr.GetInserter();
    ::arolla::bitmap::AlmostFullBuilder bitmap_bldr(total_size, buffer_factory);
    // protopath=`ROOT`
    // Loop is always one or zero iterations, we use a loop to use "continue".
    for (const auto* intermediate_ptr = single_.intermediate12;
         intermediate_ptr != nullptr;
         intermediate_ptr = nullptr) {
      const auto& tmp_76 = *intermediate_ptr;
      const auto& tmp_75 = tmp_76;


      for (const auto& tmp_74 : tmp_75.ys()) {
        inserter.Add(tmp_74);
      }
    }

    *output = ResultType_63{
        std::move(bldr).Build(), std::move(bitmap_bldr).Build()};
  }



 void CollectResults(
     const Input& input, const OutputProvider& outputs,
     RawBufferFactory* buffer_factory) {
   single_.intermediate12 = &input;
   CollectIntermediateResults(input, *outputs.requested_inputs);

    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[9]) {
        return;
      }
      // protopath=`inner`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[2]) {
          return;
        }
        // protopath=`inner/as[:]` name=`/inner/as`
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[0];
            offset != kSkippedOffset) {
          CollectResultFromIntermediate0(
              outputs.GetMutable0(offset), buffer_factory);
        }
        // protopath=`inner/inner2`
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[0]) {
            return;
          }
          // protopath=`inner/inner2/zs[:]` name=`/inner/inner2/zs`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[1];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate1(
                outputs.GetMutable1(offset), buffer_factory);
          }
          // protopath=`inner/inner2/zs[:]` name=`inner__inner2__zs`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[2];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate2(
                outputs.GetMutable2(offset), buffer_factory);
          }
        }();
        // protopath=`inner/inners2[:]`
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[1]) {
            return;
          }
          // protopath=`inner/inners2[:]/z` name=`/inner/inners2/z`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[3];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate3(
                outputs.GetMutable3(offset), buffer_factory);
          }
          // protopath=`inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[4];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate4(
                outputs.GetMutable4(offset), buffer_factory);
          }
          // protopath=`inner/inners2[:]/count(zs[:])` name=`/inner/inners2/zs/@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[5];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate5(
                outputs.GetMutable5(offset), buffer_factory);
          }
          // protopath=`inner/inners2[:]/z` name=`inner__inners2__z`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[6];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate6(
                outputs.GetMutable6(offset), buffer_factory);
          }
          // protopath=`inner/inners2[:]/zs[:]` name=`inner__inners2__zs`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[7];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate7(
                outputs.GetMutable7(offset), buffer_factory);
          }
          // protopath=`inner/inners2[:]/count(zs[:])` name=`inner__inners2__zs__@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[8];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate8(
                outputs.GetMutable8(offset), buffer_factory);
          }
        }();
        // protopath=`inner/as[:]` name=`inner__as`
        if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[9];
            offset != kSkippedOffset) {
          CollectResultFromIntermediate9(
              outputs.GetMutable9(offset), buffer_factory);
        }
      }();
      // protopath=`inners[:]`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[8]) {
          return;
        }
        // protopath=`inners[:]` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[5]) {
            return;
          }
          // protopath=`inners[:]/a` name=`/inners/a`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[10];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate10(
                outputs.GetMutable10(offset), buffer_factory);
          }
          // protopath=`inners[:]/as[:]` name=`/inners/as`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[11];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate11(
                outputs.GetMutable11(offset), buffer_factory);
          }
          // protopath=`inners[:]/count(as[:])` name=`/inners/as/@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[12];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate12(
                outputs.GetMutable12(offset), buffer_factory);
          }
          // protopath=`inners[:]/bytes_cord` name=`/inners/bytes_cord`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[13];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate13(
                outputs.GetMutable13(offset), buffer_factory);
          }
          // protopath=`inners[:]/bytes_string_view` name=`/inners/bytes_string_view`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[14];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate14(
                outputs.GetMutable14(offset), buffer_factory);
          }
          // protopath=`inners[:]/inner2`
          [&]() {
            if (!outputs.requested_inputs->common.node_requested[3]) {
              return;
            }
            // protopath=`inners[:]/inner2/z` name=`/inners/inner2/z`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[15];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate15(
                  outputs.GetMutable15(offset), buffer_factory);
            }
            // protopath=`inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[16];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate16(
                  outputs.GetMutable16(offset), buffer_factory);
            }
            // protopath=`inners[:]/inner2/count(zs[:])` name=`/inners/inner2/zs/@size`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[17];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate17(
                  outputs.GetMutable17(offset), buffer_factory);
            }
            // protopath=`inners[:]/inner2/z` name=`inners__inner2__z`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[18];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate18(
                  outputs.GetMutable18(offset), buffer_factory);
            }
            // protopath=`inners[:]/inner2/zs[:]` name=`inners__inner2__zs`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[19];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate19(
                  outputs.GetMutable19(offset), buffer_factory);
            }
            // protopath=`inners[:]/inner2/count(zs[:])` name=`inners__inner2__zs__@size`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[20];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate20(
                  outputs.GetMutable20(offset), buffer_factory);
            }
          }();
          // protopath=`inners[:]/count(inners2[:])` name=`/inners/inners2/@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[21];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate21(
                outputs.GetMutable21(offset), buffer_factory);
          }
          // protopath=`inners[:]/inners2[:]`
          [&]() {
            if (!outputs.requested_inputs->common.node_requested[4]) {
              return;
            }
            // protopath=`inners[:]/inners2[:]/z` name=`/inners/inners2/z`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[22];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate22(
                  outputs.GetMutable22(offset), buffer_factory);
            }
            // protopath=`inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[23];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate23(
                  outputs.GetMutable23(offset), buffer_factory);
            }
            // protopath=`inners[:]/inners2[:]/count(zs[:])` name=`/inners/inners2/zs/@size`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[24];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate24(
                  outputs.GetMutable24(offset), buffer_factory);
            }
            // protopath=`inners[:]/inners2[:]/z` name=`inners__inners2__z`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[25];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate25(
                  outputs.GetMutable25(offset), buffer_factory);
            }
            // protopath=`inners[:]/inners2[:]/zs[:]` name=`inners__inners2__zs`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[26];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate26(
                  outputs.GetMutable26(offset), buffer_factory);
            }
            // protopath=`inners[:]/inners2[:]/count(zs[:])` name=`inners__inners2__zs__@size`
            if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[27];
                offset != kSkippedOffset) {
              CollectResultFromIntermediate27(
                  outputs.GetMutable27(offset), buffer_factory);
            }
          }();
        }();
        // protopath=`inners[:]` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[6]) {
            return;
          }
          // protopath=`inners[:]/raw_bytes` name=`/inners/raw_bytes`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[28];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate28(
                outputs.GetMutable28(offset), buffer_factory);
          }
          // protopath=`inners[:]/str` name=`/inners/str`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[29];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate29(
                outputs.GetMutable29(offset), buffer_factory);
          }
          // protopath=`inners[:]/str_cord` name=`/inners/str_cord`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[30];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate30(
                outputs.GetMutable30(offset), buffer_factory);
          }
          // protopath=`inners[:]/str_string_view` name=`/inners/str_string_view`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[31];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate31(
                outputs.GetMutable31(offset), buffer_factory);
          }
          // protopath=`inners[:]/a` name=`inners__a`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[32];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate32(
                outputs.GetMutable32(offset), buffer_factory);
          }
          // protopath=`inners[:]/as[:]` name=`inners__as`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[33];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate33(
                outputs.GetMutable33(offset), buffer_factory);
          }
          // protopath=`inners[:]/count(as[:])` name=`inners__as__@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[34];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate34(
                outputs.GetMutable34(offset), buffer_factory);
          }
          // protopath=`inners[:]/bytes_cord` name=`inners__bytes_cord`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[35];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate35(
                outputs.GetMutable35(offset), buffer_factory);
          }
        }();
        // protopath=`inners[:]` fictive
        [&]() {
          if (!outputs.requested_inputs->common.node_requested[7]) {
            return;
          }
          // protopath=`inners[:]/bytes_string_view` name=`inners__bytes_string_view`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[36];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate36(
                outputs.GetMutable36(offset), buffer_factory);
          }
          // protopath=`inners[:]/count(inners2[:])` name=`inners__inners2__@size`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[37];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate37(
                outputs.GetMutable37(offset), buffer_factory);
          }
          // protopath=`inners[:]/raw_bytes` name=`inners__raw_bytes`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[38];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate38(
                outputs.GetMutable38(offset), buffer_factory);
          }
          // protopath=`inners[:]/str` name=`inners__str`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[39];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate39(
                outputs.GetMutable39(offset), buffer_factory);
          }
          // protopath=`inners[:]/str_cord` name=`inners__str_cord`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[40];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate40(
                outputs.GetMutable40(offset), buffer_factory);
          }
          // protopath=`inners[:]/str_string_view` name=`inners__str_string_view`
          if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[41];
              offset != kSkippedOffset) {
            CollectResultFromIntermediate41(
                outputs.GetMutable41(offset), buffer_factory);
          }
        }();
      }();
      // protopath=`repeated_bools[:]` name=`/repeated_bools`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[42];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate42(
            outputs.GetMutable42(offset), buffer_factory);
      }
      // protopath=`repeated_doubles[:]` name=`/repeated_doubles`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[43];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate43(
            outputs.GetMutable43(offset), buffer_factory);
      }
      // protopath=`repeated_enums[:]` name=`/repeated_enums`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[44];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate44(
            outputs.GetMutable44(offset), buffer_factory);
      }
      // protopath=`repeated_floats[:]` name=`/repeated_floats`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[45];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate45(
            outputs.GetMutable45(offset), buffer_factory);
      }
      // protopath=`repeated_int32s[:]` name=`/repeated_int32s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[46];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate46(
            outputs.GetMutable46(offset), buffer_factory);
      }
      // protopath=`repeated_int64s[:]` name=`/repeated_int64s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[47];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate47(
            outputs.GetMutable47(offset), buffer_factory);
      }
    }();

    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[10]) {
        return;
      }
      // protopath=`repeated_raw_bytes[:]` name=`/repeated_raw_bytes`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[48];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate48(
            outputs.GetMutable48(offset), buffer_factory);
      }
      // protopath=`repeated_str[:]` name=`/repeated_str`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[49];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate49(
            outputs.GetMutable49(offset), buffer_factory);
      }
      // protopath=`repeated_uint32s[:]` name=`/repeated_uint32s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[50];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate50(
            outputs.GetMutable50(offset), buffer_factory);
      }
      // protopath=`repeated_uint64s[:]` name=`/repeated_uint64s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[51];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate51(
            outputs.GetMutable51(offset), buffer_factory);
      }
      // protopath=`ys[:]` name=`/ys`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[52];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate52(
            outputs.GetMutable52(offset), buffer_factory);
      }
      // protopath=`repeated_bools[:]` name=`repeated_bools`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[53];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate53(
            outputs.GetMutable53(offset), buffer_factory);
      }
      // protopath=`repeated_doubles[:]` name=`repeated_doubles`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[54];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate54(
            outputs.GetMutable54(offset), buffer_factory);
      }
      // protopath=`repeated_enums[:]` name=`repeated_enums`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[55];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate55(
            outputs.GetMutable55(offset), buffer_factory);
      }
    }();

    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[11]) {
        return;
      }
      // protopath=`repeated_floats[:]` name=`repeated_floats`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[56];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate56(
            outputs.GetMutable56(offset), buffer_factory);
      }
      // protopath=`repeated_int32s[:]` name=`repeated_int32s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[57];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate57(
            outputs.GetMutable57(offset), buffer_factory);
      }
      // protopath=`repeated_int64s[:]` name=`repeated_int64s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[58];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate58(
            outputs.GetMutable58(offset), buffer_factory);
      }
      // protopath=`repeated_raw_bytes[:]` name=`repeated_raw_bytes`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[59];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate59(
            outputs.GetMutable59(offset), buffer_factory);
      }
      // protopath=`repeated_str[:]` name=`repeated_str`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[60];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate60(
            outputs.GetMutable60(offset), buffer_factory);
      }
      // protopath=`repeated_uint32s[:]` name=`repeated_uint32s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[61];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate61(
            outputs.GetMutable61(offset), buffer_factory);
      }
      // protopath=`repeated_uint64s[:]` name=`repeated_uint64s`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[62];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate62(
            outputs.GetMutable62(offset), buffer_factory);
      }
      // protopath=`ys[:]` name=`ys`
      if (size_t offset = outputs.requested_inputs->common.leaf_frame_offsets[63];
          offset != kSkippedOffset) {
        CollectResultFromIntermediate63(
            outputs.GetMutable63(offset), buffer_factory);
      }
    }();
 }

 private:
  // Intermediate non vector data: pointers to messages and sizes.
  struct SingleValueData {
    const Input* intermediate12 = nullptr;
    using MsgType0 = std::decay_t<decltype(
        std::declval<const Input&>().inner().inner2())>;
    const MsgType0* intermediate0 = nullptr;
    // protopath=`inner/inners2[:]/zs[:]` name=`/inner/inners2/zs`
    size_t total_size_5 = 0;
    // protopath=`inner/inners2[:]/zs[:]` name=`inner__inners2__zs`
    size_t total_size_8 = 0;
    using MsgType2 = std::decay_t<decltype(
        std::declval<const Input&>().inner())>;
    const MsgType2* intermediate2 = nullptr;
    // protopath=`inners[:]/as[:]` name=`/inners/as`
    size_t total_size_14 = 0;
    // protopath=`inners[:]/inner2/zs[:]` name=`/inners/inner2/zs`
    size_t total_size_19 = 0;
    // protopath=`inners[:]/inner2/zs[:]` name=`inners__inner2__zs`
    size_t total_size_22 = 0;
    // protopath=`inners[:]/inners2[:]/zs[:]` name=`/inners/inners2/zs`
    size_t total_size_27 = 0;
    // protopath=`inners[:]/inners2[:]/zs[:]` name=`inners__inners2__zs`
    size_t total_size_30 = 0;
    // protopath=`inners[:]/as[:]` name=`inners__as`
    size_t total_size_39 = 0;
  };

  // Intermediate vector data: collection of pointers to messages.
  struct MultiValueData {
    using MsgType1 = std::decay_t<decltype(
        std::declval<const Input&>().inner().inners2(0))>;
    std::vector<const MsgType1*> intermediate1;
    using MsgType3 = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inner2())>;
    std::vector<const MsgType3*> intermediate3;
    using MsgType4 = std::decay_t<decltype(
        std::declval<const Input&>().inners(0).inners2(0))>;
    std::vector<const MsgType4*> intermediate4;
    using MsgType8 = std::decay_t<decltype(
        std::declval<const Input&>().inners(0))>;
    std::vector<const MsgType8*> intermediate8;
  };

  SingleValueData single_;
  MultiValueData multi_;
};

// InputLoader for all DenseArray value protopathes.
class Loader final : public ::arolla::StaticInputLoader<Input> {
 public:
  Loader()
    : StaticInputLoader<Input>(
      // use special builder to reduce binary size and stack pressure
          []() {
            NamedTypesBuilder builder;
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/as)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_0>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inner2/zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_1>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inner__inner2__zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_2>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inners2/z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_3>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inners2/zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_4>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inner/inners2/zs/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_5>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inner__inners2__z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_6>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inner__inners2__zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_7>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inner__inners2__zs__@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_8>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inner__as)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_9>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/a)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_10>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/as)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_11>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/as/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_12>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/bytes_cord)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_13>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/bytes_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_14>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inner2/z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_15>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inner2/zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_16>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inner2/zs/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_17>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__inner2__z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_18>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__inner2__zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_19>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__inner2__zs__@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_20>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inners2/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_21>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inners2/z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_22>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inners2/zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_23>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/inners2/zs/@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_24>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__inners2__z)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_25>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__inners2__zs)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_26>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__inners2__zs__@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_27>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/raw_bytes)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_28>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/str)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_29>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/str_cord)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_30>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/inners/str_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_31>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__a)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_32>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__as)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_33>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__as__@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_34>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__bytes_cord)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_35>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__bytes_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_36>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__inners2__@size)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_37>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__raw_bytes)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_38>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__str)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_39>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__str_cord)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_40>());
            builder.Add(
                R"RL_CODEGEN_DELIM(inners__str_string_view)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_41>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_bools)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_42>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_doubles)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_43>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_enums)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_44>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_floats)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_45>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_int32s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_46>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_int64s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_47>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_raw_bytes)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_48>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_str)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_49>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_uint32s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_50>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/repeated_uint64s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_51>());
            builder.Add(
                R"RL_CODEGEN_DELIM(/ys)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_52>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_bools)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_53>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_doubles)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_54>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_enums)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_55>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_floats)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_56>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_int32s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_57>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_int64s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_58>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_raw_bytes)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_59>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_str)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_60>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_uint32s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_61>());
            builder.Add(
                R"RL_CODEGEN_DELIM(repeated_uint64s)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_62>());
            builder.Add(
                R"RL_CODEGEN_DELIM(ys)RL_CODEGEN_DELIM",
                ::arolla::GetQType<ResultType_63>());
            return std::move(builder).Build();
          }()) {}

 private:
  StatusOr<BoundInputLoader<Input>> BindImpl(
      const absl::flat_hash_map<std::string, TypedSlot>& output_slots)
      const final {
    ASSIGN_OR_RETURN(auto optional_slots,
                     ::arolla::MaybeFindSlotsAndVerifyTypes(
                         types_in_order(), output_slots));
    // Allocate on heap to reduce stack pressure.
    auto inputs = std::make_unique<HierarchicalMultiValueRequestedInputs>();
    auto tree = []() {
      std::vector<std::vector<size_t>> tree(77);
      tree[3] = {1,2};
      tree[10] = {4,5,6,7,8,9};
      tree[12] = {0,3,10,11};
      tree[24] = {18,19,20,21,22,23};
      tree[32] = {26,27,28,29,30,31};
      tree[33] = {13,14,15,16,17,24,25,32};
      tree[42] = {34,35,36,37,38,39,40,41};
      tree[49] = {43,44,45,46,47,48};
      tree[50] = {33,42,49};
      tree[57] = {12,50,51,52,53,54,55,56};
      tree[66] = {58,59,60,61,62,63,64,65};
      tree[75] = {67,68,69,70,71,72,73,74};
      tree[76] = {57,66,75};
      return tree;
    }();
    CreateHierarchicalMultiValueRequestedInputs(
      optional_slots,
      tree,
      inputs.get());
    return BoundInputLoader<Input>([inputs=std::move(*inputs)](
        const Input& input, FramePtr frame, RawBufferFactory* buffer_factory) {
      OutputProvider output_getter{&inputs, frame};
      SlotSetter slot_setter;
      slot_setter.CollectResults(input, output_getter, buffer_factory);
      return OkStatus();
    });
  }
};

}  // namespace multi_value_protopath

// Returns ChainInputLoader: Accessors, Single- and Multi-value proto.
const InputLoader<Input>*
GetCollectionInputLoader() {
  static const InputLoader<Input>* impl = ChainInputLoader<Input>::Build(
          // Not using make_unique to avoid binary size blowup.
          ::arolla::InputLoaderPtr<Input>(static_cast<const InputLoader<Input>*>(
            new single_value_protopath::Loader())),
          // Not using make_unique to avoid binary size blowup.
          ::arolla::InputLoaderPtr<Input>(static_cast<const InputLoader<Input>*>(
            new multi_value_protopath::Loader()))
      )->release();
  return impl;
}


}  // namespace
}  // namespace my_namespace_GetDescriptorBasedLoaderImplNamespace

namespace my_namespace {

::arolla::InputLoaderPtr<::testing_namespace::Root>
GetDescriptorBasedLoader() {
  return MakeNotOwningInputLoader(::my_namespace_GetDescriptorBasedLoaderImplNamespace::GetCollectionInputLoader());
}

}  // namespace my_namespace

