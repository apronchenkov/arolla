// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target:
// //arolla/codegen/io/testing:test_slot_listener_filtered_for_model

#include <functional>
#include <optional>

#include "absl/strings/string_view.h"
#include "arolla/codegen/io/multi_loader.h"
#include "arolla/codegen/qtype_utils.h"
#include "arolla/io/chain_slot_listener.h"
#include "arolla/io/slot_listener.h"
#include "arolla/memory/frame.h"
#include "arolla/proto/testing/test.pb.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/base_types.h"
#include "arolla/qtype/qtype.h"
#include "arolla/qtype/typed_slot.h"
#include "arolla/util/map.h"
#include "arolla/util/meta.h"
#include "arolla/util/status.h"

namespace {
using ::absl::Status;
using ::absl::StatusOr;
using ::arolla::BoundSlotListener;
using ::arolla::ChainSlotListener;
using ::arolla::ConstFramePtr;
using ::arolla::FrameLayout;
using ::arolla::GetQType;
using ::arolla::QTypePtr;
using ::arolla::SlotListener;
using ::arolla::TypedSlot;
}  // namespace

namespace my_namespace_GetFilteredSlotListenerImplNamespace {

using Output = ::testing_namespace::Root;

namespace {
namespace {

namespace single_value_protopath {

using ::arolla::codegen::io::kSkippedOffset;

// In this namespace protopath inputs with `OptionalValue` and `DenseArrayShape`
// are being processed.

using HierarchicalSingleValueRequestedInputs =
    ::arolla::codegen::io::HierarchicalSingleValueRequestedInputsData<
        /*kLeafCount=*/4,
        /*kNodeCount=*/5>;

// Provides access to the references inside the frame for each leaf.
class OutputGetter {
 public:
  const HierarchicalSingleValueRequestedInputs* requested_outputs;
  ConstFramePtr frame;

 public:
  // protopath=`x3` name=`bit0_plus1`
  ABSL_ATTRIBUTE_ALWAYS_INLINE const auto& Get0(size_t offset) const {
    using value_type = std::decay_t<decltype(std::declval<Output&>().x3())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_outputs->common.leaf_frame_offsets[0], kSkippedOffset);
    return frame.Get(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`x6` name=`bit0_self`
  ABSL_ATTRIBUTE_ALWAYS_INLINE const auto& Get1(size_t offset) const {
    using value_type = std::decay_t<decltype(std::declval<Output&>().x6())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_outputs->common.leaf_frame_offsets[1], kSkippedOffset);
    return frame.Get(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`x0` name=`plus1_bit0`
  ABSL_ATTRIBUTE_ALWAYS_INLINE const auto& Get2(size_t offset) const {
    using value_type = std::decay_t<decltype(std::declval<Output&>().x0())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_outputs->common.leaf_frame_offsets[2], kSkippedOffset);
    return frame.Get(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`x4` name=`self_bit0`
  ABSL_ATTRIBUTE_ALWAYS_INLINE const auto& Get3(size_t offset) const {
    using value_type = std::decay_t<decltype(std::declval<Output&>().x4())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_outputs->common.leaf_frame_offsets[3], kSkippedOffset);
    return frame.Get(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }
};

using ResultType_0 = std::decay_t<
    std::remove_pointer_t<decltype(std::declval<OutputGetter>().Get0(0))>>;
using ResultType_1 = std::decay_t<
    std::remove_pointer_t<decltype(std::declval<OutputGetter>().Get1(0))>>;
using ResultType_2 = std::decay_t<
    std::remove_pointer_t<decltype(std::declval<OutputGetter>().Get2(0))>>;
using ResultType_3 = std::decay_t<
    std::remove_pointer_t<decltype(std::declval<OutputGetter>().Get3(0))>>;

// Traverse the proto and put results for all single values from the frame.
class SlotReader {
 public:
  void CollectResults(Output& output, const OutputGetter& inputs) {
    Output& tmp_0 = output;

    // protopath=`x3` name=`bit0_plus1`
    [&]() {
      if (size_t offset =
              inputs.requested_outputs->common.leaf_frame_offsets[0];
          offset != kSkippedOffset) {
        const auto& input = inputs.Get0(offset);
        using proto_type = std::decay_t<decltype(std::declval<Output&>().x3())>;
        if (input.present) {
          tmp_0.set_x3(proto_type(input.value));
        }
      }
    }();
    // protopath=`x6` name=`bit0_self`
    [&]() {
      if (size_t offset =
              inputs.requested_outputs->common.leaf_frame_offsets[1];
          offset != kSkippedOffset) {
        const auto& input = inputs.Get1(offset);
        using proto_type = std::decay_t<decltype(std::declval<Output&>().x6())>;
        if (input.present) {
          tmp_0.set_x6(proto_type(input.value));
        }
      }
    }();
    // protopath=`x0` name=`plus1_bit0`
    [&]() {
      if (size_t offset =
              inputs.requested_outputs->common.leaf_frame_offsets[2];
          offset != kSkippedOffset) {
        const auto& input = inputs.Get2(offset);
        using proto_type = std::decay_t<decltype(std::declval<Output&>().x0())>;
        if (input.present) {
          tmp_0.set_x0(proto_type(input.value));
        }
      }
    }();
    // protopath=`x4` name=`self_bit0`
    [&]() {
      if (size_t offset =
              inputs.requested_outputs->common.leaf_frame_offsets[3];
          offset != kSkippedOffset) {
        const auto& input = inputs.Get3(offset);
        using proto_type = std::decay_t<decltype(std::declval<Output&>().x4())>;
        if (input.present) {
          tmp_0.set_x4(proto_type(input.value));
        }
      }
    }();
  }
};

// SlotListener for all single value protopathes.
class Listener final : public ::arolla::StaticSlotListener<Output> {
 public:
  Listener()
      : StaticSlotListener(
            // Use special builder to reduce binary size and stack pressure.
            []() {
              ::arolla::codegen::NamedQTypeVectorBuilder builder;
              builder.AddFromCommonPrefixWithPrevious(
                  // bit0_plus1
                  10, R"RL_CODEGEN_DELIM(bit0_plus1)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_0>());
              builder.AddFromCommonPrefixWithPrevious(
                  // bit0_self
                  9, R"RL_CODEGEN_DELIM(self)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_1>());
              builder.AddFromCommonPrefixWithPrevious(
                  // plus1_bit0
                  10, R"RL_CODEGEN_DELIM(plus1_bit0)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_2>());
              builder.AddFromCommonPrefixWithPrevious(
                  // self_bit0
                  9, R"RL_CODEGEN_DELIM(self_bit0)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_3>());
              return std::move(builder).Build();
            }()) {}

 private:
  auto CreateProtopathTree() const {
    return []() {
      std::vector<std::vector<size_t>> tree(5);
      tree[4] = {0, 1, 2, 3};
      return tree;
    }();
  }

  StatusOr<BoundSlotListener<Output>> BindImpl(
      const absl::flat_hash_map<std::string, TypedSlot>& input_slots)
      const final {
    ASSIGN_OR_RETURN(
        auto optional_slots,
        ::arolla::MaybeFindSlotsAndVerifyTypes(types_in_order(), input_slots));
    // Allocate on heap to reduce stack pressure.
    auto outputs = std::make_unique<HierarchicalSingleValueRequestedInputs>();
    auto tree = CreateProtopathTree();
    CreateHierarchicalSingleValueRequestedInputs(optional_slots,
                                                 /*size_leaves=*/{}, tree,
                                                 outputs.get());
    return [outputs = std::move(outputs)](ConstFramePtr frame, Output* output) {
      OutputGetter output_getter{outputs.get(), frame};
      SlotReader slot_reader;
      slot_reader.CollectResults(*output, output_getter);
      return absl::OkStatus();
    };
  }
};

}  // namespace single_value_protopath

}  // namespace

const SlotListener<Output>* GetCollectionSlotListener() {
  static const SlotListener<Output>* impl =
      ChainSlotListener<Output>::Build(
          std::make_unique<single_value_protopath::Listener>())
          ->release();
  return impl;
}
}  // namespace
}  // namespace my_namespace_GetFilteredSlotListenerImplNamespace

namespace my_namespace {

std::unique_ptr<::arolla::SlotListener<::testing_namespace::Root>>
GetFilteredSlotListener() {
  return MakeNotOwningSlotListener(
      ::my_namespace_GetFilteredSlotListenerImplNamespace::
          GetCollectionSlotListener());
}

}  // namespace my_namespace
