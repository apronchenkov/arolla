// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target:
// //arolla/codegen/io/testing:test_struct_input_loader

#include "arolla/codegen/io/multi_loader.h"
#include "arolla/codegen/io/testing/test_native_struct.h"
#include "arolla/codegen/io/testing/test_proto_qtype.h"
#include "arolla/io/accessors_input_loader.h"
#include "arolla/io/input_loader.h"
#include "arolla/io/wildcard_input_loader.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/base_types.h"
#include "arolla/util/map.h"
#include "arolla/util/text.h"

namespace {
using ::absl::OkStatus;
using ::absl::Status;
using ::absl::StatusOr;
using ::arolla::BoundInputLoader;
using ::arolla::ChainInputLoader;
using ::arolla::FramePtr;
using ::arolla::GetQType;
using ::arolla::InputLoader;
using ::arolla::InputLoaderPtr;
using ::arolla::QTypePtr;
using ::arolla::RawBufferFactory;
using ::arolla::TypedSlot;
using ::arolla::WildcardInputLoader;
}  // namespace

namespace my_namespace_GetStructLoaderImplNamespace {

using Input = ::testing_namespace::RootNativeStruct;

namespace {
namespace {
namespace single_value_protopath {

using ::arolla::codegen::io::kSkippedOffset;
using ::arolla::codegen::io::NamedTypesBuilder;

// In this namespace protopath inputs with `OptionalValue` and `DenseArrayShape`
// are being loaded.

using HierarchicalSingleValueRequestedInputs =
    ::arolla::codegen::io::HierarchicalSingleValueRequestedInputsData<
        /*kLeafCount=*/6,
        /*kNodeCount=*/10>;

// Provides access to the output pointers for each leaf.
class OutputProvider {
 public:
  const HierarchicalSingleValueRequestedInputs* requested_inputs;
  FramePtr frame;

 public:
  // protopath=`&::inner/*/&::a` name=`/inner/a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable0(size_t offset) const {
    using value_type =
        std::decay_t<decltype((*(std::declval<const Input&>().inner)).a)>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[0], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`&::inner_proto/&` name=`/inner_proto`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable1(size_t offset) const {
    using value_type =
        std::decay_t<decltype((&(std::declval<const Input&>().inner_proto)))>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[1], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`&::inner_proto/a` name=`/inner_proto/a`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable2(size_t offset) const {
    using value_type =
        std::decay_t<decltype(std::declval<const Input&>().inner_proto.a())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[2], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`&::x` name=`/x`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable3(size_t offset) const {
    using value_type = std::decay_t<decltype(std::declval<const Input&>().x)>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[3], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`&::raw_bytes` name=`raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable4(size_t offset) const {
    using value_type =
        std::decay_t<decltype(std::declval<const Input&>().raw_bytes)>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[4], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`&::str` name=`str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable5(size_t offset) const {
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<::arolla::Text>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[5], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }
};

using ResultType_0 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable0(0))>>;
using ResultType_1 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable1(0))>>;
using ResultType_2 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable2(0))>>;
using ResultType_3 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable3(0))>>;
using ResultType_4 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable4(0))>>;
using ResultType_5 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable5(0))>>;

// Set all optional values under the node as missed.
void SetAllOptionalMissed(
    const HierarchicalSingleValueRequestedInputs& requested_inputs,
    FramePtr frame, size_t node_intermediate_id) {
  const auto& clear_info =
      requested_inputs.node_optional_clear_infos[node_intermediate_id];
  for (size_t i = clear_info.range_begin; i != clear_info.range_end; ++i) {
    *frame.GetMutable(::arolla::FrameLayout::Slot<bool>::UnsafeSlotFromOffset(
        requested_inputs.requested_offsets[i])) = false;
  }
}

// Traverse the proto and put results for all single values to the frame.
class SlotSetter {
 public:
  void CollectResults(const Input& input, const OutputProvider& outputs) {
    const Input& tmp_3 = input;

    // protopath=`&::inner`
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[1]) {
        return;
      }
      const auto& tmp_1 = tmp_3.inner;
      // protopath=`&::inner/*`
      if (!(tmp_1 != nullptr)) {
        SetAllOptionalMissed(*outputs.requested_inputs, outputs.frame, 0);
        return;
      }
      const auto& tmp_0 = (*(tmp_1));
      // protopath=`&::inner/*/&::a` name=`/inner/a`
      if (size_t offset =
              outputs.requested_inputs->common.leaf_frame_offsets[0];
          offset != kSkippedOffset) {
        auto* output = outputs.GetMutable0(offset);
        output->present = true;
        output->value = ::arolla::proto::ToArollaCompatibleType(tmp_0.a);
      }
    }();
    // protopath=`&::inner_proto`
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[2]) {
        return;
      }
      const auto& tmp_2 = tmp_3.inner_proto;
      // protopath=`&::inner_proto/&` name=`/inner_proto`
      [&]() {
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[1];
            offset != kSkippedOffset) {
          auto* output = outputs.GetMutable1(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType((&(tmp_2)));
        }
      }();
      // protopath=`&::inner_proto/a` name=`/inner_proto/a`
      [&]() {
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[2];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, a))) {
            outputs.GetMutable2(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable2(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(tmp_2.a());
        }
      }();
    }();
    // protopath=`&::x` name=`/x`
    [&]() {
      if (size_t offset =
              outputs.requested_inputs->common.leaf_frame_offsets[3];
          offset != kSkippedOffset) {
        auto* output = outputs.GetMutable3(offset);
        output->present = true;
        output->value = ::arolla::proto::ToArollaCompatibleType(tmp_3.x);
      }
    }();
    // protopath=`&::raw_bytes` name=`raw_bytes`
    [&]() {
      if (size_t offset =
              outputs.requested_inputs->common.leaf_frame_offsets[4];
          offset != kSkippedOffset) {
        auto* output = outputs.GetMutable4(offset);
        output->present = true;
        output->value =
            ::arolla::proto::ToArollaCompatibleType(tmp_3.raw_bytes);
      }
    }();
    // protopath=`&::str` name=`str`
    [&]() {
      if (size_t offset =
              outputs.requested_inputs->common.leaf_frame_offsets[5];
          offset != kSkippedOffset) {
        auto* output = outputs.GetMutable5(offset);
        output->present = true;
        output->value = ::arolla::proto::ToArollaCompatibleType(tmp_3.str);
      }
    }();
  }
};

// InputLoader for all single value protopathes.
class Loader final : public ::arolla::StaticInputLoader<Input> {
 public:
  Loader()
      : ::arolla::StaticInputLoader<Input>(
            // use special builder to reduce binary size and stack pressure
            []() {
              NamedTypesBuilder builder;
              builder.Add(R"RL_CODEGEN_DELIM(/inner/a)RL_CODEGEN_DELIM",
                          ::arolla::GetQType<ResultType_0>());
              builder.Add(R"RL_CODEGEN_DELIM(/inner_proto)RL_CODEGEN_DELIM",
                          ::arolla::GetQType<ResultType_1>());
              builder.Add(R"RL_CODEGEN_DELIM(/inner_proto/a)RL_CODEGEN_DELIM",
                          ::arolla::GetQType<ResultType_2>());
              builder.Add(R"RL_CODEGEN_DELIM(/x)RL_CODEGEN_DELIM",
                          ::arolla::GetQType<ResultType_3>());
              builder.Add(R"RL_CODEGEN_DELIM(raw_bytes)RL_CODEGEN_DELIM",
                          ::arolla::GetQType<ResultType_4>());
              builder.Add(R"RL_CODEGEN_DELIM(str)RL_CODEGEN_DELIM",
                          ::arolla::GetQType<ResultType_5>());
              return std::move(builder).Build();
            }()) {}

 private:
  StatusOr<BoundInputLoader<Input>> BindImpl(
      const absl::flat_hash_map<std::string, TypedSlot>& output_slots)
      const final {
    ASSIGN_OR_RETURN(
        auto optional_slots,
        ::arolla::MaybeFindSlotsAndVerifyTypes(types_in_order(), output_slots));
    // Allocate on heap to reduce stack pressure.
    auto inputs = std::make_unique<HierarchicalSingleValueRequestedInputs>();
    auto tree = []() {
      std::vector<std::vector<size_t>> tree(10);
      tree[1] = {0};
      tree[2] = {1};
      tree[5] = {3, 4};
      tree[9] = {2, 5, 6, 7, 8};
      return tree;
    }();
    CreateHierarchicalSingleValueRequestedInputs(optional_slots,
                                                 /*size_leaves=*/{}, tree,
                                                 inputs.get());
    return BoundInputLoader<Input>(
        [inputs = std::move(*inputs)](const Input& input, FramePtr frame,
                                      RawBufferFactory*) {
          OutputProvider output_getter{&inputs, frame};
          SlotSetter slot_setter;
          slot_setter.CollectResults(input, output_getter);
          return OkStatus();
        });
  }
};

}  // namespace single_value_protopath

}  // namespace

// Returns ChainInputLoader: Accessors, Single- and Multi-value proto.
const InputLoader<Input>* GetCollectionInputLoader() {
  static const InputLoader<Input>* impl =
      ChainInputLoader<Input>::Build(
          // Not using make_unique to avoid binary size blowup.
          ::arolla::InputLoaderPtr<Input>(
              static_cast<const InputLoader<Input>*>(
                  new single_value_protopath::Loader())))
          ->release();
  return impl;
}
}  // namespace

namespace {

constexpr auto GetAllShardsInputLoader =
    ::my_namespace_GetStructLoaderImplNamespace::GetCollectionInputLoader;

}  // namespace
}  // namespace my_namespace_GetStructLoaderImplNamespace

namespace my_namespace {

::arolla::InputLoaderPtr<::testing_namespace::RootNativeStruct>
GetStructLoader() {
  return MakeNotOwningInputLoader(
      ::my_namespace_GetStructLoaderImplNamespace::GetAllShardsInputLoader());
}

}  // namespace my_namespace
