// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target:
// //arolla/codegen/io/testing:test_descriptor_input_loader_with_no_repeated

#include <memory>

#include "arolla/codegen/io/multi_loader.h"
#include "arolla/codegen/qtype_utils.h"
#include "arolla/io/accessors_input_loader.h"
#include "arolla/io/input_loader.h"
#include "arolla/io/wildcard_input_loader.h"
#include "arolla/proto/test.pb.h"
#include "arolla/proto/test_proto3.pb.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/base_types.h"
#include "arolla/util/map.h"
#include "arolla/util/text.h"

namespace {
using ::absl::OkStatus;
using ::absl::Status;
using ::absl::StatusOr;
using ::arolla::BoundInputLoader;
using ::arolla::ChainInputLoader;
using ::arolla::FramePtr;
using ::arolla::GetQType;
using ::arolla::InputLoader;
using ::arolla::QTypePtr;
using ::arolla::RawBufferFactory;
using ::arolla::TypedSlot;
using ::arolla::WildcardInputLoader;
}  // namespace

namespace my_namespace_GetDescriptorBasedLoaderWithoutRepeatedImplNamespace {

using Input = ::testing_namespace::Root;

namespace shard1 {
namespace {
namespace single_value_protopath {

using ::arolla::codegen::io::kSkippedOffset;

// In this namespace protopath inputs with `OptionalValue` and `DenseArrayShape`
// are being loaded.

using HierarchicalSingleValueRequestedInputs =
    ::arolla::codegen::io::HierarchicalSingleValueRequestedInputsData<
        /*kLeafCount=*/9,
        /*kNodeCount=*/13>;

// Provides access to the output pointers for each leaf.
class OutputProvider {
 public:
  const HierarchicalSingleValueRequestedInputs* requested_inputs;
  FramePtr frame;

 public:
  // protopath=`private` name=`/private`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable0(size_t offset) const {
    using value_type =
        std::decay_t<decltype(std::declval<const Input&>().private_())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[0], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`proto3/non_optional_i32` name=`/proto3/non_optional_i32`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable1(size_t offset) const {
    using value_type = std::decay_t<
        decltype(std::declval<const Input&>().proto3().non_optional_i32())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[1], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`raw_bytes` name=`/raw_bytes`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable2(size_t offset) const {
    using value_type =
        std::decay_t<decltype(std::declval<const Input&>().raw_bytes())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[2], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`str` name=`/str`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable3(size_t offset) const {
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<::arolla::Text>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[3], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`x` name=`/x`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable4(size_t offset) const {
    using value_type = std::decay_t<decltype(std::declval<const Input&>().x())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[4], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`x0` name=`/x0`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable5(size_t offset) const {
    using value_type =
        std::decay_t<decltype(std::declval<const Input&>().x0())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[5], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`x1` name=`/x1`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable6(size_t offset) const {
    using value_type =
        std::decay_t<decltype(std::declval<const Input&>().x1())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[6], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`x2` name=`/x2`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable7(size_t offset) const {
    using value_type =
        std::decay_t<decltype(std::declval<const Input&>().x2())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[7], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }

  // protopath=`x3` name=`/x3`
  ABSL_ATTRIBUTE_ALWAYS_INLINE auto* GetMutable8(size_t offset) const {
    using value_type =
        std::decay_t<decltype(std::declval<const Input&>().x3())>;
    using result_type =
        HierarchicalSingleValueRequestedInputs::value_type<value_type>;
    DCHECK_NE(requested_inputs->common.leaf_frame_offsets[8], kSkippedOffset);
    return frame.GetMutable(
        ::arolla::FrameLayout::Slot<result_type>::UnsafeSlotFromOffset(offset));
  }
};

using ResultType_0 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable0(0))>>;
using ResultType_1 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable1(0))>>;
using ResultType_2 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable2(0))>>;
using ResultType_3 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable3(0))>>;
using ResultType_4 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable4(0))>>;
using ResultType_5 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable5(0))>>;
using ResultType_6 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable6(0))>>;
using ResultType_7 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable7(0))>>;
using ResultType_8 = std::decay_t<std::remove_pointer_t<
    decltype(std::declval<OutputProvider>().GetMutable8(0))>>;

// Set all optional values under the node as missed.
void SetAllOptionalMissed(
    const HierarchicalSingleValueRequestedInputs& requested_inputs,
    FramePtr frame, size_t node_intermediate_id) {
  const auto& clear_info =
      requested_inputs.node_optional_clear_infos[node_intermediate_id];
  for (size_t i = clear_info.range_begin; i != clear_info.range_end; ++i) {
    *frame.GetMutable(::arolla::FrameLayout::Slot<bool>::UnsafeSlotFromOffset(
        requested_inputs.requested_offsets[i])) = false;
  }
}

// Traverse the proto and put results for all single values to the frame.
class SlotSetter {
 public:
  void CollectResults(const Input& input, const OutputProvider& outputs) {
    const Input& tmp_3 = input;

    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[1]) {
        return;
      }
      const auto& tmp_1 = tmp_3;
      // protopath=`private` name=`/private`
      [&]() {
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[0];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, private_))) {
            outputs.GetMutable0(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable0(offset);
          output->present = true;
          output->value =
              ::arolla::proto::ToArollaCompatibleType(tmp_1.private_());
        }
      }();
      // protopath=`proto3`
      [&]() {
        if (!outputs.requested_inputs->common.node_requested[0]) {
          return;
        }
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, proto3))) {
          SetAllOptionalMissed(*outputs.requested_inputs, outputs.frame, 0);
          return;
        }
        const auto& tmp_0 = tmp_1.proto3();
        // protopath=`proto3/non_optional_i32` name=`/proto3/non_optional_i32`
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[1];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_0, non_optional_i32))) {
            outputs.GetMutable1(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable1(offset);
          output->present = true;
          output->value =
              ::arolla::proto::ToArollaCompatibleType(tmp_0.non_optional_i32());
        }
      }();
      // protopath=`raw_bytes` name=`/raw_bytes`
      [&]() {
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[2];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, raw_bytes))) {
            outputs.GetMutable2(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable2(offset);
          output->present = true;
          output->value =
              ::arolla::proto::ToArollaCompatibleType(tmp_1.raw_bytes());
        }
      }();
      // protopath=`str` name=`/str`
      [&]() {
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[3];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, str))) {
            outputs.GetMutable3(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable3(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(tmp_1.str());
        }
      }();
      // protopath=`x` name=`/x`
      [&]() {
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[4];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, x))) {
            outputs.GetMutable4(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable4(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(tmp_1.x());
        }
      }();
      // protopath=`x0` name=`/x0`
      [&]() {
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[5];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, x0))) {
            outputs.GetMutable5(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable5(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(tmp_1.x0());
        }
      }();
      // protopath=`x1` name=`/x1`
      [&]() {
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[6];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, x1))) {
            outputs.GetMutable6(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable6(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(tmp_1.x1());
        }
      }();
      // protopath=`x2` name=`/x2`
      [&]() {
        if (size_t offset =
                outputs.requested_inputs->common.leaf_frame_offsets[7];
            offset != kSkippedOffset) {
          if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_1, x2))) {
            outputs.GetMutable7(offset)->present = false;
            return;
          }
          auto* output = outputs.GetMutable7(offset);
          output->present = true;
          output->value = ::arolla::proto::ToArollaCompatibleType(tmp_1.x2());
        }
      }();
    }();
    // protopath=`ROOT` fictive
    [&]() {
      if (!outputs.requested_inputs->common.node_requested[2]) {
        return;
      }
      const auto& tmp_2 = tmp_3;
      // protopath=`x3` name=`/x3`
      if (size_t offset =
              outputs.requested_inputs->common.leaf_frame_offsets[8];
          offset != kSkippedOffset) {
        if (!(AROLLA_PROTO3_COMPATIBLE_HAS(tmp_2, x3))) {
          outputs.GetMutable8(offset)->present = false;
          return;
        }
        auto* output = outputs.GetMutable8(offset);
        output->present = true;
        output->value = ::arolla::proto::ToArollaCompatibleType(tmp_2.x3());
      }
    }();
  }
};

// InputLoader for all single value protopathes.
class Loader final : public ::arolla::StaticInputLoader<Input> {
 public:
  Loader()
      : ::arolla::StaticInputLoader<Input>(
            // Use special builder to reduce binary size and stack pressure.
            []() {
              ::arolla::codegen::NamedQTypeVectorBuilder builder;
              builder.AddFromCommonPrefixWithPrevious(
                  // /private
                  8, R"RL_CODEGEN_DELIM(/private)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_0>());
              builder.AddFromCommonPrefixWithPrevious(
                  // /proto3/non_optional_i32
                  24,
                  R"RL_CODEGEN_DELIM(oto3/non_optional_i32)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_1>());
              builder.AddFromCommonPrefixWithPrevious(
                  // /raw_bytes
                  10, R"RL_CODEGEN_DELIM(raw_bytes)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_2>());
              builder.AddFromCommonPrefixWithPrevious(
                  // /str
                  4, R"RL_CODEGEN_DELIM(str)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_3>());
              builder.AddFromCommonPrefixWithPrevious(
                  // /x
                  2, R"RL_CODEGEN_DELIM(x)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_4>());
              builder.AddFromCommonPrefixWithPrevious(
                  // /x0
                  3, R"RL_CODEGEN_DELIM(0)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_5>());
              builder.AddFromCommonPrefixWithPrevious(
                  // /x1
                  3, R"RL_CODEGEN_DELIM(1)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_6>());
              builder.AddFromCommonPrefixWithPrevious(
                  // /x2
                  3, R"RL_CODEGEN_DELIM(2)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_7>());
              builder.AddFromCommonPrefixWithPrevious(
                  // /x3
                  3, R"RL_CODEGEN_DELIM(3)RL_CODEGEN_DELIM",
                  ::arolla::GetQType<ResultType_8>());
              return std::move(builder).Build();
            }()) {}

 private:
  auto CreateProtopathTree() const {
    return []() {
      std::vector<std::vector<size_t>> tree(13);
      tree[2] = {1};
      tree[9] = {0, 2, 3, 4, 5, 6, 7, 8};
      tree[11] = {10};
      tree[12] = {9, 11};
      return tree;
    }();
  }

  StatusOr<BoundInputLoader<Input>> BindImpl(
      const absl::flat_hash_map<std::string, TypedSlot>& output_slots)
      const final {
    ASSIGN_OR_RETURN(
        auto optional_slots,
        ::arolla::MaybeFindSlotsAndVerifyTypes(types_in_order(), output_slots));
    // Allocate on heap to reduce stack pressure.
    auto inputs = std::make_unique<HierarchicalSingleValueRequestedInputs>();
    auto tree = CreateProtopathTree();
    CreateHierarchicalSingleValueRequestedInputs(optional_slots,
                                                 /*size_leaves=*/{}, tree,
                                                 inputs.get());
    return BoundInputLoader<Input>(
        [inputs = std::move(inputs)](const Input& input, FramePtr frame,
                                     RawBufferFactory*) {
          OutputProvider output_getter{inputs.get(), frame};
          SlotSetter slot_setter;
          slot_setter.CollectResults(input, output_getter);
          return OkStatus();
        });
  }
};

}  // namespace single_value_protopath

}  // namespace

// Returns ChainInputLoader: Accessors, Single- and Multi-value proto.
const InputLoader<Input>* GetCollectionInputLoader() {
  static const InputLoader<Input>* impl =
      ChainInputLoader<Input>::Build(
          // Not using make_unique to avoid binary size blowup.
          ::arolla::InputLoaderPtr<Input>(static_cast<InputLoader<Input>*>(
              new single_value_protopath::Loader())))
          ->release();
  return impl;
}
}  // namespace shard1

namespace {}  // namespace
}  // namespace
   // my_namespace_GetDescriptorBasedLoaderWithoutRepeatedImplNamespace
