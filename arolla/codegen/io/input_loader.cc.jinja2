{# jinja2 file itself is NOT auto generated. -#}
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target: {{ build_target }}

{% from 'input_loader_single_value_proto.cc.jinja2' import single_value_loader -%}
{% from 'input_loader_multi_value_proto.cc.jinja2' import multi_value_loader -%}
{% from 'input_loader_accessors.cc.jinja2' import accessors_loader -%}
{% from 'input_loader_sharding.cc.jinja2' import collection_loader -%}

#include <memory>

{% for hdr in hdrs %}
{{ hdr.include_str }}
{%- endfor %}{# hdr #}
#include "arolla/io/accessors_input_loader.h"
#include "arolla/io/input_loader.h"
#include "arolla/io/wildcard_input_loader.h"
#include "arolla/proto/types.h"
#include "arolla/qtype/base_types.h"

namespace {
using ::absl::OkStatus;
using ::absl::Status;
using ::absl::StatusOr;
using ::arolla::BoundInputLoader;
using ::arolla::ChainInputLoader;
using ::arolla::FramePtr;
using ::arolla::GetQType;
using ::arolla::InputLoader;
using ::arolla::QTypePtr;
using ::arolla::RawBufferFactory;
using ::arolla::TypedSlot;
using ::arolla::WildcardInputLoader;
}  // namespace

{%-  set is_main_file = requested_shard_id == 0 %}

{% for loader_name, spec in loaders_spec %}
{%-  set impl_namespace =
     loader_name.namespace + '_' + loader_name.name + 'ImplNamespace' -%}
namespace {{ impl_namespace }} {

using Input = {{ spec.input_cls.full_name }};

{%    if is_main_file and spec.shard_count > 1 -%}
// Declare other shards defined in the separate cc files.
{%      for shard_id in range(1, spec.shard_count) -%}
namespace shard{{ shard_id}} {
const InputLoader<Input>* GetCollectionInputLoader();
}  // namespace shard{{ shard_id}}
{%      endfor %}{# shard_id #}
{%    endif -%}{# is_main_file -#}

{%  if requested_shard_id < (spec.accessors_collections | length) -%}
{%-  set spaced_shard_namespace =
    ''
    if is_main_file else
    ' ' + 'shard%s' % requested_shard_id
    -%}
namespace{{ spaced_shard_namespace }} {
{{    collection_loader(
        spec.accessors_collections[requested_shard_id],
        multi_protopath) }}
}  // namespace{{ spaced_shard_namespace }}
{%    endif -%}{# spec.shard_count -#}

{%- macro generate_wildcards_input_loaders() -%}
{%-   for accessor_name, accessor in spec.wildcard_accessors %}
// WildcardInputLoader {{ accessor_name }}
constexpr auto wildcard_lambda_{{ loop.index0 }} = {{ accessor.lambda_str }};
using AccessorResultType_{{ loop.index0 }} =
    ::arolla::WildcardAccessorResultType<
        decltype(wildcard_lambda_{{ loop.index0 }}), Input, std::string>;

absl::StatusOr<std::unique_ptr<InputLoader<Input>>>
CreateWildcardLoader{{ loop.index0 }}() {
  return WildcardInputLoader<Input>::Build(
      wildcard_lambda_{{ loop.index0 }},
      absl::ParsedFormat<'s'>(R"accessor____name({{ accessor_name }})accessor____name"));
}
{%   endfor -%}{# spec.wildcard_accessors -#}
{%- endmacro -%}{# generate_wildcards_input_loaders -#}

{%- macro generate_shard_input_loaders() -%}
// Returns InputLoaders for each shard.
std::vector<std::unique_ptr<InputLoader<Input>>>
GetShardInputLoaders() {
  std::vector<std::unique_ptr<InputLoader<Input>>> res;
  res.emplace_back() = MakeNotOwningInputLoader(GetCollectionInputLoader());
{%     for shard_id in range(1, spec.shard_count) -%}
  res.emplace_back() = MakeNotOwningInputLoader(
      shard{{ shard_id }}::GetCollectionInputLoader());
{%-    endfor %}{# accessors_collection #}
  return res;
}

// Returns ChainInputLoader with all shards.
const InputLoader<Input>*
GetAllShardsInputLoader() {
  static const InputLoader<Input>* impl =
        ChainInputLoader<Input>::Build(GetShardInputLoaders()).value().release();
  return impl;
}
{%- endmacro -%} {# generate_shard_input_loaders #}

namespace {
{%- if is_main_file %}
{{    generate_wildcards_input_loaders() }}

{%-   if spec.shard_count > 1 %}
{{      generate_shard_input_loaders() }}
{%-   else %}
constexpr auto GetAllShardsInputLoader =
    ::{{ impl_namespace }}::GetCollectionInputLoader;
{%-   endif %}{# spec.shard_count #}

{%- endif -%}{# is_main_file #}

{%-  if spec.wildcard_accessors|length > 0 and is_main_file %}

// Returns InputLoader with additional wildcards support.
const InputLoader<Input>*
GetInputLoaderWithWildcards() {
  static const InputLoader<{{ spec.input_cls.full_name }}>* impl =
      []() -> absl::StatusOr<std::unique_ptr<InputLoader<{{ spec.input_cls.full_name }}>>> {
        auto loader = MakeNotOwningInputLoader(
            ::{{ impl_namespace }}::GetAllShardsInputLoader());
        std::vector<std::unique_ptr<InputLoader<{{ spec.input_cls.full_name }}>>> loaders;
        loaders.reserve({{ (spec.wildcard_accessors | length) + 1 }});
        loaders.emplace_back(std::move(loader));
{%-   for accessor_name, _ in spec.wildcard_accessors %}
        ASSIGN_OR_RETURN(loaders.emplace_back(),
            ::{{ impl_namespace }}::CreateWildcardLoader{{ loop.index0 }}());
{%-   endfor %}{#- accessor_name #}
        return ChainInputLoader<{{ spec.input_cls.full_name }}>::Build(std::move(loaders));
      }().value().release();
  return impl;
}
{%-   endif %}{#- spec.wildcard_accessors|length > 0 #}

}  // namespace
}  // namespace {{ impl_namespace }}

{%- if is_main_file %}

{{ loader_name.open_namespace_str }}

std::unique_ptr<InputLoader<{{ spec.input_cls.full_name }}>>
{{ loader_name.name }}() {
{%-   if spec.wildcard_accessors|length > 0 %}
  return MakeNotOwningInputLoader(
      ::{{ impl_namespace }}::GetInputLoaderWithWildcards());
{%-   else -%}{#- spec.wildcard_accessors|length > 0 #}
  return MakeNotOwningInputLoader(
      ::{{ impl_namespace }}::GetAllShardsInputLoader());
{%-   endif %}{#- spec.wildcard_accessors|length > 0 #}
}

{%- if spec.shard_count > 1 %}
std::vector<std::unique_ptr<InputLoader<{{ spec.input_cls.full_name }}>>>
{{ loader_name.name }}_Shards() {
  return ::{{ impl_namespace }}::GetShardInputLoaders();
}
{% endif -%}{# spec.shard_count #}

{{ loader_name.close_namespace_str }}
{%- endif -%}{#- is_main_file #}

{% endfor -%}{# loader_name, spec #}
