{# jinja2 file itself is NOT auto generated. -#}
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Build target: {{ build_target }}
{% for hdr in hdrs %}
#include "{{ hdr }}"
{%- endfor %}{# hdr #}
#include "arolla/qexpr/eval_context.h"
#include "arolla/qexpr/operator_metadata.h"
#include "arolla/qtype/base_types.h"
#include "arolla/util/init_arolla.h"
#include "arolla/util/operator_name.h"

namespace {

template <bool accepts_context, class Op, class... Args>
constexpr bool DoesReturnStatusOr() {
  if constexpr (accepts_context) {
    return ::arolla::IsStatusOrT<
        std::invoke_result_t<Op, ::arolla::EvaluationContext*, Args...>>();
  } else {
    return ::arolla::IsStatusOrT<std::invoke_result_t<Op, Args...>>();
  }
}

void RegisterMetadatas() {
{%- for op in overloads %}
  {
    ::arolla::QExprOperatorMetadata metadata;
    metadata.name = AROLLA_OPERATOR_NAME("{{ op.op_name }}");
    metadata.build_details.build_target =
        "{{ op.build_target }}";
    metadata.build_details.op_class =
        "{{ op.op_class }}";
    ::arolla::OpClassDetails op_class_details;
    constexpr bool accepts_context = std::is_invocable_v<
      {{ op.op_class }},
      ::arolla::EvaluationContext*
{%-   for arg_type in op.arg_types %}
          , {{ arg_type }}
{%-   endfor %}{# arg_type -#}
    >;
    op_class_details.returns_status_or = DoesReturnStatusOr<
      accepts_context,
      {{ op.op_class }}
{%-   for arg_type in op.arg_types %}
      , {{ arg_type }}
{%-   endfor %}{# arg_type -#}>();
    op_class_details.arg_as_function_ids = { {{ op.arg_as_function_ids | join(", ") }} };
    op_class_details.accepts_context = accepts_context;
    metadata.build_details.op_class_details = op_class_details;
    metadata.build_details.hdrs = {
{%-   for hdr in op.hdrs %}
        "{{ hdr }}"
        {{- "," if not loop.last else "" }}
{%-   endfor %}{# hdr -#}
        };
    metadata.build_details.deps = {
{%-   for dep in op.deps %}
        "{{ dep }}"
        {{- "," if not loop.last else "" }}
{%-   endfor %}{# dep -#}
        };
    metadata.input_qtypes = {
{%-   for arg_type in op.arg_types %}
          ::arolla::GetQType<{{ arg_type }}>()
          {{- "," if not loop.last else "" }}
{%-   endfor %}{# arg_type -#}
    };
    ::arolla::RegisterOperatorMetadataOrDie(std::move(metadata));
  }
{%- endfor %}{# op #}
}

AROLLA_INITIALIZER(.reverse_deps = {::arolla::initializer_dep::kOperators,
                                    ::arolla::initializer_dep::kQExprOperators},
                   .init_fn = RegisterMetadatas)

}  // namespace
{# force keeping trailing newline #}
