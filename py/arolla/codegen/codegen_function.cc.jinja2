// THIS FILE IS AUTOGENERATED. DO NOT EDIT. {#- jinja2 file itself is NOT auto generated. #}
// Build target: {{ build_target }}

#include <vector>

#include "{{ full_header_name }}"

#include "absl/status/status.h"
#include "arolla/io/input_loader.h"
#include "arolla/io/delegating_input_loader.h"
#include "arolla/io/delegating_slot_listener.h"
#include "arolla/io/chain_slot_listener.h"
#include "arolla/io/accessors_input_loader.h"
#include "arolla/io/accessors_slot_listener.h"
#include "arolla/io/proto_types/types.h"
#include "arolla/serving/expr_compiler.h"
#include "arolla/serving/embedded_model.h"
{%- for hdr in extra_hdrs %}
#include "{{ hdr }}"
{%- endfor %}{# loader #}

{%- for name, spec in specs.items() %}
{%- set cc_namespace = spec.cc_function.lstrip('::').rpartition('::')[0] %}
{#- NOTE: model_getter_function is used as an initializer name for InitArolla
    and so must be unique #}
{%- set model_getter_function = 'CodegenFunction_' + spec.cc_function.lstrip('::').replace('::', '_') %}

namespace {{ cc_namespace }} {
namespace {{name}}_impl {
namespace {

using Input = std::tuple<
{%-   for input_arg in spec.inputs %}
const {{ input_arg.cc_class }}&
{%-   if not loop.last %},{% endif %}
{%-   endfor %}{# input_arg #}
>;

absl::StatusOr<::arolla::InputLoaderPtr<Input>>
CreateInputLoader() {
  std::vector<::arolla::InputLoaderPtr<Input>> loaders;
{%-   set ns = namespace(generated_size_accessors = []) %}
{%-   for input_arg in spec.inputs %}
  ASSIGN_OR_RETURN(
      loaders.emplace_back(),
      ::arolla::CreateDelegatingInputLoader<Input>(
          {{ input_arg.cc_input_loader_getter(cc_internal_namespace) }}(),
          [](const Input& input) -> const {{ input_arg.cc_class }} & {
            return std::get<{{ loop.index0 }}>(input);
          },
          /*name_prefix=*/"{{ input_arg.table_path }}/{{ input_arg.name }}"));
{%-     if input_arg.is_repeated and input_arg.table_path not in ns.generated_size_accessors %}
{%-       set ns.generated_size_accessors = ns.generated_size_accessors + [input_arg.table_path] %}
  ASSIGN_OR_RETURN(
      loaders.emplace_back(),
      ::arolla::CreateAccessorsInputLoader<Input>(
          "{{ input_arg.table_path }}/@size",
          [](const Input& input) {
              return ::arolla::DenseArrayShape{
                  static_cast<int64_t>(std::get<{{ loop.index0 }}>(input).size())};
          }));
{%-     endif %} {#- input_arg.is_repeated and str(input_arg.table_path) not in generated_size_accessors #}
{%-   endfor %} {#- input_arg #}

  return ::arolla::ChainInputLoader<Input>::Build(std::move(loaders));
}

using Output = std::tuple<
{%-   for output_arg in spec.outputs %}
{{ output_arg.cc_class }}&
{%-   if not loop.last %},{% endif %}
{%-   endfor %}{# output_arg #}
>;

absl::StatusOr<std::unique_ptr<::arolla::SlotListener<Output>>>
CreateSlotListener() {
  std::vector<std::unique_ptr<::arolla::SlotListener<Output>>> listeners;
{%-   for output_arg in spec.outputs %}
{%-     if output_arg.is_repeated %}  {#- Generate size accessor for all non-scalar index types. #}
  ASSIGN_OR_RETURN(
      listeners.emplace_back(),
      ::arolla::CreateAccessorsSlotListener<Output>(
          // NOTE: There might be duplicated slot listeners for the same path,
          // but ChainSlotListener will call all of them.
          "{{ output_arg.table_path }}/@size",
          [](::arolla::DenseArrayShape shape, Output* o) {
              ::arolla::proto::ResizeContainer(
                  std::get<{{ loop.index0 }}>(*o),
                  shape.size);
          }));
{%-     endif %} {#- output_arg.is_repeated #}
  ASSIGN_OR_RETURN(
    listeners.emplace_back(),
    ::arolla::CreateDelegatingSlotListener<Output>(
        {{ output_arg.cc_slot_listener_getter(cc_internal_namespace) }}(),
        [](Output* output) -> {{ output_arg.cc_class }}* {
          return &std::get<{{ loop.index0 }}>(*output);
        },
        /*name_prefix=*/"{{ output_arg.table_path }}/{{ output_arg.name }}"));
{%-   endfor %}{# output_arg #}

  return ::arolla::ChainSlotListener<Output>::Build(std::move(listeners));
}

AROLLA_DEFINE_EMBEDDED_MODEL_FN(
    {{model_getter_function}},
    (::arolla::ExprCompiler<Input, float, Output>())
          .SetInputLoader(CreateInputLoader())
          .SetSlotListener(CreateSlotListener())
          // TODO: Remove AllowSideOutputsCasting after this
          // bug is fixed.
          .AllowSideOutputsCasting()
          .Compile(::{{ cc_internal_namespace }}::{{ name }}_InternalCompiledExpr()));

}  // namespace
} // namespace {{name}}_impl

absl::Status {{spec.cc_function.split('::')[-1]}}(
{%-   for input_arg in spec.inputs %}
    const {{ input_arg.cc_class }}& {{ input_arg.name }},
{%-   endfor %}{# input_arg #}
{%-   for output_arg in spec.outputs %}
    {{ output_arg.cc_class }}& {{ output_arg.name }}
{%-   if not loop.last %},{% endif %}
{%-   endfor %}{# output_arg #}
) {
  {{name}}_impl::Output side_output = {
{%-   for output_arg in spec.outputs %}
    {{ output_arg.name }},
{%-   endfor %}{# loader #}
  };
  return {{name}}_impl::{{model_getter_function}}()(
    {{name}}_impl::Input{
{%-   for input_arg in spec.inputs %}
      {{ input_arg.name }},
{%-   endfor %}{# loader #}
    }, &side_output).status();
}

}  // namespace {{ cc_namespace }}
{%- endfor %} {#- name, spec in specs.items() #}
{# newline #}
