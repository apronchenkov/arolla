// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef THIRD_PARTY_PY_AROLLA_PY_UTILS_PY_OBJECT_AS_STATUS_PAYLOAD_H_
#define THIRD_PARTY_PY_AROLLA_PY_UTILS_PY_OBJECT_AS_STATUS_PAYLOAD_H_

#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/cord.h"
#include "absl/strings/string_view.h"
#include "py/arolla/py_utils/py_utils.h"

namespace arolla::python {

// Following type_urls should be used when Status payload is used to represent
// an underlying Python exception:
//
// kPyException indicates that stored exception should be raised as is.
constexpr absl::string_view kPyException = "arolla.py_utils.PyException";
// kPyExceptionCause indicates that stored exception should be raised as a
// cause for the exception normally generated by the Status handler.
constexpr absl::string_view kPyExceptionCause =
    "arolla.py_utils.PyExceptionCause";

// Returns absl::Cord that owns a PyObject object.
//
// Note: This function is intended for storing a python exception in within
// a absl::Status payload. If you consider using it for something else, please
// contact the RLv2 team.
absl::StatusOr<absl::Cord> WrapPyObjectToCord(PyObjectGILSafePtr obj);

// Returns a PyObject owned by the given absl::Cord, or an error.
absl::StatusOr<PyObjectGILSafePtr> UnwrapPyObjectFromCord(absl::Cord token);

// Sets the payload for a non-ok status using `type_url` key.
//
// If the operation is successful, the function returns absl::OkStatus.
// Otherwise, it returns an error.
absl::Status WritePyObjectToStatusPayload(absl::Status* status,
                                          absl::string_view type_url,
                                          PyObjectGILSafePtr obj);

// Gets the payload of a status given its unique `type_url` key, if present.
//
// Returns the stored `obj` if the payload was present and successfully decoded.
// If the payload is missing, the function returns nullptr. Otherwise, it
// returns an error.
absl::StatusOr<PyObjectGILSafePtr> ReadPyObjectFromStatusPayload(
    const absl::Status& status, absl::string_view type_url);

}  // namespace arolla::python

#endif  // THIRD_PARTY_PY_AROLLA_PY_UTILS_PY_OBJECT_AS_STATUS_PAYLOAD_H_
